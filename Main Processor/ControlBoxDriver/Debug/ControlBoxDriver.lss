
ControlBoxDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800200  00002f88  0000301c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000071b  00800228  00800228  00003044  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003044  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000030a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b00  00000000  00000000  000030e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000138f2  00000000  00000000  00003be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000049ef  00000000  00000000  000174d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000059da  00000000  00000000  0001bec1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002048  00000000  00000000  0002189c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000045d1  00000000  00000000  000238e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a1ec  00000000  00000000  00027eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b28  00000000  00000000  000320a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ae c0       	rjmp	.+348    	; 0x15e <__ctors_end>
       2:	00 00       	nop
       4:	d6 c0       	rjmp	.+428    	; 0x1b2 <__bad_interrupt>
       6:	00 00       	nop
       8:	d4 c0       	rjmp	.+424    	; 0x1b2 <__bad_interrupt>
       a:	00 00       	nop
       c:	d2 c0       	rjmp	.+420    	; 0x1b2 <__bad_interrupt>
       e:	00 00       	nop
      10:	d0 c0       	rjmp	.+416    	; 0x1b2 <__bad_interrupt>
      12:	00 00       	nop
      14:	ce c0       	rjmp	.+412    	; 0x1b2 <__bad_interrupt>
      16:	00 00       	nop
      18:	cc c0       	rjmp	.+408    	; 0x1b2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ca c0       	rjmp	.+404    	; 0x1b2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c8 c0       	rjmp	.+400    	; 0x1b2 <__bad_interrupt>
      22:	00 00       	nop
      24:	c6 c0       	rjmp	.+396    	; 0x1b2 <__bad_interrupt>
      26:	00 00       	nop
      28:	c4 c0       	rjmp	.+392    	; 0x1b2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c2 c0       	rjmp	.+388    	; 0x1b2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	c0 c0       	rjmp	.+384    	; 0x1b2 <__bad_interrupt>
      32:	00 00       	nop
      34:	be c0       	rjmp	.+380    	; 0x1b2 <__bad_interrupt>
      36:	00 00       	nop
      38:	bc c0       	rjmp	.+376    	; 0x1b2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ba c0       	rjmp	.+372    	; 0x1b2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b8 c0       	rjmp	.+368    	; 0x1b2 <__bad_interrupt>
      42:	00 00       	nop
      44:	b6 c0       	rjmp	.+364    	; 0x1b2 <__bad_interrupt>
      46:	00 00       	nop
      48:	b4 c0       	rjmp	.+360    	; 0x1b2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b2 c0       	rjmp	.+356    	; 0x1b2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 7f 10 	jmp	0x20fe	; 0x20fe <__vector_20>
      54:	ae c0       	rjmp	.+348    	; 0x1b2 <__bad_interrupt>
      56:	00 00       	nop
      58:	ac c0       	rjmp	.+344    	; 0x1b2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 30 10 	jmp	0x2060	; 0x2060 <__vector_23>
      60:	a8 c0       	rjmp	.+336    	; 0x1b2 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <__vector_25>
      68:	0c 94 6c 11 	jmp	0x22d8	; 0x22d8 <__vector_26>
      6c:	a2 c0       	rjmp	.+324    	; 0x1b2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	a0 c0       	rjmp	.+320    	; 0x1b2 <__bad_interrupt>
      72:	00 00       	nop
      74:	9f c0       	rjmp	.+318    	; 0x1b4 <__vector_29>
      76:	00 00       	nop
      78:	9c c0       	rjmp	.+312    	; 0x1b2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	9a c0       	rjmp	.+308    	; 0x1b2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	98 c0       	rjmp	.+304    	; 0x1b2 <__bad_interrupt>
      82:	00 00       	nop
      84:	96 c0       	rjmp	.+300    	; 0x1b2 <__bad_interrupt>
      86:	00 00       	nop
      88:	94 c0       	rjmp	.+296    	; 0x1b2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	92 c0       	rjmp	.+292    	; 0x1b2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 9a 11 	jmp	0x2334	; 0x2334 <__vector_36>
      94:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__vector_37>
      98:	8c c0       	rjmp	.+280    	; 0x1b2 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	8a c0       	rjmp	.+276    	; 0x1b2 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	88 c0       	rjmp	.+272    	; 0x1b2 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	86 c0       	rjmp	.+268    	; 0x1b2 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	84 c0       	rjmp	.+264    	; 0x1b2 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	82 c0       	rjmp	.+260    	; 0x1b2 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	80 c0       	rjmp	.+256    	; 0x1b2 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	7e c0       	rjmp	.+252    	; 0x1b2 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	7c c0       	rjmp	.+248    	; 0x1b2 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	7a c0       	rjmp	.+244    	; 0x1b2 <__bad_interrupt>
      be:	00 00       	nop
      c0:	78 c0       	rjmp	.+240    	; 0x1b2 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	76 c0       	rjmp	.+236    	; 0x1b2 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	74 c0       	rjmp	.+232    	; 0x1b2 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 3d 12 	jmp	0x247a	; 0x247a <__vector_51>
      d0:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__vector_52>
      d4:	6e c0       	rjmp	.+220    	; 0x1b2 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__vector_54>
      dc:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <__vector_55>
      e0:	68 c0       	rjmp	.+208    	; 0x1b2 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	10 08       	sbc	r1, r0
      e6:	ef 07       	cpc	r30, r31
      e8:	f2 07       	cpc	r31, r18
      ea:	f5 07       	cpc	r31, r21
      ec:	f8 07       	cpc	r31, r24
      ee:	fb 07       	cpc	r31, r27
      f0:	fe 07       	cpc	r31, r30
      f2:	01 08       	sbc	r0, r1
      f4:	04 08       	sbc	r0, r4
      f6:	07 08       	sbc	r0, r7
      f8:	0a 08       	sbc	r0, r10
      fa:	3d 08       	sbc	r3, r13
      fc:	1c 08       	sbc	r1, r12
      fe:	1f 08       	sbc	r1, r15
     100:	22 08       	sbc	r2, r2
     102:	25 08       	sbc	r2, r5
     104:	28 08       	sbc	r2, r8
     106:	2b 08       	sbc	r2, r11
     108:	2e 08       	sbc	r2, r14
     10a:	31 08       	sbc	r3, r1
     10c:	34 08       	sbc	r3, r4
     10e:	37 08       	sbc	r3, r7
     110:	bc 08       	sbc	r11, r12
     112:	9b 08       	sbc	r9, r11
     114:	9e 08       	sbc	r9, r14
     116:	a1 08       	sbc	r10, r1
     118:	a4 08       	sbc	r10, r4
     11a:	a7 08       	sbc	r10, r7
     11c:	aa 08       	sbc	r10, r10
     11e:	ad 08       	sbc	r10, r13
     120:	b0 08       	sbc	r11, r0
     122:	b3 08       	sbc	r11, r3
     124:	b6 08       	sbc	r11, r6
     126:	41 0c       	add	r4, r1
     128:	46 0c       	add	r4, r6
     12a:	49 0c       	add	r4, r9
     12c:	4d 0c       	add	r4, r13
     12e:	50 0c       	add	r5, r0
     130:	64 0c       	add	r6, r4
     132:	5b 0c       	add	r5, r11
     134:	5e 0c       	add	r5, r14
     136:	cf 0c       	add	r12, r15
     138:	d4 0c       	add	r13, r4
     13a:	d7 0c       	add	r13, r7
     13c:	db 0c       	add	r13, r11
     13e:	ea 0c       	add	r14, r10
     140:	de 0c       	add	r13, r14
     142:	e1 0c       	add	r14, r1
     144:	e4 0c       	add	r14, r4
     146:	15 11       	cpse	r17, r5
     148:	18 11       	cpse	r17, r8
     14a:	1c 11       	cpse	r17, r12
     14c:	20 11       	cpse	r18, r0
     14e:	24 11       	cpse	r18, r4
     150:	28 11       	cpse	r18, r8
     152:	2c 11       	cpse	r18, r12
     154:	30 11       	cpse	r19, r0

00000156 <__ctors_start>:
     156:	ce 06       	cpc	r12, r30
     158:	fd 0a       	sbc	r15, r29
     15a:	0c 0b       	sbc	r16, r28
     15c:	20 10       	cpse	r2, r0

0000015e <__ctors_end>:
     15e:	11 24       	eor	r1, r1
     160:	1f be       	out	0x3f, r1	; 63
     162:	cf ef       	ldi	r28, 0xFF	; 255
     164:	d1 e2       	ldi	r29, 0x21	; 33
     166:	de bf       	out	0x3e, r29	; 62
     168:	cd bf       	out	0x3d, r28	; 61

0000016a <__do_copy_data>:
     16a:	12 e0       	ldi	r17, 0x02	; 2
     16c:	a0 e0       	ldi	r26, 0x00	; 0
     16e:	b2 e0       	ldi	r27, 0x02	; 2
     170:	e8 e8       	ldi	r30, 0x88	; 136
     172:	ff e2       	ldi	r31, 0x2F	; 47
     174:	00 e0       	ldi	r16, 0x00	; 0
     176:	0b bf       	out	0x3b, r16	; 59
     178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x14>
     17a:	07 90       	elpm	r0, Z+
     17c:	0d 92       	st	X+, r0
     17e:	a8 32       	cpi	r26, 0x28	; 40
     180:	b1 07       	cpc	r27, r17
     182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0x10>

00000184 <__do_clear_bss>:
     184:	29 e0       	ldi	r18, 0x09	; 9
     186:	a8 e2       	ldi	r26, 0x28	; 40
     188:	b2 e0       	ldi	r27, 0x02	; 2
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
     18e:	a3 34       	cpi	r26, 0x43	; 67
     190:	b2 07       	cpc	r27, r18
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>

00000194 <__do_global_ctors>:
     194:	10 e0       	ldi	r17, 0x00	; 0
     196:	cf ea       	ldi	r28, 0xAF	; 175
     198:	d0 e0       	ldi	r29, 0x00	; 0
     19a:	04 c0       	rjmp	.+8      	; 0x1a4 <__do_global_ctors+0x10>
     19c:	21 97       	sbiw	r28, 0x01	; 1
     19e:	fe 01       	movw	r30, r28
     1a0:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__tablejump2__>
     1a4:	cb 3a       	cpi	r28, 0xAB	; 171
     1a6:	d1 07       	cpc	r29, r17
     1a8:	c9 f7       	brne	.-14     	; 0x19c <__do_global_ctors+0x8>
     1aa:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <main>
     1ae:	0c 94 c2 17 	jmp	0x2f84	; 0x2f84 <_exit>

000001b2 <__bad_interrupt>:
     1b2:	26 cf       	rjmp	.-436    	; 0x0 <__vectors>

000001b4 <__vector_29>:
     1b4:	1f 92       	push	r1
     1b6:	0f 92       	push	r0
     1b8:	0f b6       	in	r0, 0x3f	; 63
     1ba:	0f 92       	push	r0
     1bc:	11 24       	eor	r1, r1
     1be:	8f 93       	push	r24
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
     1c6:	8f 91       	pop	r24
     1c8:	0f 90       	pop	r0
     1ca:	0f be       	out	0x3f, r0	; 63
     1cc:	0f 90       	pop	r0
     1ce:	1f 90       	pop	r1
     1d0:	18 95       	reti

000001d2 <_ZN11AnalogInput24select_voltage_referenceEv>:
     1d2:	ec e7       	ldi	r30, 0x7C	; 124
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	80 64       	ori	r24, 0x40	; 64
     1da:	80 83       	st	Z, r24
     1dc:	08 95       	ret

000001de <_ZN11AnalogInput22switch_to_this_channelEv>:
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
     1e2:	ec 01       	movw	r28, r24
     1e4:	ec e7       	ldi	r30, 0x7C	; 124
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	90 81       	ld	r25, Z
     1ea:	90 7e       	andi	r25, 0xE0	; 224
     1ec:	90 83       	st	Z, r25
     1ee:	ab e7       	ldi	r26, 0x7B	; 123
     1f0:	b0 e0       	ldi	r27, 0x00	; 0
     1f2:	9c 91       	ld	r25, X
     1f4:	97 7f       	andi	r25, 0xF7	; 247
     1f6:	9c 93       	st	X, r25
     1f8:	90 81       	ld	r25, Z
     1fa:	88 81       	ld	r24, Y
     1fc:	89 2b       	or	r24, r25
     1fe:	80 83       	st	Z, r24
     200:	df 91       	pop	r29
     202:	cf 91       	pop	r28
     204:	08 95       	ret

00000206 <_ZN11AnalogInput12set_prescaleEv>:
     206:	ea e7       	ldi	r30, 0x7A	; 122
     208:	f0 e0       	ldi	r31, 0x00	; 0
     20a:	80 81       	ld	r24, Z
     20c:	87 60       	ori	r24, 0x07	; 7
     20e:	80 83       	st	Z, r24
     210:	08 95       	ret

00000212 <_ZN11AnalogInput10enable_adcEv>:
     212:	ea e7       	ldi	r30, 0x7A	; 122
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	80 68       	ori	r24, 0x80	; 128
     21a:	80 83       	st	Z, r24
     21c:	08 95       	ret

0000021e <_ZN11AnalogInput10initializeE14ANALOG_CHANNEL>:
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	ec 01       	movw	r28, r24
     224:	78 94       	sei
     226:	68 83       	st	Y, r22
     228:	d4 df       	rcall	.-88     	; 0x1d2 <_ZN11AnalogInput24select_voltage_referenceEv>
     22a:	ee e7       	ldi	r30, 0x7E	; 126
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	80 81       	ld	r24, Z
     230:	8f ef       	ldi	r24, 0xFF	; 255
     232:	80 83       	st	Z, r24
     234:	ce 01       	movw	r24, r28
     236:	e7 df       	rcall	.-50     	; 0x206 <_ZN11AnalogInput12set_prescaleEv>
     238:	ce 01       	movw	r24, r28
     23a:	eb df       	rcall	.-42     	; 0x212 <_ZN11AnalogInput10enable_adcEv>
     23c:	df 91       	pop	r29
     23e:	cf 91       	pop	r28
     240:	08 95       	ret

00000242 <_ZN11AnalogInput16start_conversionEv>:
     242:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <__data_end>
     246:	ea e7       	ldi	r30, 0x7A	; 122
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	88 60       	ori	r24, 0x08	; 8
     24e:	80 83       	st	Z, r24
     250:	80 81       	ld	r24, Z
     252:	80 64       	ori	r24, 0x40	; 64
     254:	80 83       	st	Z, r24
     256:	08 95       	ret

00000258 <_ZN11AnalogInput4readEv>:
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	ec 01       	movw	r28, r24
     25e:	bf df       	rcall	.-130    	; 0x1de <_ZN11AnalogInput22switch_to_this_channelEv>
     260:	ce 01       	movw	r24, r28
     262:	ef df       	rcall	.-34     	; 0x242 <_ZN11AnalogInput16start_conversionEv>
     264:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     268:	88 23       	and	r24, r24
     26a:	e1 f3       	breq	.-8      	; 0x264 <_ZN11AnalogInput4readEv+0xc>
     26c:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     270:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	98 2f       	mov	r25, r24
     278:	88 27       	eor	r24, r24
     27a:	82 0f       	add	r24, r18
     27c:	91 1d       	adc	r25, r1
     27e:	df 91       	pop	r29
     280:	cf 91       	pop	r28
     282:	08 95       	ret

00000284 <_ZN14Communications10initializeEjP6Memory>:
}

long Communications::mapVal(long x, long in_min, long in_max, long out_min, long out_max)
{
	return  (x - in_min) * (out_max - out_min ) / (in_max - in_min) + out_min;
     284:	fc 01       	movw	r30, r24
     286:	51 83       	std	Z+1, r21	; 0x01
     288:	40 83       	st	Z, r20
     28a:	88 e0       	ldi	r24, 0x08	; 8
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <_Z16uart1_initializej>
     292:	48 ec       	ldi	r20, 0xC8	; 200
     294:	50 e0       	ldi	r21, 0x00	; 0
     296:	60 e0       	ldi	r22, 0x00	; 0
     298:	70 e0       	ldi	r23, 0x00	; 0
     29a:	89 e5       	ldi	r24, 0x59	; 89
     29c:	92 e0       	ldi	r25, 0x02	; 2
     29e:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <_ZN6Clocks11setIntervalEl>
     2a2:	4c e2       	ldi	r20, 0x2C	; 44
     2a4:	51 e0       	ldi	r21, 0x01	; 1
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	70 e0       	ldi	r23, 0x00	; 0
     2aa:	8d e4       	ldi	r24, 0x4D	; 77
     2ac:	92 e0       	ldi	r25, 0x02	; 2
     2ae:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <_ZN6Clocks11setIntervalEl>
     2b2:	40 ed       	ldi	r20, 0xD0	; 208
     2b4:	57 e0       	ldi	r21, 0x07	; 7
     2b6:	60 e0       	ldi	r22, 0x00	; 0
     2b8:	70 e0       	ldi	r23, 0x00	; 0
     2ba:	81 e4       	ldi	r24, 0x41	; 65
     2bc:	92 e0       	ldi	r25, 0x02	; 2
     2be:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <_ZN6Clocks11setIntervalEl>
     2c2:	42 ef       	ldi	r20, 0xF2	; 242
     2c4:	53 e0       	ldi	r21, 0x03	; 3
     2c6:	60 e0       	ldi	r22, 0x00	; 0
     2c8:	70 e0       	ldi	r23, 0x00	; 0
     2ca:	85 e3       	ldi	r24, 0x35	; 53
     2cc:	92 e0       	ldi	r25, 0x02	; 2
     2ce:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <_ZN6Clocks11setIntervalEl>
     2d2:	08 95       	ret

000002d4 <_ZN14Communications16check_connectionEv>:
     2d4:	81 e4       	ldi	r24, 0x41	; 65
     2d6:	92 e0       	ldi	r25, 0x02	; 2
     2d8:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <_ZN6Clocks14isDone_NoResetEv>
     2dc:	88 23       	and	r24, r24
     2de:	71 f0       	breq	.+28     	; 0x2fc <_ZN14Communications16check_connectionEv+0x28>
     2e0:	85 e3       	ldi	r24, 0x35	; 53
     2e2:	92 e0       	ldi	r25, 0x02	; 2
     2e4:	0e 94 76 0f 	call	0x1eec	; 0x1eec <_ZN6Clocks5resetEv>
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	70 e0       	ldi	r23, 0x00	; 0
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <_ZN6Memory5writeEhj>
     2f2:	60 e0       	ldi	r22, 0x00	; 0
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	84 e0       	ldi	r24, 0x04	; 4
     2f8:	0c 94 4a 0f 	jmp	0x1e94	; 0x1e94 <_ZN6Memory5writeEhj>
     2fc:	08 95       	ret

000002fe <_ZN14Communications25is_emergency_stop_pressedEv>:
     2fe:	80 e3       	ldi	r24, 0x30	; 48
     300:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN6Memory4readEh>
     304:	21 e0       	ldi	r18, 0x01	; 1
     306:	89 2b       	or	r24, r25
     308:	09 f4       	brne	.+2      	; 0x30c <_ZN14Communications25is_emergency_stop_pressedEv+0xe>
     30a:	20 e0       	ldi	r18, 0x00	; 0
     30c:	82 2f       	mov	r24, r18
     30e:	08 95       	ret

00000310 <_ZN14Communications19get_requested_macroEv>:
     310:	cf 92       	push	r12
     312:	df 92       	push	r13
     314:	ef 92       	push	r14
     316:	ff 92       	push	r15
     318:	1f 93       	push	r17
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	10 e4       	ldi	r17, 0x40	; 64
     320:	c0 e0       	ldi	r28, 0x00	; 0
     322:	d0 e0       	ldi	r29, 0x00	; 0
     324:	e1 2c       	mov	r14, r1
     326:	f1 2c       	mov	r15, r1
     328:	cc 24       	eor	r12, r12
     32a:	c3 94       	inc	r12
     32c:	d1 2c       	mov	r13, r1
     32e:	81 2f       	mov	r24, r17
     330:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN6Memory4readEh>
     334:	89 2b       	or	r24, r25
     336:	49 f0       	breq	.+18     	; 0x34a <_ZN14Communications19get_requested_macroEv+0x3a>
     338:	c6 01       	movw	r24, r12
     33a:	0c 2e       	mov	r0, r28
     33c:	02 c0       	rjmp	.+4      	; 0x342 <_ZN14Communications19get_requested_macroEv+0x32>
     33e:	88 0f       	add	r24, r24
     340:	99 1f       	adc	r25, r25
     342:	0a 94       	dec	r0
     344:	e2 f7       	brpl	.-8      	; 0x33e <_ZN14Communications19get_requested_macroEv+0x2e>
     346:	e8 2a       	or	r14, r24
     348:	f9 2a       	or	r15, r25
     34a:	21 96       	adiw	r28, 0x01	; 1
     34c:	1f 5f       	subi	r17, 0xFF	; 255
     34e:	c0 31       	cpi	r28, 0x10	; 16
     350:	d1 05       	cpc	r29, r1
     352:	69 f7       	brne	.-38     	; 0x32e <_ZN14Communications19get_requested_macroEv+0x1e>
     354:	c7 01       	movw	r24, r14
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	1f 91       	pop	r17
     35c:	ff 90       	pop	r15
     35e:	ef 90       	pop	r14
     360:	df 90       	pop	r13
     362:	cf 90       	pop	r12
     364:	08 95       	ret

00000366 <_ZN14Communications24get_bucket_motor_commandEP7MessageRh>:
     366:	cf 92       	push	r12
     368:	df 92       	push	r13
     36a:	ef 92       	push	r14
     36c:	ff 92       	push	r15
     36e:	0f 93       	push	r16
     370:	1f 93       	push	r17
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
     376:	eb 01       	movw	r28, r22
     378:	8a 01       	movw	r16, r20
     37a:	85 e2       	ldi	r24, 0x25	; 37
     37c:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN6Memory4readEh>
     380:	25 e5       	ldi	r18, 0x55	; 85
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	dc 01       	movw	r26, r24
     386:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__usmulhisi3>
     38a:	6b 01       	movw	r12, r22
     38c:	7c 01       	movw	r14, r24
     38e:	99 23       	and	r25, r25
     390:	34 f4       	brge	.+12     	; 0x39e <_ZN14Communications24get_bucket_motor_commandEP7MessageRh+0x38>
     392:	2f ef       	ldi	r18, 0xFF	; 255
     394:	c2 0e       	add	r12, r18
     396:	23 e0       	ldi	r18, 0x03	; 3
     398:	d2 1e       	adc	r13, r18
     39a:	e1 1c       	adc	r14, r1
     39c:	f1 1c       	adc	r15, r1
     39e:	d7 01       	movw	r26, r14
     3a0:	c6 01       	movw	r24, r12
     3a2:	07 2e       	mov	r0, r23
     3a4:	7a e0       	ldi	r23, 0x0A	; 10
     3a6:	b5 95       	asr	r27
     3a8:	a7 95       	ror	r26
     3aa:	97 95       	ror	r25
     3ac:	87 95       	ror	r24
     3ae:	7a 95       	dec	r23
     3b0:	d1 f7       	brne	.-12     	; 0x3a6 <_ZN14Communications24get_bucket_motor_commandEP7MessageRh+0x40>
     3b2:	70 2d       	mov	r23, r0
     3b4:	6c 01       	movw	r12, r24
     3b6:	7d 01       	movw	r14, r26
     3b8:	2f e0       	ldi	r18, 0x0F	; 15
     3ba:	c2 0e       	add	r12, r18
     3bc:	d1 1c       	adc	r13, r1
     3be:	e1 1c       	adc	r14, r1
     3c0:	f1 1c       	adc	r15, r1
     3c2:	85 e3       	ldi	r24, 0x35	; 53
     3c4:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN6Memory4readEh>
     3c8:	89 2b       	or	r24, r25
     3ca:	31 f0       	breq	.+12     	; 0x3d8 <_ZN14Communications24get_bucket_motor_commandEP7MessageRh+0x72>
     3cc:	d1 94       	neg	r13
     3ce:	c1 94       	neg	r12
     3d0:	d1 08       	sbc	r13, r1
     3d2:	3c 2d       	mov	r19, r12
     3d4:	2d 2d       	mov	r18, r13
     3d6:	0a c0       	rjmp	.+20     	; 0x3ec <_ZN14Communications24get_bucket_motor_commandEP7MessageRh+0x86>
     3d8:	84 e3       	ldi	r24, 0x34	; 52
     3da:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN6Memory4readEh>
     3de:	89 2b       	or	r24, r25
     3e0:	19 f0       	breq	.+6      	; 0x3e8 <_ZN14Communications24get_bucket_motor_commandEP7MessageRh+0x82>
     3e2:	3c 2d       	mov	r19, r12
     3e4:	2d 2d       	mov	r18, r13
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <_ZN14Communications24get_bucket_motor_commandEP7MessageRh+0x86>
     3e8:	20 e0       	ldi	r18, 0x00	; 0
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	d8 01       	movw	r26, r16
     3ee:	ec 91       	ld	r30, X
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	8e 0f       	add	r24, r30
     3f4:	8c 93       	st	X, r24
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	cf 01       	movw	r24, r30
     3fa:	88 0f       	add	r24, r24
     3fc:	99 1f       	adc	r25, r25
     3fe:	e8 0f       	add	r30, r24
     400:	f9 1f       	adc	r31, r25
     402:	ec 0f       	add	r30, r28
     404:	fd 1f       	adc	r31, r29
     406:	84 e0       	ldi	r24, 0x04	; 4
     408:	80 83       	st	Z, r24
     40a:	31 83       	std	Z+1, r19	; 0x01
     40c:	22 83       	std	Z+2, r18	; 0x02
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	1f 91       	pop	r17
     414:	0f 91       	pop	r16
     416:	ff 90       	pop	r15
     418:	ef 90       	pop	r14
     41a:	df 90       	pop	r13
     41c:	cf 90       	pop	r12
     41e:	08 95       	ret

00000420 <_ZN14Communications22get_plow_motor_commandEP7MessageRh>:
     420:	0f 93       	push	r16
     422:	1f 93       	push	r17
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	8b 01       	movw	r16, r22
     42a:	ea 01       	movw	r28, r20
     42c:	81 e3       	ldi	r24, 0x31	; 49
     42e:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN6Memory4readEh>
     432:	89 2b       	or	r24, r25
     434:	91 f4       	brne	.+36     	; 0x45a <_ZN14Communications22get_plow_motor_commandEP7MessageRh+0x3a>
     436:	87 e3       	ldi	r24, 0x37	; 55
     438:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN6Memory4readEh>
     43c:	89 2b       	or	r24, r25
     43e:	81 f4       	brne	.+32     	; 0x460 <_ZN14Communications22get_plow_motor_commandEP7MessageRh+0x40>
     440:	82 e3       	ldi	r24, 0x32	; 50
     442:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN6Memory4readEh>
     446:	89 2b       	or	r24, r25
     448:	71 f4       	brne	.+28     	; 0x466 <_ZN14Communications22get_plow_motor_commandEP7MessageRh+0x46>
     44a:	88 e3       	ldi	r24, 0x38	; 56
     44c:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN6Memory4readEh>
     450:	89 2b       	or	r24, r25
     452:	61 f0       	breq	.+24     	; 0x46c <_ZN14Communications22get_plow_motor_commandEP7MessageRh+0x4c>
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	94 e6       	ldi	r25, 0x64	; 100
     458:	0b c0       	rjmp	.+22     	; 0x470 <_ZN14Communications22get_plow_motor_commandEP7MessageRh+0x50>
     45a:	8f ef       	ldi	r24, 0xFF	; 255
     45c:	9c e9       	ldi	r25, 0x9C	; 156
     45e:	08 c0       	rjmp	.+16     	; 0x470 <_ZN14Communications22get_plow_motor_commandEP7MessageRh+0x50>
     460:	8f ef       	ldi	r24, 0xFF	; 255
     462:	9c e9       	ldi	r25, 0x9C	; 156
     464:	05 c0       	rjmp	.+10     	; 0x470 <_ZN14Communications22get_plow_motor_commandEP7MessageRh+0x50>
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	94 e6       	ldi	r25, 0x64	; 100
     46a:	02 c0       	rjmp	.+4      	; 0x470 <_ZN14Communications22get_plow_motor_commandEP7MessageRh+0x50>
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	e8 81       	ld	r30, Y
     472:	21 e0       	ldi	r18, 0x01	; 1
     474:	2e 0f       	add	r18, r30
     476:	28 83       	st	Y, r18
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	9f 01       	movw	r18, r30
     47c:	22 0f       	add	r18, r18
     47e:	33 1f       	adc	r19, r19
     480:	e2 0f       	add	r30, r18
     482:	f3 1f       	adc	r31, r19
     484:	e0 0f       	add	r30, r16
     486:	f1 1f       	adc	r31, r17
     488:	25 e0       	ldi	r18, 0x05	; 5
     48a:	20 83       	st	Z, r18
     48c:	91 83       	std	Z+1, r25	; 0x01
     48e:	82 83       	std	Z+2, r24	; 0x02
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	1f 91       	pop	r17
     496:	0f 91       	pop	r16
     498:	08 95       	ret

0000049a <_ZN14Communications13joystickR_msgEP7MessageRh>:
     49a:	2f 92       	push	r2
     49c:	3f 92       	push	r3
     49e:	4f 92       	push	r4
     4a0:	5f 92       	push	r5
     4a2:	6f 92       	push	r6
     4a4:	7f 92       	push	r7
     4a6:	8f 92       	push	r8
     4a8:	9f 92       	push	r9
     4aa:	af 92       	push	r10
     4ac:	bf 92       	push	r11
     4ae:	cf 92       	push	r12
     4b0:	df 92       	push	r13
     4b2:	ef 92       	push	r14
     4b4:	ff 92       	push	r15
     4b6:	0f 93       	push	r16
     4b8:	1f 93       	push	r17
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	00 d0       	rcall	.+0      	; 0x4c0 <_ZN14Communications13joystickR_msgEP7MessageRh+0x26>
     4c0:	00 d0       	rcall	.+0      	; 0x4c2 <_ZN14Communications13joystickR_msgEP7MessageRh+0x28>
     4c2:	00 d0       	rcall	.+0      	; 0x4c4 <_ZN14Communications13joystickR_msgEP7MessageRh+0x2a>
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
     4c8:	8b 01       	movw	r16, r22
     4ca:	5e 83       	std	Y+6, r21	; 0x06
     4cc:	4d 83       	std	Y+5, r20	; 0x05
     4ce:	80 e2       	ldi	r24, 0x20	; 32
     4d0:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN6Memory4readEh>
     4d4:	6c 01       	movw	r12, r24
     4d6:	81 e2       	ldi	r24, 0x21	; 33
     4d8:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN6Memory4readEh>
     4dc:	7c 01       	movw	r14, r24
     4de:	85 e2       	ldi	r24, 0x25	; 37
     4e0:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN6Memory4readEh>
     4e4:	25 e5       	ldi	r18, 0x55	; 85
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	dc 01       	movw	r26, r24
     4ea:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__usmulhisi3>
     4ee:	28 ee       	ldi	r18, 0xE8	; 232
     4f0:	33 e0       	ldi	r19, 0x03	; 3
     4f2:	40 e0       	ldi	r20, 0x00	; 0
     4f4:	50 e0       	ldi	r21, 0x00	; 0
     4f6:	0e 94 be 14 	call	0x297c	; 0x297c <__divmodsi4>
     4fa:	29 01       	movw	r4, r18
     4fc:	3a 01       	movw	r6, r20
     4fe:	8f e0       	ldi	r24, 0x0F	; 15
     500:	48 0e       	add	r4, r24
     502:	51 1c       	adc	r5, r1
     504:	61 1c       	adc	r6, r1
     506:	71 1c       	adc	r7, r1
     508:	97 01       	movw	r18, r14
     50a:	ad ec       	ldi	r26, 0xCD	; 205
     50c:	bc ec       	ldi	r27, 0xCC	; 204
     50e:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__umulhisi3>
     512:	96 95       	lsr	r25
     514:	87 95       	ror	r24
     516:	96 95       	lsr	r25
     518:	87 95       	ror	r24
     51a:	bc 01       	movw	r22, r24
     51c:	64 56       	subi	r22, 0x64	; 100
     51e:	71 09       	sbc	r23, r1
     520:	07 2e       	mov	r0, r23
     522:	00 0c       	add	r0, r0
     524:	88 0b       	sbc	r24, r24
     526:	99 0b       	sbc	r25, r25
     528:	0e 94 9e 13 	call	0x273c	; 0x273c <__floatsisf>
     52c:	4b 01       	movw	r8, r22
     52e:	5c 01       	movw	r10, r24
     530:	96 01       	movw	r18, r12
     532:	ad ec       	ldi	r26, 0xCD	; 205
     534:	bc ec       	ldi	r27, 0xCC	; 204
     536:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__umulhisi3>
     53a:	96 95       	lsr	r25
     53c:	87 95       	ror	r24
     53e:	96 95       	lsr	r25
     540:	87 95       	ror	r24
     542:	bc 01       	movw	r22, r24
     544:	64 56       	subi	r22, 0x64	; 100
     546:	71 09       	sbc	r23, r1
     548:	07 2e       	mov	r0, r23
     54a:	00 0c       	add	r0, r0
     54c:	88 0b       	sbc	r24, r24
     54e:	99 0b       	sbc	r25, r25
     550:	0e 94 9e 13 	call	0x273c	; 0x273c <__floatsisf>
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	40 e0       	ldi	r20, 0x00	; 0
     55a:	5f e3       	ldi	r21, 0x3F	; 63
     55c:	0e 94 2a 14 	call	0x2854	; 0x2854 <__mulsf3>
     560:	6b 01       	movw	r12, r22
     562:	7c 01       	movw	r14, r24
     564:	9b 01       	movw	r18, r22
     566:	ac 01       	movw	r20, r24
     568:	c5 01       	movw	r24, r10
     56a:	b4 01       	movw	r22, r8
     56c:	0e 94 07 13 	call	0x260e	; 0x260e <__addsf3>
     570:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__fixsfsi>
     574:	69 83       	std	Y+1, r22	; 0x01
     576:	7a 83       	std	Y+2, r23	; 0x02
     578:	8b 83       	std	Y+3, r24	; 0x03
     57a:	9c 83       	std	Y+4, r25	; 0x04
     57c:	a7 01       	movw	r20, r14
     57e:	96 01       	movw	r18, r12
     580:	c5 01       	movw	r24, r10
     582:	b4 01       	movw	r22, r8
     584:	0e 94 06 13 	call	0x260c	; 0x260c <__subsf3>
     588:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__fixsfsi>
     58c:	29 81       	ldd	r18, Y+1	; 0x01
     58e:	3a 81       	ldd	r19, Y+2	; 0x02
     590:	2c 39       	cpi	r18, 0x9C	; 156
     592:	ef ef       	ldi	r30, 0xFF	; 255
     594:	3e 07       	cpc	r19, r30
     596:	14 f4       	brge	.+4      	; 0x59c <_ZN14Communications13joystickR_msgEP7MessageRh+0x102>
     598:	2c e9       	ldi	r18, 0x9C	; 156
     59a:	3f ef       	ldi	r19, 0xFF	; 255
     59c:	1b 01       	movw	r2, r22
     59e:	6c 39       	cpi	r22, 0x9C	; 156
     5a0:	7f 4f       	sbci	r23, 0xFF	; 255
     5a2:	34 f4       	brge	.+12     	; 0x5b0 <_ZN14Communications13joystickR_msgEP7MessageRh+0x116>
     5a4:	0f 2e       	mov	r0, r31
     5a6:	fc e9       	ldi	r31, 0x9C	; 156
     5a8:	2f 2e       	mov	r2, r31
     5aa:	33 24       	eor	r3, r3
     5ac:	3a 94       	dec	r3
     5ae:	f0 2d       	mov	r31, r0
     5b0:	88 24       	eor	r8, r8
     5b2:	99 24       	eor	r9, r9
     5b4:	84 18       	sub	r8, r4
     5b6:	95 08       	sbc	r9, r5
     5b8:	09 2c       	mov	r0, r9
     5ba:	00 0c       	add	r0, r0
     5bc:	aa 08       	sbc	r10, r10
     5be:	bb 08       	sbc	r11, r11
     5c0:	05 2c       	mov	r0, r5
     5c2:	00 0c       	add	r0, r0
     5c4:	66 08       	sbc	r6, r6
     5c6:	77 08       	sbc	r7, r7
     5c8:	48 18       	sub	r4, r8
     5ca:	59 08       	sbc	r5, r9
     5cc:	6a 08       	sbc	r6, r10
     5ce:	7b 08       	sbc	r7, r11
     5d0:	25 36       	cpi	r18, 0x65	; 101
     5d2:	31 05       	cpc	r19, r1
     5d4:	14 f0       	brlt	.+4      	; 0x5da <_ZN14Communications13joystickR_msgEP7MessageRh+0x140>
     5d6:	24 e6       	ldi	r18, 0x64	; 100
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	c9 01       	movw	r24, r18
     5dc:	33 0f       	add	r19, r19
     5de:	aa 0b       	sbc	r26, r26
     5e0:	bb 0b       	sbc	r27, r27
     5e2:	9c 01       	movw	r18, r24
     5e4:	ad 01       	movw	r20, r26
     5e6:	2c 59       	subi	r18, 0x9C	; 156
     5e8:	3f 4f       	sbci	r19, 0xFF	; 255
     5ea:	4f 4f       	sbci	r20, 0xFF	; 255
     5ec:	5f 4f       	sbci	r21, 0xFF	; 255
     5ee:	c3 01       	movw	r24, r6
     5f0:	b2 01       	movw	r22, r4
     5f2:	0e 94 8d 14 	call	0x291a	; 0x291a <__mulsi3>
     5f6:	28 ec       	ldi	r18, 0xC8	; 200
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	40 e0       	ldi	r20, 0x00	; 0
     5fc:	50 e0       	ldi	r21, 0x00	; 0
     5fe:	0e 94 be 14 	call	0x297c	; 0x297c <__divmodsi4>
     602:	69 01       	movw	r12, r18
     604:	7a 01       	movw	r14, r20
     606:	c8 0c       	add	r12, r8
     608:	d9 1c       	adc	r13, r9
     60a:	ea 1c       	adc	r14, r10
     60c:	fb 1c       	adc	r15, r11
     60e:	da 82       	std	Y+2, r13	; 0x02
     610:	c9 82       	std	Y+1, r12	; 0x01
     612:	91 01       	movw	r18, r2
     614:	25 36       	cpi	r18, 0x65	; 101
     616:	31 05       	cpc	r19, r1
     618:	14 f0       	brlt	.+4      	; 0x61e <_ZN14Communications13joystickR_msgEP7MessageRh+0x184>
     61a:	24 e6       	ldi	r18, 0x64	; 100
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	c9 01       	movw	r24, r18
     620:	33 0f       	add	r19, r19
     622:	aa 0b       	sbc	r26, r26
     624:	bb 0b       	sbc	r27, r27
     626:	9c 01       	movw	r18, r24
     628:	ad 01       	movw	r20, r26
     62a:	2c 59       	subi	r18, 0x9C	; 156
     62c:	3f 4f       	sbci	r19, 0xFF	; 255
     62e:	4f 4f       	sbci	r20, 0xFF	; 255
     630:	5f 4f       	sbci	r21, 0xFF	; 255
     632:	c3 01       	movw	r24, r6
     634:	b2 01       	movw	r22, r4
     636:	0e 94 8d 14 	call	0x291a	; 0x291a <__mulsi3>
     63a:	28 ec       	ldi	r18, 0xC8	; 200
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	40 e0       	ldi	r20, 0x00	; 0
     640:	50 e0       	ldi	r21, 0x00	; 0
     642:	0e 94 be 14 	call	0x297c	; 0x297c <__divmodsi4>
     646:	82 0e       	add	r8, r18
     648:	93 1e       	adc	r9, r19
     64a:	a4 1e       	adc	r10, r20
     64c:	b5 1e       	adc	r11, r21
     64e:	c4 01       	movw	r24, r8
     650:	96 01       	movw	r18, r12
     652:	29 5f       	subi	r18, 0xF9	; 249
     654:	3f 4f       	sbci	r19, 0xFF	; 255
     656:	2f 30       	cpi	r18, 0x0F	; 15
     658:	31 05       	cpc	r19, r1
     65a:	08 f4       	brcc	.+2      	; 0x65e <_ZN14Communications13joystickR_msgEP7MessageRh+0x1c4>
     65c:	57 c0       	rjmp	.+174    	; 0x70c <_ZN14Communications13joystickR_msgEP7MessageRh+0x272>
     65e:	27 e0       	ldi	r18, 0x07	; 7
     660:	82 0e       	add	r8, r18
     662:	91 1c       	adc	r9, r1
     664:	3f e0       	ldi	r19, 0x0F	; 15
     666:	83 16       	cp	r8, r19
     668:	91 04       	cpc	r9, r1
     66a:	10 f4       	brcc	.+4      	; 0x670 <_ZN14Communications13joystickR_msgEP7MessageRh+0x1d6>
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	e9 81       	ldd	r30, Y+1	; 0x01
     672:	fa 81       	ldd	r31, Y+2	; 0x02
     674:	ff 23       	and	r31, r31
     676:	6c f4       	brge	.+26     	; 0x692 <_ZN14Communications13joystickR_msgEP7MessageRh+0x1f8>
     678:	a6 01       	movw	r20, r12
     67a:	dd 20       	and	r13, r13
     67c:	24 f4       	brge	.+8      	; 0x686 <_ZN14Communications13joystickR_msgEP7MessageRh+0x1ec>
     67e:	44 27       	eor	r20, r20
     680:	55 27       	eor	r21, r21
     682:	4c 19       	sub	r20, r12
     684:	5d 09       	sbc	r21, r13
     686:	51 95       	neg	r21
     688:	41 95       	neg	r20
     68a:	51 09       	sbc	r21, r1
     68c:	04 c0       	rjmp	.+8      	; 0x696 <_ZN14Communications13joystickR_msgEP7MessageRh+0x1fc>
     68e:	1a 82       	std	Y+2, r1	; 0x02
     690:	19 82       	std	Y+1, r1	; 0x01
     692:	49 81       	ldd	r20, Y+1	; 0x01
     694:	5a 81       	ldd	r21, Y+2	; 0x02
     696:	99 23       	and	r25, r25
     698:	5c f4       	brge	.+22     	; 0x6b0 <_ZN14Communications13joystickR_msgEP7MessageRh+0x216>
     69a:	9c 01       	movw	r18, r24
     69c:	99 23       	and	r25, r25
     69e:	24 f4       	brge	.+8      	; 0x6a8 <_ZN14Communications13joystickR_msgEP7MessageRh+0x20e>
     6a0:	22 27       	eor	r18, r18
     6a2:	33 27       	eor	r19, r19
     6a4:	28 1b       	sub	r18, r24
     6a6:	39 0b       	sbc	r19, r25
     6a8:	88 27       	eor	r24, r24
     6aa:	99 27       	eor	r25, r25
     6ac:	82 1b       	sub	r24, r18
     6ae:	93 0b       	sbc	r25, r19
     6b0:	ed 81       	ldd	r30, Y+5	; 0x05
     6b2:	fe 81       	ldd	r31, Y+6	; 0x06
     6b4:	20 81       	ld	r18, Z
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	f9 01       	movw	r30, r18
     6ba:	ee 0f       	add	r30, r30
     6bc:	ff 1f       	adc	r31, r31
     6be:	2e 0f       	add	r18, r30
     6c0:	3f 1f       	adc	r19, r31
     6c2:	f8 01       	movw	r30, r16
     6c4:	e2 0f       	add	r30, r18
     6c6:	f3 1f       	adc	r31, r19
     6c8:	91 e0       	ldi	r25, 0x01	; 1
     6ca:	90 83       	st	Z, r25
     6cc:	ed 81       	ldd	r30, Y+5	; 0x05
     6ce:	fe 81       	ldd	r31, Y+6	; 0x06
     6d0:	20 81       	ld	r18, Z
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	f9 01       	movw	r30, r18
     6d6:	ee 0f       	add	r30, r30
     6d8:	ff 1f       	adc	r31, r31
     6da:	2e 0f       	add	r18, r30
     6dc:	3f 1f       	adc	r19, r31
     6de:	f8 01       	movw	r30, r16
     6e0:	e2 0f       	add	r30, r18
     6e2:	f3 1f       	adc	r31, r19
     6e4:	41 83       	std	Z+1, r20	; 0x01
     6e6:	ed 81       	ldd	r30, Y+5	; 0x05
     6e8:	fe 81       	ldd	r31, Y+6	; 0x06
     6ea:	20 81       	ld	r18, Z
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	a9 01       	movw	r20, r18
     6f0:	44 0f       	add	r20, r20
     6f2:	55 1f       	adc	r21, r21
     6f4:	24 0f       	add	r18, r20
     6f6:	35 1f       	adc	r19, r21
     6f8:	f8 01       	movw	r30, r16
     6fa:	e2 0f       	add	r30, r18
     6fc:	f3 1f       	adc	r31, r19
     6fe:	82 83       	std	Z+2, r24	; 0x02
     700:	ed 81       	ldd	r30, Y+5	; 0x05
     702:	fe 81       	ldd	r31, Y+6	; 0x06
     704:	80 81       	ld	r24, Z
     706:	8f 5f       	subi	r24, 0xFF	; 255
     708:	80 83       	st	Z, r24
     70a:	0d c0       	rjmp	.+26     	; 0x726 <_ZN14Communications13joystickR_msgEP7MessageRh+0x28c>
     70c:	f7 e0       	ldi	r31, 0x07	; 7
     70e:	8f 0e       	add	r8, r31
     710:	91 1c       	adc	r9, r1
     712:	2f e0       	ldi	r18, 0x0F	; 15
     714:	82 16       	cp	r8, r18
     716:	91 04       	cpc	r9, r1
     718:	08 f0       	brcs	.+2      	; 0x71c <_ZN14Communications13joystickR_msgEP7MessageRh+0x282>
     71a:	b9 cf       	rjmp	.-142    	; 0x68e <_ZN14Communications13joystickR_msgEP7MessageRh+0x1f4>
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	1a 82       	std	Y+2, r1	; 0x02
     722:	19 82       	std	Y+1, r1	; 0x01
     724:	b6 cf       	rjmp	.-148    	; 0x692 <_ZN14Communications13joystickR_msgEP7MessageRh+0x1f8>
     726:	26 96       	adiw	r28, 0x06	; 6
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	f8 94       	cli
     72c:	de bf       	out	0x3e, r29	; 62
     72e:	0f be       	out	0x3f, r0	; 63
     730:	cd bf       	out	0x3d, r28	; 61
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	1f 91       	pop	r17
     738:	0f 91       	pop	r16
     73a:	ff 90       	pop	r15
     73c:	ef 90       	pop	r14
     73e:	df 90       	pop	r13
     740:	cf 90       	pop	r12
     742:	bf 90       	pop	r11
     744:	af 90       	pop	r10
     746:	9f 90       	pop	r9
     748:	8f 90       	pop	r8
     74a:	7f 90       	pop	r7
     74c:	6f 90       	pop	r6
     74e:	5f 90       	pop	r5
     750:	4f 90       	pop	r4
     752:	3f 90       	pop	r3
     754:	2f 90       	pop	r2
     756:	08 95       	ret

00000758 <_ZN14Communications13joystickL_msgEP7MessageRh>:
     758:	8f 92       	push	r8
     75a:	9f 92       	push	r9
     75c:	af 92       	push	r10
     75e:	bf 92       	push	r11
     760:	cf 92       	push	r12
     762:	df 92       	push	r13
     764:	ef 92       	push	r14
     766:	ff 92       	push	r15
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	8b 01       	movw	r16, r22
     772:	ea 01       	movw	r28, r20
     774:	83 e2       	ldi	r24, 0x23	; 35
     776:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN6Memory4readEh>
     77a:	9c 01       	movw	r18, r24
     77c:	ad ec       	ldi	r26, 0xCD	; 205
     77e:	bc ec       	ldi	r27, 0xCC	; 204
     780:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__umulhisi3>
     784:	96 95       	lsr	r25
     786:	87 95       	ror	r24
     788:	96 95       	lsr	r25
     78a:	87 95       	ror	r24
     78c:	7c 01       	movw	r14, r24
     78e:	24 e6       	ldi	r18, 0x64	; 100
     790:	e2 1a       	sub	r14, r18
     792:	f1 08       	sbc	r15, r1
     794:	84 e2       	ldi	r24, 0x24	; 36
     796:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN6Memory4readEh>
     79a:	25 e5       	ldi	r18, 0x55	; 85
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	dc 01       	movw	r26, r24
     7a0:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__usmulhisi3>
     7a4:	28 ee       	ldi	r18, 0xE8	; 232
     7a6:	33 e0       	ldi	r19, 0x03	; 3
     7a8:	40 e0       	ldi	r20, 0x00	; 0
     7aa:	50 e0       	ldi	r21, 0x00	; 0
     7ac:	0e 94 be 14 	call	0x297c	; 0x297c <__divmodsi4>
     7b0:	49 01       	movw	r8, r18
     7b2:	5a 01       	movw	r10, r20
     7b4:	8f e0       	ldi	r24, 0x0F	; 15
     7b6:	88 0e       	add	r8, r24
     7b8:	91 1c       	adc	r9, r1
     7ba:	a1 1c       	adc	r10, r1
     7bc:	b1 1c       	adc	r11, r1
     7be:	c7 01       	movw	r24, r14
     7c0:	2c e9       	ldi	r18, 0x9C	; 156
     7c2:	e2 16       	cp	r14, r18
     7c4:	2f ef       	ldi	r18, 0xFF	; 255
     7c6:	f2 06       	cpc	r15, r18
     7c8:	14 f4       	brge	.+4      	; 0x7ce <_ZN14Communications13joystickL_msgEP7MessageRh+0x76>
     7ca:	8c e9       	ldi	r24, 0x9C	; 156
     7cc:	9f ef       	ldi	r25, 0xFF	; 255
     7ce:	cc 24       	eor	r12, r12
     7d0:	dd 24       	eor	r13, r13
     7d2:	c8 18       	sub	r12, r8
     7d4:	d9 08       	sbc	r13, r9
     7d6:	0d 2c       	mov	r0, r13
     7d8:	00 0c       	add	r0, r0
     7da:	ee 08       	sbc	r14, r14
     7dc:	ff 08       	sbc	r15, r15
     7de:	9c 01       	movw	r18, r24
     7e0:	85 36       	cpi	r24, 0x65	; 101
     7e2:	91 05       	cpc	r25, r1
     7e4:	14 f0       	brlt	.+4      	; 0x7ea <_ZN14Communications13joystickL_msgEP7MessageRh+0x92>
     7e6:	24 e6       	ldi	r18, 0x64	; 100
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	c9 01       	movw	r24, r18
     7ec:	33 0f       	add	r19, r19
     7ee:	aa 0b       	sbc	r26, r26
     7f0:	bb 0b       	sbc	r27, r27
     7f2:	9c 01       	movw	r18, r24
     7f4:	ad 01       	movw	r20, r26
     7f6:	2c 59       	subi	r18, 0x9C	; 156
     7f8:	3f 4f       	sbci	r19, 0xFF	; 255
     7fa:	4f 4f       	sbci	r20, 0xFF	; 255
     7fc:	5f 4f       	sbci	r21, 0xFF	; 255
     7fe:	c4 01       	movw	r24, r8
     800:	99 0c       	add	r9, r9
     802:	aa 0b       	sbc	r26, r26
     804:	bb 0b       	sbc	r27, r27
     806:	bc 01       	movw	r22, r24
     808:	cd 01       	movw	r24, r26
     80a:	6c 19       	sub	r22, r12
     80c:	7d 09       	sbc	r23, r13
     80e:	8e 09       	sbc	r24, r14
     810:	9f 09       	sbc	r25, r15
     812:	0e 94 8d 14 	call	0x291a	; 0x291a <__mulsi3>
     816:	28 ec       	ldi	r18, 0xC8	; 200
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	40 e0       	ldi	r20, 0x00	; 0
     81c:	50 e0       	ldi	r21, 0x00	; 0
     81e:	0e 94 be 14 	call	0x297c	; 0x297c <__divmodsi4>
     822:	c2 0e       	add	r12, r18
     824:	d3 1e       	adc	r13, r19
     826:	e4 1e       	adc	r14, r20
     828:	f5 1e       	adc	r15, r21
     82a:	88 81       	ld	r24, Y
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	fc 01       	movw	r30, r24
     830:	ee 0f       	add	r30, r30
     832:	ff 1f       	adc	r31, r31
     834:	8e 0f       	add	r24, r30
     836:	9f 1f       	adc	r25, r31
     838:	f8 01       	movw	r30, r16
     83a:	e8 0f       	add	r30, r24
     83c:	f9 1f       	adc	r31, r25
     83e:	83 e0       	ldi	r24, 0x03	; 3
     840:	80 83       	st	Z, r24
     842:	88 81       	ld	r24, Y
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	fc 01       	movw	r30, r24
     848:	ee 0f       	add	r30, r30
     84a:	ff 1f       	adc	r31, r31
     84c:	8e 0f       	add	r24, r30
     84e:	9f 1f       	adc	r25, r31
     850:	f8 01       	movw	r30, r16
     852:	e8 0f       	add	r30, r24
     854:	f9 1f       	adc	r31, r25
     856:	c1 82       	std	Z+1, r12	; 0x01
     858:	88 81       	ld	r24, Y
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	9c 01       	movw	r18, r24
     85e:	22 0f       	add	r18, r18
     860:	33 1f       	adc	r19, r19
     862:	82 0f       	add	r24, r18
     864:	93 1f       	adc	r25, r19
     866:	f8 01       	movw	r30, r16
     868:	e8 0f       	add	r30, r24
     86a:	f9 1f       	adc	r31, r25
     86c:	d2 82       	std	Z+2, r13	; 0x02
     86e:	88 81       	ld	r24, Y
     870:	8f 5f       	subi	r24, 0xFF	; 255
     872:	88 83       	st	Y, r24
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	1f 91       	pop	r17
     87a:	0f 91       	pop	r16
     87c:	ff 90       	pop	r15
     87e:	ef 90       	pop	r14
     880:	df 90       	pop	r13
     882:	cf 90       	pop	r12
     884:	bf 90       	pop	r11
     886:	af 90       	pop	r10
     888:	9f 90       	pop	r9
     88a:	8f 90       	pop	r8
     88c:	08 95       	ret

0000088e <_ZN14Communications3crcEPK7Messageh>:
     88e:	ff 92       	push	r15
     890:	0f 93       	push	r16
     892:	1f 93       	push	r17
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	00 d0       	rcall	.+0      	; 0x89a <_ZN14Communications3crcEPK7Messageh+0xc>
     89a:	1f 92       	push	r1
     89c:	cd b7       	in	r28, 0x3d	; 61
     89e:	de b7       	in	r29, 0x3e	; 62
     8a0:	44 23       	and	r20, r20
     8a2:	61 f1       	breq	.+88     	; 0x8fc <_ZN14Communications3crcEPK7Messageh+0x6e>
     8a4:	a6 2f       	mov	r26, r22
     8a6:	b7 2f       	mov	r27, r23
     8a8:	f1 2c       	mov	r15, r1
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	8e 01       	movw	r16, r28
     8ae:	0c 5f       	subi	r16, 0xFC	; 252
     8b0:	1f 4f       	sbci	r17, 0xFF	; 255
     8b2:	7c e8       	ldi	r23, 0x8C	; 140
     8b4:	8c 91       	ld	r24, X
     8b6:	89 83       	std	Y+1, r24	; 0x01
     8b8:	11 96       	adiw	r26, 0x01	; 1
     8ba:	8c 91       	ld	r24, X
     8bc:	11 97       	sbiw	r26, 0x01	; 1
     8be:	8a 83       	std	Y+2, r24	; 0x02
     8c0:	12 96       	adiw	r26, 0x02	; 2
     8c2:	8c 91       	ld	r24, X
     8c4:	12 97       	sbiw	r26, 0x02	; 2
     8c6:	8b 83       	std	Y+3, r24	; 0x03
     8c8:	fe 01       	movw	r30, r28
     8ca:	31 96       	adiw	r30, 0x01	; 1
     8cc:	51 91       	ld	r21, Z+
     8ce:	38 e0       	ldi	r19, 0x08	; 8
     8d0:	62 2f       	mov	r22, r18
     8d2:	65 27       	eor	r22, r21
     8d4:	82 2f       	mov	r24, r18
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	95 95       	asr	r25
     8da:	87 95       	ror	r24
     8dc:	28 2f       	mov	r18, r24
     8de:	60 ff       	sbrs	r22, 0
     8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <_ZN14Communications3crcEPK7Messageh+0x58>
     8e2:	27 2f       	mov	r18, r23
     8e4:	28 27       	eor	r18, r24
     8e6:	56 95       	lsr	r21
     8e8:	31 50       	subi	r19, 0x01	; 1
     8ea:	91 f7       	brne	.-28     	; 0x8d0 <_ZN14Communications3crcEPK7Messageh+0x42>
     8ec:	e0 17       	cp	r30, r16
     8ee:	f1 07       	cpc	r31, r17
     8f0:	69 f7       	brne	.-38     	; 0x8cc <_ZN14Communications3crcEPK7Messageh+0x3e>
     8f2:	f3 94       	inc	r15
     8f4:	13 96       	adiw	r26, 0x03	; 3
     8f6:	4f 11       	cpse	r20, r15
     8f8:	dd cf       	rjmp	.-70     	; 0x8b4 <_ZN14Communications3crcEPK7Messageh+0x26>
     8fa:	01 c0       	rjmp	.+2      	; 0x8fe <_ZN14Communications3crcEPK7Messageh+0x70>
     8fc:	20 e0       	ldi	r18, 0x00	; 0
     8fe:	82 2f       	mov	r24, r18
     900:	0f 90       	pop	r0
     902:	0f 90       	pop	r0
     904:	0f 90       	pop	r0
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	1f 91       	pop	r17
     90c:	0f 91       	pop	r16
     90e:	ff 90       	pop	r15
     910:	08 95       	ret

00000912 <_ZN14Communications4sendEPK7Messageh>:
     912:	df 92       	push	r13
     914:	ef 92       	push	r14
     916:	ff 92       	push	r15
     918:	0f 93       	push	r16
     91a:	1f 93       	push	r17
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
     920:	7b 01       	movw	r14, r22
     922:	14 2f       	mov	r17, r20
     924:	b4 df       	rcall	.-152    	; 0x88e <_ZN14Communications3crcEPK7Messageh>
     926:	d8 2e       	mov	r13, r24
     928:	86 e0       	ldi	r24, 0x06	; 6
     92a:	0e 94 29 12 	call	0x2452	; 0x2452 <_Z15uart1_send_byteh>
     92e:	85 e8       	ldi	r24, 0x85	; 133
     930:	0e 94 29 12 	call	0x2452	; 0x2452 <_Z15uart1_send_byteh>
     934:	84 e0       	ldi	r24, 0x04	; 4
     936:	0e 94 29 12 	call	0x2452	; 0x2452 <_Z15uart1_send_byteh>
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	0e 94 29 12 	call	0x2452	; 0x2452 <_Z15uart1_send_byteh>
     940:	81 2f       	mov	r24, r17
     942:	88 0f       	add	r24, r24
     944:	81 0f       	add	r24, r17
     946:	0e 94 29 12 	call	0x2452	; 0x2452 <_Z15uart1_send_byteh>
     94a:	11 23       	and	r17, r17
     94c:	c1 f0       	breq	.+48     	; 0x97e <_ZN14Communications4sendEPK7Messageh+0x6c>
     94e:	e7 01       	movw	r28, r14
     950:	41 2f       	mov	r20, r17
     952:	50 e0       	ldi	r21, 0x00	; 0
     954:	8a 01       	movw	r16, r20
     956:	00 0f       	add	r16, r16
     958:	11 1f       	adc	r17, r17
     95a:	40 0f       	add	r20, r16
     95c:	51 1f       	adc	r21, r17
     95e:	87 01       	movw	r16, r14
     960:	04 0f       	add	r16, r20
     962:	15 1f       	adc	r17, r21
     964:	88 81       	ld	r24, Y
     966:	0e 94 29 12 	call	0x2452	; 0x2452 <_Z15uart1_send_byteh>
     96a:	89 81       	ldd	r24, Y+1	; 0x01
     96c:	0e 94 29 12 	call	0x2452	; 0x2452 <_Z15uart1_send_byteh>
     970:	8a 81       	ldd	r24, Y+2	; 0x02
     972:	0e 94 29 12 	call	0x2452	; 0x2452 <_Z15uart1_send_byteh>
     976:	23 96       	adiw	r28, 0x03	; 3
     978:	c0 17       	cp	r28, r16
     97a:	d1 07       	cpc	r29, r17
     97c:	99 f7       	brne	.-26     	; 0x964 <_ZN14Communications4sendEPK7Messageh+0x52>
     97e:	8d 2d       	mov	r24, r13
     980:	0e 94 29 12 	call	0x2452	; 0x2452 <_Z15uart1_send_byteh>
     984:	df 91       	pop	r29
     986:	cf 91       	pop	r28
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <_ZN14Communications21handle_manual_commandEv>:
     994:	0f 93       	push	r16
     996:	1f 93       	push	r17
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	cd b7       	in	r28, 0x3d	; 61
     99e:	de b7       	in	r29, 0x3e	; 62
     9a0:	2d 97       	sbiw	r28, 0x0d	; 13
     9a2:	0f b6       	in	r0, 0x3f	; 63
     9a4:	f8 94       	cli
     9a6:	de bf       	out	0x3e, r29	; 62
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	cd bf       	out	0x3d, r28	; 61
     9ac:	8c 01       	movw	r16, r24
     9ae:	1d 86       	std	Y+13, r1	; 0x0d
     9b0:	ae 01       	movw	r20, r28
     9b2:	43 5f       	subi	r20, 0xF3	; 243
     9b4:	5f 4f       	sbci	r21, 0xFF	; 255
     9b6:	be 01       	movw	r22, r28
     9b8:	6f 5f       	subi	r22, 0xFF	; 255
     9ba:	7f 4f       	sbci	r23, 0xFF	; 255
     9bc:	6e dd       	rcall	.-1316   	; 0x49a <_ZN14Communications13joystickR_msgEP7MessageRh>
     9be:	ae 01       	movw	r20, r28
     9c0:	43 5f       	subi	r20, 0xF3	; 243
     9c2:	5f 4f       	sbci	r21, 0xFF	; 255
     9c4:	be 01       	movw	r22, r28
     9c6:	6f 5f       	subi	r22, 0xFF	; 255
     9c8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ca:	c8 01       	movw	r24, r16
     9cc:	c5 de       	rcall	.-630    	; 0x758 <_ZN14Communications13joystickL_msgEP7MessageRh>
     9ce:	ae 01       	movw	r20, r28
     9d0:	43 5f       	subi	r20, 0xF3	; 243
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	be 01       	movw	r22, r28
     9d6:	6f 5f       	subi	r22, 0xFF	; 255
     9d8:	7f 4f       	sbci	r23, 0xFF	; 255
     9da:	c8 01       	movw	r24, r16
     9dc:	c4 dc       	rcall	.-1656   	; 0x366 <_ZN14Communications24get_bucket_motor_commandEP7MessageRh>
     9de:	ae 01       	movw	r20, r28
     9e0:	43 5f       	subi	r20, 0xF3	; 243
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	be 01       	movw	r22, r28
     9e6:	6f 5f       	subi	r22, 0xFF	; 255
     9e8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ea:	c8 01       	movw	r24, r16
     9ec:	19 dd       	rcall	.-1486   	; 0x420 <_ZN14Communications22get_plow_motor_commandEP7MessageRh>
     9ee:	44 e0       	ldi	r20, 0x04	; 4
     9f0:	be 01       	movw	r22, r28
     9f2:	6f 5f       	subi	r22, 0xFF	; 255
     9f4:	7f 4f       	sbci	r23, 0xFF	; 255
     9f6:	c8 01       	movw	r24, r16
     9f8:	8c df       	rcall	.-232    	; 0x912 <_ZN14Communications4sendEPK7Messageh>
     9fa:	2d 96       	adiw	r28, 0x0d	; 13
     9fc:	0f b6       	in	r0, 0x3f	; 63
     9fe:	f8 94       	cli
     a00:	de bf       	out	0x3e, r29	; 62
     a02:	0f be       	out	0x3f, r0	; 63
     a04:	cd bf       	out	0x3d, r28	; 61
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	1f 91       	pop	r17
     a0c:	0f 91       	pop	r16
     a0e:	08 95       	ret

00000a10 <_ZN14Communications5parseEh>:
     a10:	cf 92       	push	r12
     a12:	df 92       	push	r13
     a14:	ef 92       	push	r14
     a16:	ff 92       	push	r15
     a18:	0f 93       	push	r16
     a1a:	1f 93       	push	r17
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	00 d0       	rcall	.+0      	; 0xa22 <_ZN14Communications5parseEh+0x12>
     a22:	1f 92       	push	r1
     a24:	cd b7       	in	r28, 0x3d	; 61
     a26:	de b7       	in	r29, 0x3e	; 62
     a28:	6c 01       	movw	r12, r24
     a2a:	7c 01       	movw	r14, r24
     a2c:	8b e9       	ldi	r24, 0x9B	; 155
     a2e:	e8 0e       	add	r14, r24
     a30:	f1 1c       	adc	r15, r1
     a32:	c7 01       	movw	r24, r14
     a34:	22 d2       	rcall	.+1092   	; 0xe7a <_ZN18FastTransferParser4pushEh>
     a36:	c7 01       	movw	r24, r14
     a38:	80 d2       	rcall	.+1280   	; 0xf3a <_ZNK18FastTransferParser14valid_messagesEv>
     a3a:	88 23       	and	r24, r24
     a3c:	d1 f0       	breq	.+52     	; 0xa72 <_ZN14Communications5parseEh+0x62>
     a3e:	c7 01       	movw	r24, r14
     a40:	93 d2       	rcall	.+1318   	; 0xf68 <_ZNK18FastTransferParser12num_messagesEv>
     a42:	08 2f       	mov	r16, r24
     a44:	88 23       	and	r24, r24
     a46:	91 f0       	breq	.+36     	; 0xa6c <_ZN14Communications5parseEh+0x5c>
     a48:	10 e0       	ldi	r17, 0x00	; 0
     a4a:	82 e0       	ldi	r24, 0x02	; 2
     a4c:	c8 0e       	add	r12, r24
     a4e:	d1 1c       	adc	r13, r1
     a50:	61 2f       	mov	r22, r17
     a52:	c7 01       	movw	r24, r14
     a54:	2b d2       	rcall	.+1110   	; 0xeac <_ZNK18FastTransferParser11get_messageEh>
     a56:	69 83       	std	Y+1, r22	; 0x01
     a58:	7a 83       	std	Y+2, r23	; 0x02
     a5a:	8b 83       	std	Y+3, r24	; 0x03
     a5c:	be 01       	movw	r22, r28
     a5e:	6f 5f       	subi	r22, 0xFF	; 255
     a60:	7f 4f       	sbci	r23, 0xFF	; 255
     a62:	c6 01       	movw	r24, r12
     a64:	b9 d1       	rcall	.+882    	; 0xdd8 <_ZN12MessageQueue4pushERK7Message>
     a66:	1f 5f       	subi	r17, 0xFF	; 255
     a68:	01 13       	cpse	r16, r17
     a6a:	f2 cf       	rjmp	.-28     	; 0xa50 <_ZN14Communications5parseEh+0x40>
     a6c:	c7 01       	movw	r24, r14
     a6e:	1b d2       	rcall	.+1078   	; 0xea6 <_ZN18FastTransferParser5clearEv>
     a70:	06 c0       	rjmp	.+12     	; 0xa7e <_ZN14Communications5parseEh+0x6e>
     a72:	c7 01       	movw	r24, r14
     a74:	10 d2       	rcall	.+1056   	; 0xe96 <_ZNK18FastTransferParser7is_fullEv>
     a76:	88 23       	and	r24, r24
     a78:	11 f0       	breq	.+4      	; 0xa7e <_ZN14Communications5parseEh+0x6e>
     a7a:	c7 01       	movw	r24, r14
     a7c:	14 d2       	rcall	.+1064   	; 0xea6 <_ZN18FastTransferParser5clearEv>
     a7e:	0f 90       	pop	r0
     a80:	0f 90       	pop	r0
     a82:	0f 90       	pop	r0
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	1f 91       	pop	r17
     a8a:	0f 91       	pop	r16
     a8c:	ff 90       	pop	r15
     a8e:	ef 90       	pop	r14
     a90:	df 90       	pop	r13
     a92:	cf 90       	pop	r12
     a94:	08 95       	ret

00000a96 <_ZN14Communications4readEv>:
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
     a9a:	ec 01       	movw	r28, r24
     a9c:	0e 94 0c 12 	call	0x2418	; 0x2418 <_Z15uart1_read_bytev>
     aa0:	9c 01       	movw	r18, r24
     aa2:	22 27       	eor	r18, r18
     aa4:	23 2b       	or	r18, r19
     aa6:	49 f4       	brne	.+18     	; 0xaba <_ZN14Communications4readEv+0x24>
     aa8:	68 2f       	mov	r22, r24
     aaa:	ce 01       	movw	r24, r28
     aac:	b1 df       	rcall	.-158    	; 0xa10 <_ZN14Communications5parseEh>
     aae:	0e 94 0c 12 	call	0x2418	; 0x2418 <_Z15uart1_read_bytev>
     ab2:	9c 01       	movw	r18, r24
     ab4:	22 27       	eor	r18, r18
     ab6:	23 2b       	or	r18, r19
     ab8:	b9 f3       	breq	.-18     	; 0xaa8 <_ZN14Communications4readEv+0x12>
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	08 95       	ret

00000ac0 <_ZN14Communications7receiveEv>:
     ac0:	9f 92       	push	r9
     ac2:	af 92       	push	r10
     ac4:	bf 92       	push	r11
     ac6:	cf 92       	push	r12
     ac8:	df 92       	push	r13
     aca:	ef 92       	push	r14
     acc:	ff 92       	push	r15
     ace:	0f 93       	push	r16
     ad0:	1f 93       	push	r17
     ad2:	cf 93       	push	r28
     ad4:	df 93       	push	r29
     ad6:	7c 01       	movw	r14, r24
     ad8:	de df       	rcall	.-68     	; 0xa96 <_ZN14Communications4readEv>
     ada:	82 e0       	ldi	r24, 0x02	; 2
     adc:	e8 0e       	add	r14, r24
     ade:	f1 1c       	adc	r15, r1
     ae0:	cc 24       	eor	r12, r12
     ae2:	c3 94       	inc	r12
     ae4:	d1 2c       	mov	r13, r1
     ae6:	c7 01       	movw	r24, r14
     ae8:	c2 d1       	rcall	.+900    	; 0xe6e <_ZNK12MessageQueue5countEv>
     aea:	88 23       	and	r24, r24
     aec:	e9 f1       	breq	.+122    	; 0xb68 <_ZN14Communications7receiveEv+0xa8>
     aee:	c7 01       	movw	r24, r14
     af0:	9e d1       	rcall	.+828    	; 0xe2e <_ZN12MessageQueue3popEv>
     af2:	16 2f       	mov	r17, r22
     af4:	97 2e       	mov	r9, r23
     af6:	c8 2f       	mov	r28, r24
     af8:	88 e0       	ldi	r24, 0x08	; 8
     afa:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN6Memory4readEh>
     afe:	5c 01       	movw	r10, r24
     b00:	81 2f       	mov	r24, r17
     b02:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <_ZN6Memory13valid_addressEh>
     b06:	88 23       	and	r24, r24
     b08:	31 f1       	breq	.+76     	; 0xb56 <_ZN14Communications7receiveEv+0x96>
     b0a:	d0 e0       	ldi	r29, 0x00	; 0
     b0c:	dc 2f       	mov	r29, r28
     b0e:	cc 27       	eor	r28, r28
     b10:	c9 0d       	add	r28, r9
     b12:	d1 1d       	adc	r29, r1
     b14:	be 01       	movw	r22, r28
     b16:	81 2f       	mov	r24, r17
     b18:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <_ZN6Memory5writeEhj>
     b1c:	18 30       	cpi	r17, 0x08	; 8
     b1e:	d9 f4       	brne	.+54     	; 0xb56 <_ZN14Communications7receiveEv+0x96>
     b20:	ab 28       	or	r10, r11
     b22:	c9 f0       	breq	.+50     	; 0xb56 <_ZN14Communications7receiveEv+0x96>
     b24:	10 e4       	ldi	r17, 0x40	; 64
     b26:	a1 2c       	mov	r10, r1
     b28:	b1 2c       	mov	r11, r1
     b2a:	96 01       	movw	r18, r12
     b2c:	0a 2c       	mov	r0, r10
     b2e:	02 c0       	rjmp	.+4      	; 0xb34 <_ZN14Communications7receiveEv+0x74>
     b30:	22 0f       	add	r18, r18
     b32:	33 1f       	adc	r19, r19
     b34:	0a 94       	dec	r0
     b36:	e2 f7       	brpl	.-8      	; 0xb30 <_ZN14Communications7receiveEv+0x70>
     b38:	2c 23       	and	r18, r28
     b3a:	3d 23       	and	r19, r29
     b3c:	23 2b       	or	r18, r19
     b3e:	29 f4       	brne	.+10     	; 0xb4a <_ZN14Communications7receiveEv+0x8a>
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	81 2f       	mov	r24, r17
     b46:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <_ZN6Memory5writeEhj>
     b4a:	8f ef       	ldi	r24, 0xFF	; 255
     b4c:	a8 1a       	sub	r10, r24
     b4e:	b8 0a       	sbc	r11, r24
     b50:	1f 5f       	subi	r17, 0xFF	; 255
     b52:	10 35       	cpi	r17, 0x50	; 80
     b54:	51 f7       	brne	.-44     	; 0xb2a <_ZN14Communications7receiveEv+0x6a>
     b56:	81 e4       	ldi	r24, 0x41	; 65
     b58:	92 e0       	ldi	r25, 0x02	; 2
     b5a:	0e 94 76 0f 	call	0x1eec	; 0x1eec <_ZN6Clocks5resetEv>
     b5e:	b6 01       	movw	r22, r12
     b60:	84 e0       	ldi	r24, 0x04	; 4
     b62:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <_ZN6Memory5writeEhj>
     b66:	bf cf       	rjmp	.-130    	; 0xae6 <_ZN14Communications7receiveEv+0x26>
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	1f 91       	pop	r17
     b6e:	0f 91       	pop	r16
     b70:	ff 90       	pop	r15
     b72:	ef 90       	pop	r14
     b74:	df 90       	pop	r13
     b76:	cf 90       	pop	r12
     b78:	bf 90       	pop	r11
     b7a:	af 90       	pop	r10
     b7c:	9f 90       	pop	r9
     b7e:	08 95       	ret

00000b80 <_ZN14Communications21handle_emergency_stopEv>:
     b80:	ef 92       	push	r14
     b82:	ff 92       	push	r15
     b84:	0f 93       	push	r16
     b86:	1f 93       	push	r17
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	65 97       	sbiw	r28, 0x15	; 21
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	f8 94       	cli
     b96:	de bf       	out	0x3e, r29	; 62
     b98:	0f be       	out	0x3f, r0	; 63
     b9a:	cd bf       	out	0x3d, r28	; 61
     b9c:	7c 01       	movw	r14, r24
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	89 83       	std	Y+1, r24	; 0x01
     ba2:	1a 82       	std	Y+2, r1	; 0x02
     ba4:	1b 82       	std	Y+3, r1	; 0x03
     ba6:	83 e0       	ldi	r24, 0x03	; 3
     ba8:	8c 83       	std	Y+4, r24	; 0x04
     baa:	1d 82       	std	Y+5, r1	; 0x05
     bac:	1e 82       	std	Y+6, r1	; 0x06
     bae:	84 e0       	ldi	r24, 0x04	; 4
     bb0:	8f 83       	std	Y+7, r24	; 0x07
     bb2:	18 86       	std	Y+8, r1	; 0x08
     bb4:	19 86       	std	Y+9, r1	; 0x09
     bb6:	85 e0       	ldi	r24, 0x05	; 5
     bb8:	8a 87       	std	Y+10, r24	; 0x0a
     bba:	1b 86       	std	Y+11, r1	; 0x0b
     bbc:	1c 86       	std	Y+12, r1	; 0x0c
     bbe:	88 e0       	ldi	r24, 0x08	; 8
     bc0:	8d 87       	std	Y+13, r24	; 0x0d
     bc2:	1e 86       	std	Y+14, r1	; 0x0e
     bc4:	1f 86       	std	Y+15, r1	; 0x0f
     bc6:	89 e0       	ldi	r24, 0x09	; 9
     bc8:	88 8b       	std	Y+16, r24	; 0x10
     bca:	19 8a       	std	Y+17, r1	; 0x11
     bcc:	1a 8a       	std	Y+18, r1	; 0x12
     bce:	10 e4       	ldi	r17, 0x40	; 64
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	81 2f       	mov	r24, r17
     bd6:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <_ZN6Memory5writeEhj>
     bda:	1f 5f       	subi	r17, 0xFF	; 255
     bdc:	10 35       	cpi	r17, 0x50	; 80
     bde:	c1 f7       	brne	.-16     	; 0xbd0 <_ZN14Communications21handle_emergency_stopEv+0x50>
     be0:	87 01       	movw	r16, r14
     be2:	02 53       	subi	r16, 0x32	; 50
     be4:	1f 4f       	sbci	r17, 0xFF	; 255
     be6:	47 e0       	ldi	r20, 0x07	; 7
     be8:	be 01       	movw	r22, r28
     bea:	6f 5f       	subi	r22, 0xFF	; 255
     bec:	7f 4f       	sbci	r23, 0xFF	; 255
     bee:	c7 01       	movw	r24, r14
     bf0:	90 de       	rcall	.-736    	; 0x912 <_ZN14Communications4sendEPK7Messageh>
     bf2:	c7 01       	movw	r24, r14
     bf4:	65 df       	rcall	.-310    	; 0xac0 <_ZN14Communications7receiveEv>
     bf6:	88 e0       	ldi	r24, 0x08	; 8
     bf8:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN6Memory4readEh>
     bfc:	89 2b       	or	r24, r25
     bfe:	29 f0       	breq	.+10     	; 0xc0a <_ZN14Communications21handle_emergency_stopEv+0x8a>
     c00:	c8 01       	movw	r24, r16
     c02:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <_ZN6Clocks6isDoneEv>
     c06:	88 23       	and	r24, r24
     c08:	71 f3       	breq	.-36     	; 0xbe6 <_ZN14Communications21handle_emergency_stopEv+0x66>
     c0a:	65 96       	adiw	r28, 0x15	; 21
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	f8 94       	cli
     c10:	de bf       	out	0x3e, r29	; 62
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	cd bf       	out	0x3d, r28	; 61
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	1f 91       	pop	r17
     c1c:	0f 91       	pop	r16
     c1e:	ff 90       	pop	r15
     c20:	ef 90       	pop	r14
     c22:	08 95       	ret

00000c24 <_ZN14Communications20handle_macro_requestEj>:
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	00 d0       	rcall	.+0      	; 0xc2e <_ZN14Communications20handle_macro_requestEj+0xa>
     c2e:	00 d0       	rcall	.+0      	; 0xc30 <_ZN14Communications20handle_macro_requestEj+0xc>
     c30:	00 d0       	rcall	.+0      	; 0xc32 <_ZN14Communications20handle_macro_requestEj+0xe>
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62
     c36:	8c 01       	movw	r16, r24
     c38:	88 e0       	ldi	r24, 0x08	; 8
     c3a:	89 83       	std	Y+1, r24	; 0x01
     c3c:	6a 83       	std	Y+2, r22	; 0x02
     c3e:	7b 83       	std	Y+3, r23	; 0x03
     c40:	72 ff       	sbrs	r23, 2
     c42:	02 c0       	rjmp	.+4      	; 0xc48 <_ZN14Communications20handle_macro_requestEj+0x24>
     c44:	84 e6       	ldi	r24, 0x64	; 100
     c46:	01 c0       	rjmp	.+2      	; 0xc4a <_ZN14Communications20handle_macro_requestEj+0x26>
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	70 fd       	sbrc	r23, 0
     c4c:	8a e5       	ldi	r24, 0x5A	; 90
     c4e:	99 e0       	ldi	r25, 0x09	; 9
     c50:	9c 83       	std	Y+4, r25	; 0x04
     c52:	8d 83       	std	Y+5, r24	; 0x05
     c54:	1e 82       	std	Y+6, r1	; 0x06
     c56:	c8 01       	movw	r24, r16
     c58:	82 53       	subi	r24, 0x32	; 50
     c5a:	9f 4f       	sbci	r25, 0xFF	; 255
     c5c:	0e 94 76 0f 	call	0x1eec	; 0x1eec <_ZN6Clocks5resetEv>
     c60:	42 e0       	ldi	r20, 0x02	; 2
     c62:	be 01       	movw	r22, r28
     c64:	6f 5f       	subi	r22, 0xFF	; 255
     c66:	7f 4f       	sbci	r23, 0xFF	; 255
     c68:	c8 01       	movw	r24, r16
     c6a:	53 de       	rcall	.-858    	; 0x912 <_ZN14Communications4sendEPK7Messageh>
     c6c:	c8 01       	movw	r24, r16
     c6e:	28 df       	rcall	.-432    	; 0xac0 <_ZN14Communications7receiveEv>
     c70:	26 96       	adiw	r28, 0x06	; 6
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	08 95       	ret

00000c86 <_ZN14Communications8transmitEv>:
     c86:	af 92       	push	r10
     c88:	bf 92       	push	r11
     c8a:	cf 92       	push	r12
     c8c:	df 92       	push	r13
     c8e:	ef 92       	push	r14
     c90:	ff 92       	push	r15
     c92:	0f 93       	push	r16
     c94:	1f 93       	push	r17
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	00 d0       	rcall	.+0      	; 0xc9c <_ZN14Communications8transmitEv+0x16>
     c9c:	1f 92       	push	r1
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
     ca2:	8c 01       	movw	r16, r24
     ca4:	0d df       	rcall	.-486    	; 0xac0 <_ZN14Communications7receiveEv>
     ca6:	c8 01       	movw	r24, r16
     ca8:	2a db       	rcall	.-2476   	; 0x2fe <_ZN14Communications25is_emergency_stop_pressedEv>
     caa:	88 23       	and	r24, r24
     cac:	41 f0       	breq	.+16     	; 0xcbe <_ZN14Communications8transmitEv+0x38>
     cae:	61 e0       	ldi	r22, 0x01	; 1
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	89 e3       	ldi	r24, 0x39	; 57
     cb4:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <_ZN6Memory5writeEhj>
     cb8:	c8 01       	movw	r24, r16
     cba:	62 df       	rcall	.-316    	; 0xb80 <_ZN14Communications21handle_emergency_stopEv>
     cbc:	61 c0       	rjmp	.+194    	; 0xd80 <_ZN14Communications8transmitEv+0xfa>
     cbe:	88 e0       	ldi	r24, 0x08	; 8
     cc0:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN6Memory4readEh>
     cc4:	89 2b       	or	r24, r25
     cc6:	69 f4       	brne	.+26     	; 0xce2 <_ZN14Communications8transmitEv+0x5c>
     cc8:	60 e0       	ldi	r22, 0x00	; 0
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	89 e3       	ldi	r24, 0x39	; 57
     cce:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <_ZN6Memory5writeEhj>
     cd2:	89 e2       	ldi	r24, 0x29	; 41
     cd4:	92 e0       	ldi	r25, 0x02	; 2
     cd6:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <_ZN6Clocks6isDoneEv>
     cda:	88 23       	and	r24, r24
     cdc:	11 f0       	breq	.+4      	; 0xce2 <_ZN14Communications8transmitEv+0x5c>
     cde:	c8 01       	movw	r24, r16
     ce0:	59 de       	rcall	.-846    	; 0x994 <_ZN14Communications21handle_manual_commandEv>
     ce2:	89 e3       	ldi	r24, 0x39	; 57
     ce4:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN6Memory4readEh>
     ce8:	01 97       	sbiw	r24, 0x01	; 1
     cea:	11 f4       	brne	.+4      	; 0xcf0 <_ZN14Communications8transmitEv+0x6a>
     cec:	c8 01       	movw	r24, r16
     cee:	48 df       	rcall	.-368    	; 0xb80 <_ZN14Communications21handle_emergency_stopEv>
     cf0:	c8 01       	movw	r24, r16
     cf2:	0e db       	rcall	.-2532   	; 0x310 <_ZN14Communications19get_requested_macroEv>
     cf4:	7c 01       	movw	r14, r24
     cf6:	89 e5       	ldi	r24, 0x59	; 89
     cf8:	92 e0       	ldi	r25, 0x02	; 2
     cfa:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <_ZN6Clocks6isDoneEv>
     cfe:	88 23       	and	r24, r24
     d00:	09 f4       	brne	.+2      	; 0xd04 <_ZN14Communications8transmitEv+0x7e>
     d02:	3e c0       	rjmp	.+124    	; 0xd80 <_ZN14Communications8transmitEv+0xfa>
     d04:	67 01       	movw	r12, r14
     d06:	e1 14       	cp	r14, r1
     d08:	f1 04       	cpc	r15, r1
     d0a:	a9 f1       	breq	.+106    	; 0xd76 <_ZN14Communications8transmitEv+0xf0>
     d0c:	89 e3       	ldi	r24, 0x39	; 57
     d0e:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN6Memory4readEh>
     d12:	5c 01       	movw	r10, r24
     d14:	88 e0       	ldi	r24, 0x08	; 8
     d16:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN6Memory4readEh>
     d1a:	21 e0       	ldi	r18, 0x01	; 1
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	ab 28       	or	r10, r11
     d20:	11 f0       	breq	.+4      	; 0xd26 <_ZN14Communications8transmitEv+0xa0>
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	82 2b       	or	r24, r18
     d28:	93 2b       	or	r25, r19
     d2a:	89 2b       	or	r24, r25
     d2c:	49 f1       	breq	.+82     	; 0xd80 <_ZN14Communications8transmitEv+0xfa>
     d2e:	88 e0       	ldi	r24, 0x08	; 8
     d30:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN6Memory4readEh>
     d34:	8e 21       	and	r24, r14
     d36:	9f 21       	and	r25, r15
     d38:	89 2b       	or	r24, r25
     d3a:	41 f4       	brne	.+16     	; 0xd4c <_ZN14Communications8transmitEv+0xc6>
     d3c:	cd 28       	or	r12, r13
     d3e:	31 f0       	breq	.+12     	; 0xd4c <_ZN14Communications8transmitEv+0xc6>
     d40:	c8 01       	movw	r24, r16
     d42:	e6 da       	rcall	.-2612   	; 0x310 <_ZN14Communications19get_requested_macroEv>
     d44:	bc 01       	movw	r22, r24
     d46:	c8 01       	movw	r24, r16
     d48:	6d df       	rcall	.-294    	; 0xc24 <_ZN14Communications20handle_macro_requestEj>
     d4a:	1a c0       	rjmp	.+52     	; 0xd80 <_ZN14Communications8transmitEv+0xfa>
     d4c:	19 82       	std	Y+1, r1	; 0x01
     d4e:	1a 82       	std	Y+2, r1	; 0x02
     d50:	1b 82       	std	Y+3, r1	; 0x03
     d52:	c8 01       	movw	r24, r16
     d54:	82 53       	subi	r24, 0x32	; 50
     d56:	9f 4f       	sbci	r25, 0xFF	; 255
     d58:	0e 94 76 0f 	call	0x1eec	; 0x1eec <_ZN6Clocks5resetEv>
     d5c:	41 e0       	ldi	r20, 0x01	; 1
     d5e:	be 01       	movw	r22, r28
     d60:	6f 5f       	subi	r22, 0xFF	; 255
     d62:	7f 4f       	sbci	r23, 0xFF	; 255
     d64:	c8 01       	movw	r24, r16
     d66:	d5 dd       	rcall	.-1110   	; 0x912 <_ZN14Communications4sendEPK7Messageh>
     d68:	c8 01       	movw	r24, r16
     d6a:	aa de       	rcall	.-684    	; 0xac0 <_ZN14Communications7receiveEv>
     d6c:	09 c0       	rjmp	.+18     	; 0xd80 <_ZN14Communications8transmitEv+0xfa>
     d6e:	88 e0       	ldi	r24, 0x08	; 8
     d70:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN6Memory4readEh>
     d74:	eb cf       	rjmp	.-42     	; 0xd4c <_ZN14Communications8transmitEv+0xc6>
     d76:	88 e0       	ldi	r24, 0x08	; 8
     d78:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN6Memory4readEh>
     d7c:	89 2b       	or	r24, r25
     d7e:	b9 f7       	brne	.-18     	; 0xd6e <_ZN14Communications8transmitEv+0xe8>
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	df 91       	pop	r29
     d88:	cf 91       	pop	r28
     d8a:	1f 91       	pop	r17
     d8c:	0f 91       	pop	r16
     d8e:	ff 90       	pop	r15
     d90:	ef 90       	pop	r14
     d92:	df 90       	pop	r13
     d94:	cf 90       	pop	r12
     d96:	bf 90       	pop	r11
     d98:	af 90       	pop	r10
     d9a:	08 95       	ret

00000d9c <_GLOBAL__sub_I_MACRO_RE_SEND_TIMER>:
#define when break;case
#define otherwise break;default

const UART_MODULE uart = UART_1;

Clocks MACRO_RE_SEND_TIMER, ROBOT_PING_TIMER;
     d9c:	89 e5       	ldi	r24, 0x59	; 89
     d9e:	92 e0       	ldi	r25, 0x02	; 2
     da0:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <_ZN6ClocksC1Ev>
     da4:	8d e4       	ldi	r24, 0x4D	; 77
     da6:	92 e0       	ldi	r25, 0x02	; 2
     da8:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <_ZN6ClocksC1Ev>
Clocks ROBOT_CONNECTED_TIMEOUT, CONNECTED_TIME;
     dac:	81 e4       	ldi	r24, 0x41	; 65
     dae:	92 e0       	ldi	r25, 0x02	; 2
     db0:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <_ZN6ClocksC1Ev>
     db4:	85 e3       	ldi	r24, 0x35	; 53
     db6:	92 e0       	ldi	r25, 0x02	; 2
     db8:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <_ZN6ClocksC1Ev>
		memory->write(CONNECTED, false);
	}
}

// Talking to the Robot
static Clocks TransmitPeriodTimer(50);
     dbc:	42 e3       	ldi	r20, 0x32	; 50
     dbe:	50 e0       	ldi	r21, 0x00	; 0
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	89 e2       	ldi	r24, 0x29	; 41
     dc6:	92 e0       	ldi	r25, 0x02	; 2
     dc8:	0c 94 a1 0f 	jmp	0x1f42	; 0x1f42 <_ZN6ClocksC1El>
     dcc:	08 95       	ret

00000dce <_ZN12MessageQueueC1Ev>:
     dce:	fc 01       	movw	r30, r24
     dd0:	10 82       	st	Z, r1
     dd2:	11 82       	std	Z+1, r1	; 0x01
     dd4:	12 82       	std	Z+2, r1	; 0x02
     dd6:	08 95       	ret

00000dd8 <_ZN12MessageQueue4pushERK7Message>:
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
     ddc:	dc 01       	movw	r26, r24
     dde:	11 96       	adiw	r26, 0x01	; 1
     de0:	2c 91       	ld	r18, X
     de2:	11 97       	sbiw	r26, 0x01	; 1
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	82 0f       	add	r24, r18
     de8:	11 96       	adiw	r26, 0x01	; 1
     dea:	8c 93       	st	X, r24
     dec:	11 97       	sbiw	r26, 0x01	; 1
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	2f 5f       	subi	r18, 0xFF	; 255
     df2:	3f 4f       	sbci	r19, 0xFF	; 255
     df4:	f9 01       	movw	r30, r18
     df6:	ee 0f       	add	r30, r30
     df8:	ff 1f       	adc	r31, r31
     dfa:	2e 0f       	add	r18, r30
     dfc:	3f 1f       	adc	r19, r31
     dfe:	fd 01       	movw	r30, r26
     e00:	e2 0f       	add	r30, r18
     e02:	f3 1f       	adc	r31, r19
     e04:	eb 01       	movw	r28, r22
     e06:	28 81       	ld	r18, Y
     e08:	39 81       	ldd	r19, Y+1	; 0x01
     e0a:	4a 81       	ldd	r20, Y+2	; 0x02
     e0c:	20 83       	st	Z, r18
     e0e:	31 83       	std	Z+1, r19	; 0x01
     e10:	42 83       	std	Z+2, r20	; 0x02
     e12:	82 33       	cpi	r24, 0x32	; 50
     e14:	18 f0       	brcs	.+6      	; 0xe1c <_ZN12MessageQueue4pushERK7Message+0x44>
     e16:	11 96       	adiw	r26, 0x01	; 1
     e18:	1c 92       	st	X, r1
     e1a:	11 97       	sbiw	r26, 0x01	; 1
     e1c:	12 96       	adiw	r26, 0x02	; 2
     e1e:	8c 91       	ld	r24, X
     e20:	12 97       	sbiw	r26, 0x02	; 2
     e22:	8f 5f       	subi	r24, 0xFF	; 255
     e24:	12 96       	adiw	r26, 0x02	; 2
     e26:	8c 93       	st	X, r24
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	08 95       	ret

00000e2e <_ZN12MessageQueue3popEv>:
     e2e:	dc 01       	movw	r26, r24
     e30:	9c 91       	ld	r25, X
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	89 0f       	add	r24, r25
     e36:	29 2f       	mov	r18, r25
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	82 33       	cpi	r24, 0x32	; 50
     e3c:	10 f4       	brcc	.+4      	; 0xe42 <_ZN12MessageQueue3popEv+0x14>
     e3e:	8c 93       	st	X, r24
     e40:	01 c0       	rjmp	.+2      	; 0xe44 <_ZN12MessageQueue3popEv+0x16>
     e42:	1c 92       	st	X, r1
     e44:	12 96       	adiw	r26, 0x02	; 2
     e46:	8c 91       	ld	r24, X
     e48:	12 97       	sbiw	r26, 0x02	; 2
     e4a:	81 50       	subi	r24, 0x01	; 1
     e4c:	12 96       	adiw	r26, 0x02	; 2
     e4e:	8c 93       	st	X, r24
     e50:	12 97       	sbiw	r26, 0x02	; 2
     e52:	2f 5f       	subi	r18, 0xFF	; 255
     e54:	3f 4f       	sbci	r19, 0xFF	; 255
     e56:	f9 01       	movw	r30, r18
     e58:	ee 0f       	add	r30, r30
     e5a:	ff 1f       	adc	r31, r31
     e5c:	2e 0f       	add	r18, r30
     e5e:	3f 1f       	adc	r19, r31
     e60:	fd 01       	movw	r30, r26
     e62:	e2 0f       	add	r30, r18
     e64:	f3 1f       	adc	r31, r19
     e66:	60 81       	ld	r22, Z
     e68:	71 81       	ldd	r23, Z+1	; 0x01
     e6a:	82 81       	ldd	r24, Z+2	; 0x02
     e6c:	08 95       	ret

00000e6e <_ZNK12MessageQueue5countEv>:
     e6e:	fc 01       	movw	r30, r24
     e70:	82 81       	ldd	r24, Z+2	; 0x02
     e72:	08 95       	ret

00000e74 <_ZN18FastTransferParserC1Ev>:
     e74:	fc 01       	movw	r30, r24
     e76:	12 aa       	std	Z+50, r1	; 0x32
     e78:	08 95       	ret

00000e7a <_ZN18FastTransferParser4pushEh>:
     e7a:	fc 01       	movw	r30, r24
     e7c:	22 a9       	ldd	r18, Z+50	; 0x32
     e7e:	21 11       	cpse	r18, r1
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <_ZN18FastTransferParser4pushEh+0xc>
     e82:	66 30       	cpi	r22, 0x06	; 6
     e84:	39 f4       	brne	.+14     	; 0xe94 <_ZN18FastTransferParser4pushEh+0x1a>
     e86:	31 e0       	ldi	r19, 0x01	; 1
     e88:	32 0f       	add	r19, r18
     e8a:	fc 01       	movw	r30, r24
     e8c:	32 ab       	std	Z+50, r19	; 0x32
     e8e:	e2 0f       	add	r30, r18
     e90:	f1 1d       	adc	r31, r1
     e92:	60 83       	st	Z, r22
     e94:	08 95       	ret

00000e96 <_ZNK18FastTransferParser7is_fullEv>:
     e96:	21 e0       	ldi	r18, 0x01	; 1
     e98:	fc 01       	movw	r30, r24
     e9a:	82 a9       	ldd	r24, Z+50	; 0x32
     e9c:	82 33       	cpi	r24, 0x32	; 50
     e9e:	08 f4       	brcc	.+2      	; 0xea2 <_ZNK18FastTransferParser7is_fullEv+0xc>
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	82 2f       	mov	r24, r18
     ea4:	08 95       	ret

00000ea6 <_ZN18FastTransferParser5clearEv>:
     ea6:	fc 01       	movw	r30, r24
     ea8:	12 aa       	std	Z+50, r1	; 0x32
     eaa:	08 95       	ret

00000eac <_ZNK18FastTransferParser11get_messageEh>:
     eac:	26 2f       	mov	r18, r22
     eae:	22 0f       	add	r18, r18
     eb0:	62 0f       	add	r22, r18
     eb2:	6b 5f       	subi	r22, 0xFB	; 251
     eb4:	fc 01       	movw	r30, r24
     eb6:	e6 0f       	add	r30, r22
     eb8:	f1 1d       	adc	r31, r1
     eba:	71 81       	ldd	r23, Z+1	; 0x01
     ebc:	60 81       	ld	r22, Z
     ebe:	82 81       	ldd	r24, Z+2	; 0x02
     ec0:	08 95       	ret

00000ec2 <_ZNK18FastTransferParser10verify_crcEv>:
     ec2:	ef 92       	push	r14
     ec4:	ff 92       	push	r15
     ec6:	0f 93       	push	r16
     ec8:	1f 93       	push	r17
     eca:	cf 93       	push	r28
     ecc:	df 93       	push	r29
     ece:	7c 01       	movw	r14, r24
     ed0:	fc 01       	movw	r30, r24
     ed2:	c2 a9       	ldd	r28, Z+50	; 0x32
     ed4:	0c 2f       	mov	r16, r28
     ed6:	10 e0       	ldi	r17, 0x00	; 0
     ed8:	01 50       	subi	r16, 0x01	; 1
     eda:	11 09       	sbc	r17, r1
     edc:	06 30       	cpi	r16, 0x06	; 6
     ede:	11 05       	cpc	r17, r1
     ee0:	ec f0       	brlt	.+58     	; 0xf1c <_ZNK18FastTransferParser10verify_crcEv+0x5a>
     ee2:	dc 01       	movw	r26, r24
     ee4:	15 96       	adiw	r26, 0x05	; 5
     ee6:	e8 01       	movw	r28, r16
     ee8:	c8 0f       	add	r28, r24
     eea:	d9 1f       	adc	r29, r25
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	ec e8       	ldi	r30, 0x8C	; 140
     ef0:	6d 91       	ld	r22, X+
     ef2:	48 e0       	ldi	r20, 0x08	; 8
     ef4:	50 e0       	ldi	r21, 0x00	; 0
     ef6:	79 2f       	mov	r23, r25
     ef8:	76 27       	eor	r23, r22
     efa:	29 2f       	mov	r18, r25
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	35 95       	asr	r19
     f00:	27 95       	ror	r18
     f02:	92 2f       	mov	r25, r18
     f04:	70 ff       	sbrs	r23, 0
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <_ZNK18FastTransferParser10verify_crcEv+0x4a>
     f08:	9e 2f       	mov	r25, r30
     f0a:	92 27       	eor	r25, r18
     f0c:	66 95       	lsr	r22
     f0e:	41 50       	subi	r20, 0x01	; 1
     f10:	51 09       	sbc	r21, r1
     f12:	89 f7       	brne	.-30     	; 0xef6 <_ZNK18FastTransferParser10verify_crcEv+0x34>
     f14:	ca 17       	cp	r28, r26
     f16:	db 07       	cpc	r29, r27
     f18:	59 f7       	brne	.-42     	; 0xef0 <_ZNK18FastTransferParser10verify_crcEv+0x2e>
     f1a:	01 c0       	rjmp	.+2      	; 0xf1e <_ZNK18FastTransferParser10verify_crcEv+0x5c>
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	f7 01       	movw	r30, r14
     f20:	e0 0f       	add	r30, r16
     f22:	f1 1f       	adc	r31, r17
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	20 81       	ld	r18, Z
     f28:	29 13       	cpse	r18, r25
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	ff 90       	pop	r15
     f36:	ef 90       	pop	r14
     f38:	08 95       	ret

00000f3a <_ZNK18FastTransferParser14valid_messagesEv>:
     f3a:	fc 01       	movw	r30, r24
     f3c:	22 a9       	ldd	r18, Z+50	; 0x32
     f3e:	26 30       	cpi	r18, 0x06	; 6
     f40:	68 f0       	brcs	.+26     	; 0xf5c <_ZNK18FastTransferParser14valid_messagesEv+0x22>
     f42:	32 81       	ldd	r19, Z+2	; 0x02
     f44:	31 30       	cpi	r19, 0x01	; 1
     f46:	61 f4       	brne	.+24     	; 0xf60 <_ZNK18FastTransferParser14valid_messagesEv+0x26>
     f48:	44 81       	ldd	r20, Z+4	; 0x04
     f4a:	50 e0       	ldi	r21, 0x00	; 0
     f4c:	4a 5f       	subi	r20, 0xFA	; 250
     f4e:	5f 4f       	sbci	r21, 0xFF	; 255
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	42 17       	cp	r20, r18
     f54:	53 07       	cpc	r21, r19
     f56:	31 f4       	brne	.+12     	; 0xf64 <_ZNK18FastTransferParser14valid_messagesEv+0x2a>
     f58:	b4 cf       	rjmp	.-152    	; 0xec2 <_ZNK18FastTransferParser10verify_crcEv>
     f5a:	08 95       	ret
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	08 95       	ret
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	08 95       	ret
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	08 95       	ret

00000f68 <_ZNK18FastTransferParser12num_messagesEv>:
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	ec 01       	movw	r28, r24
     f6e:	e5 df       	rcall	.-54     	; 0xf3a <_ZNK18FastTransferParser14valid_messagesEv>
     f70:	88 23       	and	r24, r24
     f72:	39 f0       	breq	.+14     	; 0xf82 <_ZNK18FastTransferParser12num_messagesEv+0x1a>
     f74:	8c 81       	ldd	r24, Y+4	; 0x04
     f76:	9b ea       	ldi	r25, 0xAB	; 171
     f78:	89 9f       	mul	r24, r25
     f7a:	81 2d       	mov	r24, r1
     f7c:	11 24       	eor	r1, r1
     f7e:	86 95       	lsr	r24
     f80:	01 c0       	rjmp	.+2      	; 0xf84 <_ZNK18FastTransferParser12num_messagesEv+0x1c>
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	08 95       	ret

00000f8a <_ZN16ControlBoxEngine10initializeEv>:
#include <avr/interrupt.h>
#include "timer/Clock.hpp"
#include "digital_io/digital_pin.hpp"

void ControlBoxEngine::initialize ()
{
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	ec 01       	movw	r28, r24
	sei();
     f90:	78 94       	sei
	memory.initialize();
     f92:	71 d7       	rcall	.+3810   	; 0x1e76 <_ZN6Memory10initializeEv>
	inputs.initialize(&memory);
     f94:	be 01       	movw	r22, r28
     f96:	ce 01       	movw	r24, r28
     f98:	85 52       	subi	r24, 0x25	; 37
     f9a:	9f 4f       	sbci	r25, 0xFF	; 255
     f9c:	9c d2       	rcall	.+1336   	; 0x14d6 <_ZN12InputHandler10initializeEP6Memory>
	//communications.initialize(UART_1, &memory);
	robot_FT.initialize(UART_1, &memory);
     f9e:	ae 01       	movw	r20, r28
     fa0:	61 e0       	ldi	r22, 0x01	; 1
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	ce 01       	movw	r24, r28
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	6d d9       	rcall	.-3366   	; 0x284 <_ZN14Communications10initializeEjP6Memory>
}
     faa:	df 91       	pop	r29
     fac:	cf 91       	pop	r28
     fae:	08 95       	ret

00000fb0 <_ZN16ControlBoxEngine4loopEv>:
void ControlBoxEngine::loop ()
{
	while (1)
	{
		//communications.check_connection();
		robot_FT.check_connection();
     fb0:	ec 01       	movw	r28, r24
     fb2:	21 96       	adiw	r28, 0x01	; 1
		inputs.poll();
     fb4:	8c 01       	movw	r16, r24
     fb6:	05 52       	subi	r16, 0x25	; 37
     fb8:	1f 4f       	sbci	r17, 0xFF	; 255
void ControlBoxEngine::loop ()
{
	while (1)
	{
		//communications.check_connection();
		robot_FT.check_connection();
     fba:	ce 01       	movw	r24, r28
     fbc:	8b d9       	rcall	.-3306   	; 0x2d4 <_ZN14Communications16check_connectionEv>
		inputs.poll();
     fbe:	c8 01       	movw	r24, r16
     fc0:	0b d3       	rcall	.+1558   	; 0x15d8 <_ZN12InputHandler4pollEv>
		//communications.transmit();
		robot_FT.transmit();
     fc2:	ce 01       	movw	r24, r28
     fc4:	60 de       	rcall	.-832    	; 0xc86 <_ZN14Communications8transmitEv>
		//communications.receive();
		robot_FT.receive();
     fc6:	ce 01       	movw	r24, r28
     fc8:	7b dd       	rcall	.-1290   	; 0xac0 <_ZN14Communications7receiveEv>
     fca:	f7 cf       	rjmp	.-18     	; 0xfba <_ZN16ControlBoxEngine4loopEv+0xa>

00000fcc <_ZL12DDR_REGISTER4Port>:
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	8b 30       	cpi	r24, 0x0B	; 11
     fd0:	91 05       	cpc	r25, r1
     fd2:	18 f5       	brcc	.+70     	; 0x101a <_ZL12DDR_REGISTER4Port+0x4e>
     fd4:	fc 01       	movw	r30, r24
     fd6:	ee 58       	subi	r30, 0x8E	; 142
     fd8:	ff 4f       	sbci	r31, 0xFF	; 255
     fda:	0c 94 da 14 	jmp	0x29b4	; 0x29b4 <__tablejump2__>
     fde:	84 e2       	ldi	r24, 0x24	; 36
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	08 95       	ret
     fe4:	87 e2       	ldi	r24, 0x27	; 39
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	08 95       	ret
     fea:	8a e2       	ldi	r24, 0x2A	; 42
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	08 95       	ret
     ff0:	8d e2       	ldi	r24, 0x2D	; 45
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	08 95       	ret
     ff6:	80 e3       	ldi	r24, 0x30	; 48
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	08 95       	ret
     ffc:	83 e3       	ldi	r24, 0x33	; 51
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	08 95       	ret
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	91 e0       	ldi	r25, 0x01	; 1
    1006:	08 95       	ret
    1008:	84 e0       	ldi	r24, 0x04	; 4
    100a:	91 e0       	ldi	r25, 0x01	; 1
    100c:	08 95       	ret
    100e:	87 e0       	ldi	r24, 0x07	; 7
    1010:	91 e0       	ldi	r25, 0x01	; 1
    1012:	08 95       	ret
    1014:	8a e0       	ldi	r24, 0x0A	; 10
    1016:	91 e0       	ldi	r25, 0x01	; 1
    1018:	08 95       	ret
    101a:	85 e6       	ldi	r24, 0x65	; 101
    101c:	92 e0       	ldi	r25, 0x02	; 2
    101e:	08 95       	ret
    1020:	81 e2       	ldi	r24, 0x21	; 33
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	08 95       	ret

00001026 <_ZL13PORT_REGISTER4Port>:
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	8b 30       	cpi	r24, 0x0B	; 11
    102a:	91 05       	cpc	r25, r1
    102c:	18 f5       	brcc	.+70     	; 0x1074 <_ZL13PORT_REGISTER4Port+0x4e>
    102e:	fc 01       	movw	r30, r24
    1030:	e3 58       	subi	r30, 0x83	; 131
    1032:	ff 4f       	sbci	r31, 0xFF	; 255
    1034:	0c 94 da 14 	jmp	0x29b4	; 0x29b4 <__tablejump2__>
    1038:	85 e2       	ldi	r24, 0x25	; 37
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	08 95       	ret
    103e:	88 e2       	ldi	r24, 0x28	; 40
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	08 95       	ret
    1044:	8b e2       	ldi	r24, 0x2B	; 43
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	08 95       	ret
    104a:	8e e2       	ldi	r24, 0x2E	; 46
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	08 95       	ret
    1050:	81 e3       	ldi	r24, 0x31	; 49
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	08 95       	ret
    1056:	84 e3       	ldi	r24, 0x34	; 52
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	08 95       	ret
    105c:	82 e0       	ldi	r24, 0x02	; 2
    105e:	91 e0       	ldi	r25, 0x01	; 1
    1060:	08 95       	ret
    1062:	85 e0       	ldi	r24, 0x05	; 5
    1064:	91 e0       	ldi	r25, 0x01	; 1
    1066:	08 95       	ret
    1068:	88 e0       	ldi	r24, 0x08	; 8
    106a:	91 e0       	ldi	r25, 0x01	; 1
    106c:	08 95       	ret
    106e:	8b e0       	ldi	r24, 0x0B	; 11
    1070:	91 e0       	ldi	r25, 0x01	; 1
    1072:	08 95       	ret
    1074:	85 e6       	ldi	r24, 0x65	; 101
    1076:	92 e0       	ldi	r25, 0x02	; 2
    1078:	08 95       	ret
    107a:	82 e2       	ldi	r24, 0x22	; 34
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	08 95       	ret

00001080 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>:
    1080:	0f 93       	push	r16
    1082:	1f 93       	push	r17
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	fc 01       	movw	r30, r24
    108a:	c6 2f       	mov	r28, r22
    108c:	d4 2f       	mov	r29, r20
    108e:	60 83       	st	Z, r22
    1090:	41 83       	std	Z+1, r20	; 0x01
    1092:	22 83       	std	Z+2, r18	; 0x02
    1094:	21 11       	cpse	r18, r1
    1096:	16 c0       	rjmp	.+44     	; 0x10c4 <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x44>
    1098:	86 2f       	mov	r24, r22
    109a:	98 df       	rcall	.-208    	; 0xfcc <_ZL12DDR_REGISTER4Port>
    109c:	fc 01       	movw	r30, r24
    109e:	90 81       	ld	r25, Z
    10a0:	21 e0       	ldi	r18, 0x01	; 1
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x2a>
    10a6:	22 0f       	add	r18, r18
    10a8:	33 1f       	adc	r19, r19
    10aa:	da 95       	dec	r29
    10ac:	e2 f7       	brpl	.-8      	; 0x10a6 <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x26>
    10ae:	d2 2f       	mov	r29, r18
    10b0:	d0 95       	com	r29
    10b2:	9d 23       	and	r25, r29
    10b4:	90 83       	st	Z, r25
    10b6:	8c 2f       	mov	r24, r28
    10b8:	b6 df       	rcall	.-148    	; 0x1026 <_ZL13PORT_REGISTER4Port>
    10ba:	fc 01       	movw	r30, r24
    10bc:	20 81       	ld	r18, Z
    10be:	2d 23       	and	r18, r29
    10c0:	20 83       	st	Z, r18
    10c2:	25 c0       	rjmp	.+74     	; 0x110e <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x8e>
    10c4:	22 30       	cpi	r18, 0x02	; 2
    10c6:	b1 f4       	brne	.+44     	; 0x10f4 <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x74>
    10c8:	86 2f       	mov	r24, r22
    10ca:	80 df       	rcall	.-256    	; 0xfcc <_ZL12DDR_REGISTER4Port>
    10cc:	fc 01       	movw	r30, r24
    10ce:	90 81       	ld	r25, Z
    10d0:	01 e0       	ldi	r16, 0x01	; 1
    10d2:	10 e0       	ldi	r17, 0x00	; 0
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x5a>
    10d6:	00 0f       	add	r16, r16
    10d8:	11 1f       	adc	r17, r17
    10da:	da 95       	dec	r29
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x56>
    10de:	80 2f       	mov	r24, r16
    10e0:	80 95       	com	r24
    10e2:	98 23       	and	r25, r24
    10e4:	90 83       	st	Z, r25
    10e6:	8c 2f       	mov	r24, r28
    10e8:	9e df       	rcall	.-196    	; 0x1026 <_ZL13PORT_REGISTER4Port>
    10ea:	fc 01       	movw	r30, r24
    10ec:	20 81       	ld	r18, Z
    10ee:	02 2b       	or	r16, r18
    10f0:	00 83       	st	Z, r16
    10f2:	0d c0       	rjmp	.+26     	; 0x110e <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x8e>
    10f4:	86 2f       	mov	r24, r22
    10f6:	6a df       	rcall	.-300    	; 0xfcc <_ZL12DDR_REGISTER4Port>
    10f8:	fc 01       	movw	r30, r24
    10fa:	40 81       	ld	r20, Z
    10fc:	21 e0       	ldi	r18, 0x01	; 1
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x86>
    1102:	22 0f       	add	r18, r18
    1104:	33 1f       	adc	r19, r19
    1106:	da 95       	dec	r29
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x82>
    110a:	24 2b       	or	r18, r20
    110c:	20 83       	st	Z, r18
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	1f 91       	pop	r17
    1114:	0f 91       	pop	r16
    1116:	08 95       	ret

00001118 <_ZN10DigitalPin4readEv>:
    1118:	dc 01       	movw	r26, r24
    111a:	11 96       	adiw	r26, 0x01	; 1
    111c:	2c 91       	ld	r18, X
    111e:	11 97       	sbiw	r26, 0x01	; 1
    1120:	ec 91       	ld	r30, X
    1122:	8e 2f       	mov	r24, r30
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	8b 30       	cpi	r24, 0x0B	; 11
    1128:	91 05       	cpc	r25, r1
    112a:	18 f5       	brcc	.+70     	; 0x1172 <_ZN10DigitalPin4readEv+0x5a>
    112c:	fc 01       	movw	r30, r24
    112e:	e8 57       	subi	r30, 0x78	; 120
    1130:	ff 4f       	sbci	r31, 0xFF	; 255
    1132:	0c 94 da 14 	jmp	0x29b4	; 0x29b4 <__tablejump2__>
    1136:	e3 e2       	ldi	r30, 0x23	; 35
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	20 c0       	rjmp	.+64     	; 0x117c <_ZN10DigitalPin4readEv+0x64>
    113c:	e6 e2       	ldi	r30, 0x26	; 38
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	1d c0       	rjmp	.+58     	; 0x117c <_ZN10DigitalPin4readEv+0x64>
    1142:	e9 e2       	ldi	r30, 0x29	; 41
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	1a c0       	rjmp	.+52     	; 0x117c <_ZN10DigitalPin4readEv+0x64>
    1148:	ec e2       	ldi	r30, 0x2C	; 44
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	17 c0       	rjmp	.+46     	; 0x117c <_ZN10DigitalPin4readEv+0x64>
    114e:	ef e2       	ldi	r30, 0x2F	; 47
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	14 c0       	rjmp	.+40     	; 0x117c <_ZN10DigitalPin4readEv+0x64>
    1154:	e2 e3       	ldi	r30, 0x32	; 50
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	11 c0       	rjmp	.+34     	; 0x117c <_ZN10DigitalPin4readEv+0x64>
    115a:	e0 e0       	ldi	r30, 0x00	; 0
    115c:	f1 e0       	ldi	r31, 0x01	; 1
    115e:	0e c0       	rjmp	.+28     	; 0x117c <_ZN10DigitalPin4readEv+0x64>
    1160:	e3 e0       	ldi	r30, 0x03	; 3
    1162:	f1 e0       	ldi	r31, 0x01	; 1
    1164:	0b c0       	rjmp	.+22     	; 0x117c <_ZN10DigitalPin4readEv+0x64>
    1166:	e6 e0       	ldi	r30, 0x06	; 6
    1168:	f1 e0       	ldi	r31, 0x01	; 1
    116a:	08 c0       	rjmp	.+16     	; 0x117c <_ZN10DigitalPin4readEv+0x64>
    116c:	e9 e0       	ldi	r30, 0x09	; 9
    116e:	f1 e0       	ldi	r31, 0x01	; 1
    1170:	05 c0       	rjmp	.+10     	; 0x117c <_ZN10DigitalPin4readEv+0x64>
    1172:	e5 e6       	ldi	r30, 0x65	; 101
    1174:	f2 e0       	ldi	r31, 0x02	; 2
    1176:	02 c0       	rjmp	.+4      	; 0x117c <_ZN10DigitalPin4readEv+0x64>
    1178:	e0 e2       	ldi	r30, 0x20	; 32
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <_ZN10DigitalPin4readEv+0x6e>
    1182:	95 95       	asr	r25
    1184:	87 95       	ror	r24
    1186:	2a 95       	dec	r18
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <_ZN10DigitalPin4readEv+0x6a>
    118a:	81 70       	andi	r24, 0x01	; 1
    118c:	08 95       	ret

0000118e <_ZN10DigitalPin6is_lowEv>:
    118e:	c4 df       	rcall	.-120    	; 0x1118 <_ZN10DigitalPin4readEv>
    1190:	91 e0       	ldi	r25, 0x01	; 1
    1192:	89 27       	eor	r24, r25
    1194:	08 95       	ret

00001196 <_ZN8Expander11set_addressEh>:
#include "expander.hpp"

void Expander::set_address (uint8_t address)
{
  this->address = address;
    1196:	fc 01       	movw	r30, r24
    1198:	61 93       	st	Z+, r22
    119a:	cf 01       	movw	r24, r30
  i2c.set_address(address);
    119c:	af c2       	rjmp	.+1374   	; 0x16fc <_ZN3I2C11set_addressEh>
    119e:	08 95       	ret

000011a0 <_ZN8Expander14write_registerEhh>:
}

void Expander::write_register (uint8_t reg_addr, uint8_t value)
{
    11a0:	ef 92       	push	r14
    11a2:	ff 92       	push	r15
    11a4:	0f 93       	push	r16
    11a6:	1f 93       	push	r17
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
    11ac:	00 d0       	rcall	.+0      	; 0x11ae <_ZN8Expander14write_registerEhh+0xe>
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
    11b2:	e6 2e       	mov	r14, r22
    11b4:	f4 2e       	mov	r15, r20
  i2c.set_address(address);
    11b6:	8c 01       	movw	r16, r24
    11b8:	0f 5f       	subi	r16, 0xFF	; 255
    11ba:	1f 4f       	sbci	r17, 0xFF	; 255
    11bc:	fc 01       	movw	r30, r24
    11be:	60 81       	ld	r22, Z
    11c0:	c8 01       	movw	r24, r16
    11c2:	9c d2       	rcall	.+1336   	; 0x16fc <_ZN3I2C11set_addressEh>
  uint8_t msg [] = {reg_addr, value};
    11c4:	e9 82       	std	Y+1, r14	; 0x01
    11c6:	fa 82       	std	Y+2, r15	; 0x02
  i2c.write(msg, 2);
    11c8:	42 e0       	ldi	r20, 0x02	; 2
    11ca:	be 01       	movw	r22, r28
    11cc:	6f 5f       	subi	r22, 0xFF	; 255
    11ce:	7f 4f       	sbci	r23, 0xFF	; 255
    11d0:	c8 01       	movw	r24, r16
    11d2:	18 d3       	rcall	.+1584   	; 0x1804 <_ZN3I2C5writeEPhh>
}
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	df 91       	pop	r29
    11da:	cf 91       	pop	r28
    11dc:	1f 91       	pop	r17
    11de:	0f 91       	pop	r16
    11e0:	ff 90       	pop	r15
    11e2:	ef 90       	pop	r14
    11e4:	08 95       	ret

000011e6 <_ZN8Expander13read_registerEh>:

uint8_t Expander::read_register (uint8_t reg_addr)
{
    11e6:	0f 93       	push	r16
    11e8:	1f 93       	push	r17
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <_ZN8Expander13read_registerEh+0xa>
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	6a 83       	std	Y+2, r22	; 0x02
  i2c.set_address(address);
    11f6:	8c 01       	movw	r16, r24
    11f8:	0f 5f       	subi	r16, 0xFF	; 255
    11fa:	1f 4f       	sbci	r17, 0xFF	; 255
    11fc:	fc 01       	movw	r30, r24
    11fe:	60 81       	ld	r22, Z
    1200:	c8 01       	movw	r24, r16
    1202:	7c d2       	rcall	.+1272   	; 0x16fc <_ZN3I2C11set_addressEh>
  i2c.write(&reg_addr, 1);
    1204:	41 e0       	ldi	r20, 0x01	; 1
    1206:	be 01       	movw	r22, r28
    1208:	6e 5f       	subi	r22, 0xFE	; 254
    120a:	7f 4f       	sbci	r23, 0xFF	; 255
    120c:	c8 01       	movw	r24, r16
    120e:	fa d2       	rcall	.+1524   	; 0x1804 <_ZN3I2C5writeEPhh>
  uint8_t value;
  i2c.read(&value, 1);
    1210:	41 e0       	ldi	r20, 0x01	; 1
    1212:	be 01       	movw	r22, r28
    1214:	6f 5f       	subi	r22, 0xFF	; 255
    1216:	7f 4f       	sbci	r23, 0xFF	; 255
    1218:	c8 01       	movw	r24, r16
    121a:	94 d3       	rcall	.+1832   	; 0x1944 <_ZN3I2C4readEPhh>
  return value;
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	1f 91       	pop	r17
    1228:	0f 91       	pop	r16
    122a:	08 95       	ret

0000122c <_ZN11ExpanderPin4readEv>:
  uint8_t reg_addr = (port == A) ? GPIOA : GPIOB;
  if (value)
    expander->write_register(reg_addr, expander->read_register(reg_addr) | (1 << pin));
  else
    expander->write_register(reg_addr, expander->read_register(reg_addr) & ~(1 << pin));
}
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	ec 01       	movw	r28, r24
    1232:	88 81       	ld	r24, Y
    1234:	88 23       	and	r24, r24
    1236:	11 f0       	breq	.+4      	; 0x123c <_ZN11ExpanderPin4readEv+0x10>
    1238:	63 e1       	ldi	r22, 0x13	; 19
    123a:	01 c0       	rjmp	.+2      	; 0x123e <_ZN11ExpanderPin4readEv+0x12>
    123c:	62 e1       	ldi	r22, 0x12	; 18
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	9c 81       	ldd	r25, Y+4	; 0x04
    1242:	d1 df       	rcall	.-94     	; 0x11e6 <_ZN8Expander13read_registerEh>
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	09 80       	ldd	r0, Y+1	; 0x01
    1248:	02 c0       	rjmp	.+4      	; 0x124e <_ZN11ExpanderPin4readEv+0x22>
    124a:	95 95       	asr	r25
    124c:	87 95       	ror	r24
    124e:	0a 94       	dec	r0
    1250:	e2 f7       	brpl	.-8      	; 0x124a <_ZN11ExpanderPin4readEv+0x1e>
    1252:	81 70       	andi	r24, 0x01	; 1
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	08 95       	ret

0000125a <_ZN11ExpanderPin8set_modeE4Mode>:

void ExpanderPin::set_mode (Mode mode)
{
    125a:	1f 93       	push	r17
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	ec 01       	movw	r28, r24
  this->mode = mode;
    1262:	6a 83       	std	Y+2, r22	; 0x02
  uint8_t addr = (port == A) ? IODIRA : IODIRB;
    1264:	11 e0       	ldi	r17, 0x01	; 1
    1266:	88 81       	ld	r24, Y
    1268:	81 11       	cpse	r24, r1
    126a:	01 c0       	rjmp	.+2      	; 0x126e <_ZN11ExpanderPin8set_modeE4Mode+0x14>
    126c:	10 e0       	ldi	r17, 0x00	; 0
  if (mode == INPUT)
    126e:	61 11       	cpse	r22, r1
    1270:	12 c0       	rjmp	.+36     	; 0x1296 <_ZN11ExpanderPin8set_modeE4Mode+0x3c>
    expander->write_register(addr, expander->read_register(addr) | (1 << pin));
    1272:	61 2f       	mov	r22, r17
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	9c 81       	ldd	r25, Y+4	; 0x04
    1278:	b6 df       	rcall	.-148    	; 0x11e6 <_ZN8Expander13read_registerEh>
    127a:	41 e0       	ldi	r20, 0x01	; 1
    127c:	50 e0       	ldi	r21, 0x00	; 0
    127e:	09 80       	ldd	r0, Y+1	; 0x01
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <_ZN11ExpanderPin8set_modeE4Mode+0x2c>
    1282:	44 0f       	add	r20, r20
    1284:	55 1f       	adc	r21, r21
    1286:	0a 94       	dec	r0
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <_ZN11ExpanderPin8set_modeE4Mode+0x28>
    128a:	48 2b       	or	r20, r24
    128c:	61 2f       	mov	r22, r17
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	9c 81       	ldd	r25, Y+4	; 0x04
    1292:	86 df       	rcall	.-244    	; 0x11a0 <_ZN8Expander14write_registerEhh>
    1294:	12 c0       	rjmp	.+36     	; 0x12ba <_ZN11ExpanderPin8set_modeE4Mode+0x60>
  else
    expander->write_register(addr, expander->read_register(addr) & ~(1 << pin));
    1296:	61 2f       	mov	r22, r17
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	9c 81       	ldd	r25, Y+4	; 0x04
    129c:	a4 df       	rcall	.-184    	; 0x11e6 <_ZN8Expander13read_registerEh>
    129e:	41 e0       	ldi	r20, 0x01	; 1
    12a0:	50 e0       	ldi	r21, 0x00	; 0
    12a2:	09 80       	ldd	r0, Y+1	; 0x01
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <_ZN11ExpanderPin8set_modeE4Mode+0x50>
    12a6:	44 0f       	add	r20, r20
    12a8:	55 1f       	adc	r21, r21
    12aa:	0a 94       	dec	r0
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <_ZN11ExpanderPin8set_modeE4Mode+0x4c>
    12ae:	40 95       	com	r20
    12b0:	48 23       	and	r20, r24
    12b2:	61 2f       	mov	r22, r17
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	9c 81       	ldd	r25, Y+4	; 0x04
    12b8:	73 df       	rcall	.-282    	; 0x11a0 <_ZN8Expander14write_registerEhh>
}
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	1f 91       	pop	r17
    12c0:	08 95       	ret

000012c2 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>:
const uint8_t IODIRB = 0x01;
const uint8_t GPIOA  = 0x12;
const uint8_t GPIOB  = 0x13;

void ExpanderPin::initialize (Expander * expander, Port port, Pin pin, Mode mode)
{
    12c2:	0f 93       	push	r16
  this->expander = expander;
    12c4:	fc 01       	movw	r30, r24
    12c6:	74 83       	std	Z+4, r23	; 0x04
    12c8:	63 83       	std	Z+3, r22	; 0x03
  this->port = port;
    12ca:	40 83       	st	Z, r20
  this->pin = pin;
    12cc:	21 83       	std	Z+1, r18	; 0x01
  set_mode(mode);
    12ce:	60 2f       	mov	r22, r16
    12d0:	c4 df       	rcall	.-120    	; 0x125a <_ZN11ExpanderPin8set_modeE4Mode>
}
    12d2:	0f 91       	pop	r16
    12d4:	08 95       	ret

000012d6 <_ZN12InputHandler20initialize_expandersEv>:
	memory->write(SLIDER_LEFT, 0);
	memory->write(SLIDER_RIGHT, 0);
}

void InputHandler::initialize_expanders ()
{
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	ec 01       	movw	r28, r24
	expander_left.set_address(0x20);
    12dc:	60 e2       	ldi	r22, 0x20	; 32
    12de:	02 96       	adiw	r24, 0x02	; 2
    12e0:	5a df       	rcall	.-332    	; 0x1196 <_ZN8Expander11set_addressEh>
	expander_right.set_address(0x27);
    12e2:	67 e2       	ldi	r22, 0x27	; 39
    12e4:	ce 01       	movw	r24, r28
    12e6:	49 96       	adiw	r24, 0x19	; 25
    12e8:	56 df       	rcall	.-340    	; 0x1196 <_ZN8Expander11set_addressEh>
}
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	08 95       	ret

000012f0 <_ZN12InputHandler23initialize_push_buttonsEv>:

void InputHandler::initialize_push_buttons ()
{
    12f0:	ef 92       	push	r14
    12f2:	ff 92       	push	r15
    12f4:	0f 93       	push	r16
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	ec 01       	movw	r28, r24
	push_buttons[0].initialize(&expander_left, A, ZERO, INPUT);
    12fc:	7c 01       	movw	r14, r24
    12fe:	82 e0       	ldi	r24, 0x02	; 2
    1300:	e8 0e       	add	r14, r24
    1302:	f1 1c       	adc	r15, r1
    1304:	00 e0       	ldi	r16, 0x00	; 0
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	40 e0       	ldi	r20, 0x00	; 0
    130a:	b7 01       	movw	r22, r14
    130c:	ce 01       	movw	r24, r28
    130e:	c0 96       	adiw	r24, 0x30	; 48
    1310:	d8 df       	rcall	.-80     	; 0x12c2 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[1].initialize(&expander_left, A, TWO,  INPUT);
    1312:	22 e0       	ldi	r18, 0x02	; 2
    1314:	40 e0       	ldi	r20, 0x00	; 0
    1316:	b7 01       	movw	r22, r14
    1318:	ce 01       	movw	r24, r28
    131a:	c5 96       	adiw	r24, 0x35	; 53
    131c:	d2 df       	rcall	.-92     	; 0x12c2 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[2].initialize(&expander_left, A, FOUR, INPUT);
    131e:	24 e0       	ldi	r18, 0x04	; 4
    1320:	40 e0       	ldi	r20, 0x00	; 0
    1322:	b7 01       	movw	r22, r14
    1324:	ce 01       	movw	r24, r28
    1326:	ca 96       	adiw	r24, 0x3a	; 58
    1328:	cc df       	rcall	.-104    	; 0x12c2 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[3].initialize(&expander_left, A, SIX,  INPUT);
    132a:	26 e0       	ldi	r18, 0x06	; 6
    132c:	40 e0       	ldi	r20, 0x00	; 0
    132e:	b7 01       	movw	r22, r14
    1330:	ce 01       	movw	r24, r28
    1332:	cf 96       	adiw	r24, 0x3f	; 63
    1334:	c6 df       	rcall	.-116    	; 0x12c2 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[4].initialize(&expander_left, B, ZERO, INPUT);
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	41 e0       	ldi	r20, 0x01	; 1
    133a:	b7 01       	movw	r22, r14
    133c:	ce 01       	movw	r24, r28
    133e:	8c 5b       	subi	r24, 0xBC	; 188
    1340:	9f 4f       	sbci	r25, 0xFF	; 255
    1342:	bf df       	rcall	.-130    	; 0x12c2 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[5].initialize(&expander_left, B, TWO,  INPUT);
    1344:	22 e0       	ldi	r18, 0x02	; 2
    1346:	41 e0       	ldi	r20, 0x01	; 1
    1348:	b7 01       	movw	r22, r14
    134a:	ce 01       	movw	r24, r28
    134c:	87 5b       	subi	r24, 0xB7	; 183
    134e:	9f 4f       	sbci	r25, 0xFF	; 255
    1350:	b8 df       	rcall	.-144    	; 0x12c2 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[6].initialize(&expander_left, B, FOUR, INPUT);
    1352:	24 e0       	ldi	r18, 0x04	; 4
    1354:	41 e0       	ldi	r20, 0x01	; 1
    1356:	b7 01       	movw	r22, r14
    1358:	ce 01       	movw	r24, r28
    135a:	82 5b       	subi	r24, 0xB2	; 178
    135c:	9f 4f       	sbci	r25, 0xFF	; 255
    135e:	b1 df       	rcall	.-158    	; 0x12c2 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[7].initialize(&expander_left, B, SIX,  INPUT);
    1360:	26 e0       	ldi	r18, 0x06	; 6
    1362:	41 e0       	ldi	r20, 0x01	; 1
    1364:	b7 01       	movw	r22, r14
    1366:	ce 01       	movw	r24, r28
    1368:	8d 5a       	subi	r24, 0xAD	; 173
    136a:	9f 4f       	sbci	r25, 0xFF	; 255
    136c:	aa df       	rcall	.-172    	; 0x12c2 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    136e:	7e 01       	movw	r14, r28
	push_buttons[8].initialize(&expander_right, A, ZERO, INPUT);
    1370:	89 e1       	ldi	r24, 0x19	; 25
    1372:	e8 0e       	add	r14, r24
    1374:	f1 1c       	adc	r15, r1
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	40 e0       	ldi	r20, 0x00	; 0
    137a:	b7 01       	movw	r22, r14
    137c:	ce 01       	movw	r24, r28
    137e:	88 5a       	subi	r24, 0xA8	; 168
    1380:	9f 4f       	sbci	r25, 0xFF	; 255
    1382:	9f df       	rcall	.-194    	; 0x12c2 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[9].initialize(&expander_right, A, TWO,  INPUT);
    1384:	22 e0       	ldi	r18, 0x02	; 2
    1386:	40 e0       	ldi	r20, 0x00	; 0
    1388:	b7 01       	movw	r22, r14
    138a:	ce 01       	movw	r24, r28
    138c:	83 5a       	subi	r24, 0xA3	; 163
    138e:	9f 4f       	sbci	r25, 0xFF	; 255
    1390:	98 df       	rcall	.-208    	; 0x12c2 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[10].initialize(&expander_right, A, FOUR, INPUT);
    1392:	24 e0       	ldi	r18, 0x04	; 4
    1394:	40 e0       	ldi	r20, 0x00	; 0
    1396:	b7 01       	movw	r22, r14
    1398:	ce 01       	movw	r24, r28
    139a:	8e 59       	subi	r24, 0x9E	; 158
    139c:	9f 4f       	sbci	r25, 0xFF	; 255
    139e:	91 df       	rcall	.-222    	; 0x12c2 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[11].initialize(&expander_right, A, SIX,  INPUT);
    13a0:	26 e0       	ldi	r18, 0x06	; 6
    13a2:	40 e0       	ldi	r20, 0x00	; 0
    13a4:	b7 01       	movw	r22, r14
    13a6:	ce 01       	movw	r24, r28
    13a8:	89 59       	subi	r24, 0x99	; 153
    13aa:	9f 4f       	sbci	r25, 0xFF	; 255
    13ac:	8a df       	rcall	.-236    	; 0x12c2 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[12].initialize(&expander_right, B, ZERO, INPUT);
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	41 e0       	ldi	r20, 0x01	; 1
    13b2:	b7 01       	movw	r22, r14
    13b4:	ce 01       	movw	r24, r28
    13b6:	84 59       	subi	r24, 0x94	; 148
    13b8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ba:	83 df       	rcall	.-250    	; 0x12c2 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[13].initialize(&expander_right, B, TWO,  INPUT);
    13bc:	22 e0       	ldi	r18, 0x02	; 2
    13be:	41 e0       	ldi	r20, 0x01	; 1
    13c0:	b7 01       	movw	r22, r14
    13c2:	ce 01       	movw	r24, r28
    13c4:	8f 58       	subi	r24, 0x8F	; 143
    13c6:	9f 4f       	sbci	r25, 0xFF	; 255
    13c8:	7c df       	rcall	.-264    	; 0x12c2 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[14].initialize(&expander_right, B, FOUR, INPUT);
    13ca:	24 e0       	ldi	r18, 0x04	; 4
    13cc:	41 e0       	ldi	r20, 0x01	; 1
    13ce:	b7 01       	movw	r22, r14
    13d0:	ce 01       	movw	r24, r28
    13d2:	8a 58       	subi	r24, 0x8A	; 138
    13d4:	9f 4f       	sbci	r25, 0xFF	; 255
    13d6:	75 df       	rcall	.-278    	; 0x12c2 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    13d8:	26 e0       	ldi	r18, 0x06	; 6
	push_buttons[15].initialize(&expander_right, B, SIX,  INPUT);
    13da:	41 e0       	ldi	r20, 0x01	; 1
    13dc:	b7 01       	movw	r22, r14
    13de:	ce 01       	movw	r24, r28
    13e0:	85 58       	subi	r24, 0x85	; 133
    13e2:	9f 4f       	sbci	r25, 0xFF	; 255
    13e4:	6e df       	rcall	.-292    	; 0x12c2 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
}
    13ea:	0f 91       	pop	r16
    13ec:	ff 90       	pop	r15
    13ee:	ef 90       	pop	r14
    13f0:	08 95       	ret

000013f2 <_ZN12InputHandler25initialize_arcade_buttonsEv>:
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29

void InputHandler::initialize_arcade_buttons ()
{
    13f6:	ec 01       	movw	r28, r24
	arcade_buttons[0].initialize(K, TWO, INPUT_PULLUP);   // emergency stop
    13f8:	22 e0       	ldi	r18, 0x02	; 2
    13fa:	42 e0       	ldi	r20, 0x02	; 2
    13fc:	69 e0       	ldi	r22, 0x09	; 9
    13fe:	80 58       	subi	r24, 0x80	; 128
    1400:	9f 4f       	sbci	r25, 0xFF	; 255
    1402:	3e de       	rcall	.-900    	; 0x1080 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
	arcade_buttons[1].initialize(B, SIX, INPUT_PULLUP);   // n/a
    1404:	22 e0       	ldi	r18, 0x02	; 2
    1406:	46 e0       	ldi	r20, 0x06	; 6
    1408:	61 e0       	ldi	r22, 0x01	; 1
    140a:	ce 01       	movw	r24, r28
    140c:	8d 57       	subi	r24, 0x7D	; 125
    140e:	9f 4f       	sbci	r25, 0xFF	; 255
    1410:	37 de       	rcall	.-914    	; 0x1080 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
	arcade_buttons[2].initialize(B, FOUR, INPUT_PULLUP);  // n/a
    1412:	22 e0       	ldi	r18, 0x02	; 2
    1414:	44 e0       	ldi	r20, 0x04	; 4
    1416:	61 e0       	ldi	r22, 0x01	; 1
    1418:	ce 01       	movw	r24, r28
    141a:	8a 57       	subi	r24, 0x7A	; 122
    141c:	9f 4f       	sbci	r25, 0xFF	; 255
    141e:	30 de       	rcall	.-928    	; 0x1080 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
	arcade_buttons[3].initialize(B, ZERO, INPUT_PULLUP);  // arm up
    1420:	22 e0       	ldi	r18, 0x02	; 2
    1422:	40 e0       	ldi	r20, 0x00	; 0
    1424:	61 e0       	ldi	r22, 0x01	; 1
    1426:	ce 01       	movw	r24, r28
    1428:	87 57       	subi	r24, 0x77	; 119
    142a:	9f 4f       	sbci	r25, 0xFF	; 255
    142c:	29 de       	rcall	.-942    	; 0x1080 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
	arcade_buttons[4].initialize(E, FOUR, INPUT_PULLUP);  // lower bucket
    142e:	22 e0       	ldi	r18, 0x02	; 2
    1430:	44 e0       	ldi	r20, 0x04	; 4
    1432:	64 e0       	ldi	r22, 0x04	; 4
    1434:	ce 01       	movw	r24, r28
    1436:	84 57       	subi	r24, 0x74	; 116
    1438:	9f 4f       	sbci	r25, 0xFF	; 255
    143a:	22 de       	rcall	.-956    	; 0x1080 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
	arcade_buttons[5].initialize(B, FIVE, INPUT_PULLUP);  // raise bucket
    143c:	22 e0       	ldi	r18, 0x02	; 2
    143e:	45 e0       	ldi	r20, 0x05	; 5
    1440:	61 e0       	ldi	r22, 0x01	; 1
    1442:	ce 01       	movw	r24, r28
    1444:	81 57       	subi	r24, 0x71	; 113
    1446:	9f 4f       	sbci	r25, 0xFF	; 255
    1448:	1b de       	rcall	.-970    	; 0x1080 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
	arcade_buttons[6].initialize(E, SIX, INPUT_PULLUP);   // arm down
    144a:	22 e0       	ldi	r18, 0x02	; 2
    144c:	46 e0       	ldi	r20, 0x06	; 6
    144e:	64 e0       	ldi	r22, 0x04	; 4
    1450:	ce 01       	movw	r24, r28
    1452:	8e 56       	subi	r24, 0x6E	; 110
    1454:	9f 4f       	sbci	r25, 0xFF	; 255
    1456:	14 de       	rcall	.-984    	; 0x1080 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
	arcade_buttons[7].initialize(E, SEVEN, INPUT_PULLUP); // plow up
    1458:	22 e0       	ldi	r18, 0x02	; 2
    145a:	47 e0       	ldi	r20, 0x07	; 7
    145c:	64 e0       	ldi	r22, 0x04	; 4
    145e:	ce 01       	movw	r24, r28
    1460:	8b 56       	subi	r24, 0x6B	; 107
    1462:	9f 4f       	sbci	r25, 0xFF	; 255
    1464:	0d de       	rcall	.-998    	; 0x1080 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
	arcade_buttons[8].initialize(E, FIVE, INPUT_PULLUP);  // plow down
    1466:	22 e0       	ldi	r18, 0x02	; 2
    1468:	45 e0       	ldi	r20, 0x05	; 5
    146a:	64 e0       	ldi	r22, 0x04	; 4
    146c:	ce 01       	movw	r24, r28
    146e:	88 56       	subi	r24, 0x68	; 104
    1470:	9f 4f       	sbci	r25, 0xFF	; 255
    1472:	06 de       	rcall	.-1012   	; 0x1080 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
    1474:	df 91       	pop	r29
}
    1476:	cf 91       	pop	r28
    1478:	08 95       	ret

0000147a <_ZN12InputHandler20initialize_joysticksEv>:
    147a:	cf 93       	push	r28

void InputHandler::initialize_joysticks ()
{
    147c:	df 93       	push	r29
    147e:	ec 01       	movw	r28, r24
	joystick_left_y.initialize(CHANNEL_ZERO);
    1480:	60 e0       	ldi	r22, 0x00	; 0
    1482:	84 56       	subi	r24, 0x64	; 100
    1484:	9f 4f       	sbci	r25, 0xFF	; 255
    1486:	0e 94 0f 01 	call	0x21e	; 0x21e <_ZN11AnalogInput10initializeE14ANALOG_CHANNEL>
	joystick_left_x.initialize(CHANNEL_ONE);
    148a:	61 e0       	ldi	r22, 0x01	; 1
    148c:	ce 01       	movw	r24, r28
    148e:	85 56       	subi	r24, 0x65	; 101
    1490:	9f 4f       	sbci	r25, 0xFF	; 255
    1492:	0e 94 0f 01 	call	0x21e	; 0x21e <_ZN11AnalogInput10initializeE14ANALOG_CHANNEL>
	joystick_right_x.initialize(CHANNEL_SIX);
    1496:	66 e0       	ldi	r22, 0x06	; 6
    1498:	ce 01       	movw	r24, r28
    149a:	83 56       	subi	r24, 0x63	; 99
    149c:	9f 4f       	sbci	r25, 0xFF	; 255
    149e:	0e 94 0f 01 	call	0x21e	; 0x21e <_ZN11AnalogInput10initializeE14ANALOG_CHANNEL>
	joystick_right_y.initialize(CHANNEL_SEVEN);
    14a2:	67 e0       	ldi	r22, 0x07	; 7
    14a4:	ce 01       	movw	r24, r28
    14a6:	82 56       	subi	r24, 0x62	; 98
    14a8:	9f 4f       	sbci	r25, 0xFF	; 255
    14aa:	0e 94 0f 01 	call	0x21e	; 0x21e <_ZN11AnalogInput10initializeE14ANALOG_CHANNEL>
}
    14ae:	df 91       	pop	r29
    14b0:	cf 91       	pop	r28
    14b2:	08 95       	ret

000014b4 <_ZN12InputHandler25initialize_potentiometersEv>:

void InputHandler::initialize_potentiometers ()
{
    14b4:	cf 93       	push	r28
    14b6:	df 93       	push	r29
    14b8:	ec 01       	movw	r28, r24
	potentiometer_left.initialize(CHANNEL_TWO);
    14ba:	62 e0       	ldi	r22, 0x02	; 2
    14bc:	81 56       	subi	r24, 0x61	; 97
    14be:	9f 4f       	sbci	r25, 0xFF	; 255
    14c0:	0e 94 0f 01 	call	0x21e	; 0x21e <_ZN11AnalogInput10initializeE14ANALOG_CHANNEL>
	potentiometer_right.initialize(CHANNEL_FIVE);
    14c4:	65 e0       	ldi	r22, 0x05	; 5
    14c6:	ce 01       	movw	r24, r28
    14c8:	80 56       	subi	r24, 0x60	; 96
    14ca:	9f 4f       	sbci	r25, 0xFF	; 255
    14cc:	0e 94 0f 01 	call	0x21e	; 0x21e <_ZN11AnalogInput10initializeE14ANALOG_CHANNEL>
}
    14d0:	df 91       	pop	r29
    14d2:	cf 91       	pop	r28
    14d4:	08 95       	ret

000014d6 <_ZN12InputHandler10initializeEP6Memory>:

Clocks RESET_TIMER(250);

Clocks PollInputs(100);
void InputHandler::initialize (Memory * memory)
{
    14d6:	0f 93       	push	r16
    14d8:	1f 93       	push	r17
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	ec 01       	movw	r28, r24
    14e0:	8b 01       	movw	r16, r22
	PollInputs.setInterval(100);
    14e2:	44 e6       	ldi	r20, 0x64	; 100
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	60 e0       	ldi	r22, 0x00	; 0
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	86 e6       	ldi	r24, 0x66	; 102
    14ec:	92 e0       	ldi	r25, 0x02	; 2
    14ee:	49 d5       	rcall	.+2706   	; 0x1f82 <_ZN6Clocks11setIntervalEl>
	this->memory = memory;
    14f0:	19 83       	std	Y+1, r17	; 0x01
    14f2:	08 83       	st	Y, r16
	initialize_expanders();
    14f4:	ce 01       	movw	r24, r28
    14f6:	ef de       	rcall	.-546    	; 0x12d6 <_ZN12InputHandler20initialize_expandersEv>
	initialize_push_buttons();
    14f8:	ce 01       	movw	r24, r28
    14fa:	fa de       	rcall	.-524    	; 0x12f0 <_ZN12InputHandler23initialize_push_buttonsEv>
	initialize_arcade_buttons();
    14fc:	ce 01       	movw	r24, r28
    14fe:	79 df       	rcall	.-270    	; 0x13f2 <_ZN12InputHandler25initialize_arcade_buttonsEv>
	initialize_joysticks();
    1500:	ce 01       	movw	r24, r28
    1502:	bb df       	rcall	.-138    	; 0x147a <_ZN12InputHandler20initialize_joysticksEv>
    1504:	ce 01       	movw	r24, r28
	initialize_potentiometers();
    1506:	d6 df       	rcall	.-84     	; 0x14b4 <_ZN12InputHandler25initialize_potentiometersEv>
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
}
    150c:	1f 91       	pop	r17
    150e:	0f 91       	pop	r16
    1510:	08 95       	ret

00001512 <_ZN12InputHandler19poll_arcade_buttonsEv>:
    1512:	0f 93       	push	r16
    1514:	1f 93       	push	r17
	potentiometer_left.initialize(CHANNEL_TWO);
	potentiometer_right.initialize(CHANNEL_FIVE);
}

void InputHandler::poll_arcade_buttons ()
{
    1516:	cf 93       	push	r28
    1518:	8c 01       	movw	r16, r24
    151a:	00 58       	subi	r16, 0x80	; 128
    151c:	1f 4f       	sbci	r17, 0xFF	; 255
    151e:	c0 e3       	ldi	r28, 0x30	; 48
	for (uint8_t i = 0; i < NUM_ARCADE_BUTTONS; ++i)
		memory->write(ARCADE_BUTTON_0_FLAG + i, arcade_buttons[i].is_low() ? 1 : 0);
    1520:	c8 01       	movw	r24, r16
    1522:	35 de       	rcall	.-918    	; 0x118e <_ZN10DigitalPin6is_lowEv>
    1524:	68 2f       	mov	r22, r24
    1526:	70 e0       	ldi	r23, 0x00	; 0
    1528:	8c 2f       	mov	r24, r28
    152a:	b4 d4       	rcall	.+2408   	; 0x1e94 <_ZN6Memory5writeEhj>
    152c:	0d 5f       	subi	r16, 0xFD	; 253
    152e:	1f 4f       	sbci	r17, 0xFF	; 255
    1530:	cf 5f       	subi	r28, 0xFF	; 255
	potentiometer_right.initialize(CHANNEL_FIVE);
}

void InputHandler::poll_arcade_buttons ()
{
	for (uint8_t i = 0; i < NUM_ARCADE_BUTTONS; ++i)
    1532:	c9 33       	cpi	r28, 0x39	; 57
    1534:	a9 f7       	brne	.-22     	; 0x1520 <_ZN12InputHandler19poll_arcade_buttonsEv+0xe>
		memory->write(ARCADE_BUTTON_0_FLAG + i, arcade_buttons[i].is_low() ? 1 : 0);
}
    1536:	cf 91       	pop	r28
    1538:	1f 91       	pop	r17
    153a:	0f 91       	pop	r16
    153c:	08 95       	ret

0000153e <_ZN12InputHandler17poll_push_buttonsEv>:

void InputHandler::poll_push_buttons ()
{
    153e:	0f 93       	push	r16
    1540:	1f 93       	push	r17
    1542:	cf 93       	push	r28
    1544:	8c 01       	movw	r16, r24
    1546:	00 5d       	subi	r16, 0xD0	; 208
    1548:	1f 4f       	sbci	r17, 0xFF	; 255
    154a:	c0 e4       	ldi	r28, 0x40	; 64
	for (uint8_t i = 0; i < NUM_PUSH_BUTTONS; ++i)
	{

		if (!push_buttons[i].read()) {
    154c:	c8 01       	movw	r24, r16
    154e:	6e de       	rcall	.-804    	; 0x122c <_ZN11ExpanderPin4readEv>
    1550:	81 11       	cpse	r24, r1
    1552:	04 c0       	rjmp	.+8      	; 0x155c <_ZN12InputHandler17poll_push_buttonsEv+0x1e>
			memory->write(PUSH_BUTTON_0_FLAG + i, 1);
    1554:	61 e0       	ldi	r22, 0x01	; 1
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	8c 2f       	mov	r24, r28
    155a:	9c d4       	rcall	.+2360   	; 0x1e94 <_ZN6Memory5writeEhj>
    155c:	0b 5f       	subi	r16, 0xFB	; 251
    155e:	1f 4f       	sbci	r17, 0xFF	; 255
    1560:	cf 5f       	subi	r28, 0xFF	; 255
		memory->write(ARCADE_BUTTON_0_FLAG + i, arcade_buttons[i].is_low() ? 1 : 0);
}

void InputHandler::poll_push_buttons ()
{
	for (uint8_t i = 0; i < NUM_PUSH_BUTTONS; ++i)
    1562:	c0 35       	cpi	r28, 0x50	; 80
    1564:	99 f7       	brne	.-26     	; 0x154c <_ZN12InputHandler17poll_push_buttonsEv+0xe>
//    else {
//      if(RESET_TIMER.isDone_NoReset())
//        memory->write(PUSH_BUTTON_0_FLAG + i, 0);
//    }
	}
}
    1566:	cf 91       	pop	r28
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	08 95       	ret

0000156e <_ZN12InputHandler18poll_analog_inputsEv>:

void InputHandler::poll_analog_inputs ()
{
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	ec 01       	movw	r28, r24
	memory->write(JOYSTICK_LEFT_X,  joystick_left_x.read());
    1574:	85 56       	subi	r24, 0x65	; 101
    1576:	9f 4f       	sbci	r25, 0xFF	; 255
    1578:	0e 94 2c 01 	call	0x258	; 0x258 <_ZN11AnalogInput4readEv>
    157c:	bc 01       	movw	r22, r24
    157e:	80 e2       	ldi	r24, 0x20	; 32
    1580:	89 d4       	rcall	.+2322   	; 0x1e94 <_ZN6Memory5writeEhj>
	memory->write(JOYSTICK_LEFT_Y,  joystick_left_y.read());
    1582:	ce 01       	movw	r24, r28
    1584:	84 56       	subi	r24, 0x64	; 100
    1586:	9f 4f       	sbci	r25, 0xFF	; 255
    1588:	0e 94 2c 01 	call	0x258	; 0x258 <_ZN11AnalogInput4readEv>
    158c:	bc 01       	movw	r22, r24
    158e:	81 e2       	ldi	r24, 0x21	; 33
    1590:	81 d4       	rcall	.+2306   	; 0x1e94 <_ZN6Memory5writeEhj>
	memory->write(JOYSTICK_RIGHT_X, joystick_right_x.read());
    1592:	ce 01       	movw	r24, r28
    1594:	83 56       	subi	r24, 0x63	; 99
    1596:	9f 4f       	sbci	r25, 0xFF	; 255
    1598:	0e 94 2c 01 	call	0x258	; 0x258 <_ZN11AnalogInput4readEv>
    159c:	bc 01       	movw	r22, r24
    159e:	82 e2       	ldi	r24, 0x22	; 34
    15a0:	79 d4       	rcall	.+2290   	; 0x1e94 <_ZN6Memory5writeEhj>
	memory->write(JOYSTICK_RIGHT_Y, joystick_right_y.read());
    15a2:	ce 01       	movw	r24, r28
    15a4:	82 56       	subi	r24, 0x62	; 98
    15a6:	9f 4f       	sbci	r25, 0xFF	; 255
    15a8:	0e 94 2c 01 	call	0x258	; 0x258 <_ZN11AnalogInput4readEv>
    15ac:	bc 01       	movw	r22, r24
    15ae:	83 e2       	ldi	r24, 0x23	; 35
    15b0:	71 d4       	rcall	.+2274   	; 0x1e94 <_ZN6Memory5writeEhj>
	memory->write(SLIDER_LEFT,      potentiometer_left.read());
    15b2:	ce 01       	movw	r24, r28
    15b4:	81 56       	subi	r24, 0x61	; 97
    15b6:	9f 4f       	sbci	r25, 0xFF	; 255
    15b8:	0e 94 2c 01 	call	0x258	; 0x258 <_ZN11AnalogInput4readEv>
    15bc:	bc 01       	movw	r22, r24
    15be:	84 e2       	ldi	r24, 0x24	; 36
    15c0:	69 d4       	rcall	.+2258   	; 0x1e94 <_ZN6Memory5writeEhj>
	memory->write(SLIDER_RIGHT,     potentiometer_right.read());
    15c2:	ce 01       	movw	r24, r28
    15c4:	80 56       	subi	r24, 0x60	; 96
    15c6:	9f 4f       	sbci	r25, 0xFF	; 255
    15c8:	0e 94 2c 01 	call	0x258	; 0x258 <_ZN11AnalogInput4readEv>
    15cc:	bc 01       	movw	r22, r24
    15ce:	85 e2       	ldi	r24, 0x25	; 37
    15d0:	61 d4       	rcall	.+2242   	; 0x1e94 <_ZN6Memory5writeEhj>
}
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
    15d6:	08 95       	ret

000015d8 <_ZN12InputHandler4pollEv>:
	initialize_joysticks();
	initialize_potentiometers();
}

void InputHandler::poll ()
{
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
    15dc:	ec 01       	movw	r28, r24
	if(PollInputs.isDone()) {
    15de:	86 e6       	ldi	r24, 0x66	; 102
    15e0:	92 e0       	ldi	r25, 0x02	; 2
    15e2:	e2 d4       	rcall	.+2500   	; 0x1fa8 <_ZN6Clocks6isDoneEv>
    15e4:	88 23       	and	r24, r24
    15e6:	31 f0       	breq	.+12     	; 0x15f4 <_ZN12InputHandler4pollEv+0x1c>
		poll_arcade_buttons();
    15e8:	ce 01       	movw	r24, r28
    15ea:	93 df       	rcall	.-218    	; 0x1512 <_ZN12InputHandler19poll_arcade_buttonsEv>
		//TODO: USE interrupt rather then polling
		poll_push_buttons();
    15ec:	ce 01       	movw	r24, r28
    15ee:	a7 df       	rcall	.-178    	; 0x153e <_ZN12InputHandler17poll_push_buttonsEv>
		poll_analog_inputs();
    15f0:	ce 01       	movw	r24, r28
    15f2:	bd df       	rcall	.-134    	; 0x156e <_ZN12InputHandler18poll_analog_inputsEv>
    15f4:	df 91       	pop	r29
	}
}
    15f6:	cf 91       	pop	r28
    15f8:	08 95       	ret

000015fa <_GLOBAL__sub_I_RESET_TIMER>:
    15fa:	4a ef       	ldi	r20, 0xFA	; 250
#include "../memory/memory_variables.hpp"
#include "../timer/Clock.hpp"
static const int NUM_ARCADE_BUTTONS = 9;
static const int NUM_PUSH_BUTTONS = 16;

Clocks RESET_TIMER(250);
    15fc:	50 e0       	ldi	r21, 0x00	; 0
    15fe:	60 e0       	ldi	r22, 0x00	; 0
    1600:	70 e0       	ldi	r23, 0x00	; 0
    1602:	82 e7       	ldi	r24, 0x72	; 114
    1604:	92 e0       	ldi	r25, 0x02	; 2
    1606:	9d d4       	rcall	.+2362   	; 0x1f42 <_ZN6ClocksC1El>

Clocks PollInputs(100);
    1608:	44 e6       	ldi	r20, 0x64	; 100
    160a:	50 e0       	ldi	r21, 0x00	; 0
    160c:	60 e0       	ldi	r22, 0x00	; 0
    160e:	70 e0       	ldi	r23, 0x00	; 0
    1610:	86 e6       	ldi	r24, 0x66	; 102
    1612:	92 e0       	ldi	r25, 0x02	; 2
    1614:	96 c4       	rjmp	.+2348   	; 0x1f42 <_ZN6ClocksC1El>
    1616:	08 95       	ret

00001618 <_GLOBAL__sub_I_LsevenSeg>:
	push_button_leds[inner[j]].write(0);
	_delay_ms(pause);
	for (int j = 0; j < 12; ++j)
	push_button_leds[outer[j]].write(0);
	_delay_ms(pause);
    1618:	8f 92       	push	r8
    161a:	af 92       	push	r10
    161c:	cf 92       	push	r12
    161e:	ef 92       	push	r14
    1620:	0f 93       	push	r16
#include "../i2c/LiquidCrystal_I2C.hpp"
#include <stdio.h>

#define F_CPU 16000000UL
#include <util/delay.h>
Adafruit_7segment LsevenSeg(0x70);
    1622:	60 e7       	ldi	r22, 0x70	; 112
    1624:	84 ef       	ldi	r24, 0xF4	; 244
    1626:	92 e0       	ldi	r25, 0x02	; 2
    1628:	ed d3       	rcall	.+2010   	; 0x1e04 <_ZN17Adafruit_7segmentC1Eh>
Adafruit_7segment RsevenSeg(0x71);
    162a:	61 e7       	ldi	r22, 0x71	; 113
    162c:	8c ea       	ldi	r24, 0xAC	; 172
    162e:	92 e0       	ldi	r25, 0x02	; 2
    1630:	e9 d3       	rcall	.+2002   	; 0x1e04 <_ZN17Adafruit_7segmentC1Eh>
LiquidCrystal_I2C lcd(0x3F, 2, 1, 0, 4, 5, 6, 7);
    1632:	0f 2e       	mov	r0, r31
    1634:	f7 e0       	ldi	r31, 0x07	; 7
    1636:	8f 2e       	mov	r8, r31
    1638:	f0 2d       	mov	r31, r0
    163a:	0f 2e       	mov	r0, r31
    163c:	f6 e0       	ldi	r31, 0x06	; 6
    163e:	af 2e       	mov	r10, r31
    1640:	f0 2d       	mov	r31, r0
    1642:	0f 2e       	mov	r0, r31
    1644:	f5 e0       	ldi	r31, 0x05	; 5
    1646:	cf 2e       	mov	r12, r31
    1648:	f0 2d       	mov	r31, r0
    164a:	68 94       	set
    164c:	ee 24       	eor	r14, r14
    164e:	e2 f8       	bld	r14, 2
    1650:	00 e0       	ldi	r16, 0x00	; 0
    1652:	21 e0       	ldi	r18, 0x01	; 1
    1654:	42 e0       	ldi	r20, 0x02	; 2
    1656:	6f e3       	ldi	r22, 0x3F	; 63
    1658:	86 e9       	ldi	r24, 0x96	; 150
    165a:	92 e0       	ldi	r25, 0x02	; 2
    165c:	f1 d2       	rcall	.+1506   	; 0x1c40 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh>
Clocks UpdateTimer;
    165e:	8a e8       	ldi	r24, 0x8A	; 138
    1660:	92 e0       	ldi	r25, 0x02	; 2
    1662:	55 d4       	rcall	.+2218   	; 0x1f0e <_ZN6ClocksC1Ev>
    1664:	44 ef       	ldi	r20, 0xF4	; 244
	panel_leds[6].initialize(C, SIX, OUTPUT);
	panel_leds[7].initialize(C, SEVEN, OUTPUT);
	for (int i = 0; i < 8; ++i)
	panel_leds[i].write(0);
}
Clocks blinkTimer(500);
    1666:	51 e0       	ldi	r21, 0x01	; 1
    1668:	60 e0       	ldi	r22, 0x00	; 0
    166a:	70 e0       	ldi	r23, 0x00	; 0
    166c:	8e e7       	ldi	r24, 0x7E	; 126
    166e:	92 e0       	ldi	r25, 0x02	; 2
    1670:	68 d4       	rcall	.+2256   	; 0x1f42 <_ZN6ClocksC1El>
    1672:	0f 91       	pop	r16
	push_button_leds[inner[j]].write(0);
	_delay_ms(pause);
	for (int j = 0; j < 12; ++j)
	push_button_leds[outer[j]].write(0);
	_delay_ms(pause);
    1674:	ef 90       	pop	r14
    1676:	cf 90       	pop	r12
    1678:	af 90       	pop	r10
    167a:	8f 90       	pop	r8
    167c:	08 95       	ret

0000167e <_Z10copy_rangePhS_h>:
    167e:	af 92       	push	r10
}

void I2C::stop ()
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
	state = DONE;
    1680:	bf 92       	push	r11
    1682:	cf 92       	push	r12
    1684:	df 92       	push	r13
    1686:	ef 92       	push	r14
    1688:	ff 92       	push	r15
    168a:	0f 93       	push	r16
    168c:	1f 93       	push	r17
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
    1692:	a4 2e       	mov	r10, r20
    1694:	b1 2c       	mov	r11, r1
    1696:	1a 14       	cp	r1, r10
    1698:	1b 04       	cpc	r1, r11
    169a:	2c f5       	brge	.+74     	; 0x16e6 <_Z10copy_rangePhS_h+0x68>
    169c:	e8 2e       	mov	r14, r24
    169e:	f9 2e       	mov	r15, r25
    16a0:	06 2f       	mov	r16, r22
    16a2:	17 2f       	mov	r17, r23
    16a4:	c0 e0       	ldi	r28, 0x00	; 0
    16a6:	d0 e0       	ldi	r29, 0x00	; 0
    16a8:	0f 2e       	mov	r0, r31
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	cf 2e       	mov	r12, r31
    16ae:	f2 e0       	ldi	r31, 0x02	; 2
    16b0:	df 2e       	mov	r13, r31
    16b2:	f0 2d       	mov	r31, r0
    16b4:	f7 01       	movw	r30, r14
    16b6:	81 91       	ld	r24, Z+
    16b8:	7f 01       	movw	r14, r30
    16ba:	f8 01       	movw	r30, r16
    16bc:	81 93       	st	Z+, r24
    16be:	8f 01       	movw	r16, r30
    16c0:	80 81       	ld	r24, Z
    16c2:	1f 92       	push	r1
    16c4:	8f 93       	push	r24
    16c6:	df 93       	push	r29
    16c8:	cf 93       	push	r28
    16ca:	df 92       	push	r13
    16cc:	cf 92       	push	r12
    16ce:	0e 94 02 15 	call	0x2a04	; 0x2a04 <printf>
    16d2:	21 96       	adiw	r28, 0x01	; 1
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	ca 15       	cp	r28, r10
    16e2:	db 05       	cpc	r29, r11
    16e4:	39 f7       	brne	.-50     	; 0x16b4 <_Z10copy_rangePhS_h+0x36>
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	1f 91       	pop	r17
    16ec:	0f 91       	pop	r16
    16ee:	ff 90       	pop	r15
    16f0:	ef 90       	pop	r14
    16f2:	df 90       	pop	r13
    16f4:	cf 90       	pop	r12
    16f6:	bf 90       	pop	r11
    16f8:	af 90       	pop	r10
    16fa:	08 95       	ret

000016fc <_ZN3I2C11set_addressEh>:
    16fc:	66 0f       	add	r22, r22
    16fe:	fc 01       	movw	r30, r24
    1700:	61 83       	std	Z+1, r22	; 0x01
    1702:	08 95       	ret

00001704 <_ZN3I2C12send_addressENS_9DirectionE>:
    1704:	fc 01       	movw	r30, r24
    1706:	61 11       	cpse	r22, r1
    1708:	04 c0       	rjmp	.+8      	; 0x1712 <_ZN3I2C12send_addressENS_9DirectionE+0xe>
    170a:	81 81       	ldd	r24, Z+1	; 0x01
    170c:	81 60       	ori	r24, 0x01	; 1
    170e:	81 83       	std	Z+1, r24	; 0x01
    1710:	03 c0       	rjmp	.+6      	; 0x1718 <_ZN3I2C12send_addressENS_9DirectionE+0x14>
    1712:	81 81       	ldd	r24, Z+1	; 0x01
    1714:	8e 7f       	andi	r24, 0xFE	; 254
    1716:	81 83       	std	Z+1, r24	; 0x01
    1718:	81 81       	ldd	r24, Z+1	; 0x01
    171a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    171e:	84 e8       	ldi	r24, 0x84	; 132
    1720:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1724:	83 e0       	ldi	r24, 0x03	; 3
    1726:	80 83       	st	Z, r24
    1728:	08 95       	ret

0000172a <_ZN3I2C14read_data_byteEv>:
    172a:	fc 01       	movw	r30, r24
    172c:	83 89       	ldd	r24, Z+19	; 0x13
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	24 89       	ldd	r18, Z+20	; 0x14
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	21 50       	subi	r18, 0x01	; 1
    1736:	31 09       	sbc	r19, r1
    1738:	82 17       	cp	r24, r18
    173a:	93 07       	cpc	r25, r19
    173c:	31 f4       	brne	.+12     	; 0x174a <_ZN3I2C14read_data_byteEv+0x20>
    173e:	ac eb       	ldi	r26, 0xBC	; 188
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	9c 91       	ld	r25, X
    1744:	80 e4       	ldi	r24, 0x40	; 64
    1746:	89 27       	eor	r24, r25
    1748:	8c 93       	st	X, r24
    174a:	84 e8       	ldi	r24, 0x84	; 132
    174c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1750:	86 e0       	ldi	r24, 0x06	; 6
    1752:	80 83       	st	Z, r24
    1754:	08 95       	ret

00001756 <_ZN3I2C4failEv>:
}

void I2C::fail ()
{
    1756:	fc 01       	movw	r30, r24
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1758:	84 e9       	ldi	r24, 0x94	; 148
    175a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	index = 0;
    175e:	13 8a       	std	Z+19, r1	; 0x13
	state = START;
    1760:	10 82       	st	Z, r1
	++fail_count;
    1762:	85 89       	ldd	r24, Z+21	; 0x15
    1764:	8f 5f       	subi	r24, 0xFF	; 255
    1766:	85 8b       	std	Z+21, r24	; 0x15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1768:	85 e3       	ldi	r24, 0x35	; 53
    176a:	8a 95       	dec	r24
    176c:	f1 f7       	brne	.-4      	; 0x176a <_ZN3I2C4failEv+0x14>
    176e:	00 00       	nop
    1770:	08 95       	ret

00001772 <_ZN3I2C12verify_startEv>:
	TWCR = (1 << TWSTA) | (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
	state = VERIFY_START;
}

void I2C::verify_start ()
{
    1772:	fc 01       	movw	r30, r24
	}
}

bool interrupt_flag_set ()
{
	return TWCR & (1 << TWINT);
    1774:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	state = VERIFY_START;
}

void I2C::verify_start ()
{
	if (!interrupt_flag_set())
    1778:	99 23       	and	r25, r25
    177a:	54 f4       	brge	.+20     	; 0x1790 <_ZN3I2C12verify_startEv+0x1e>
	return TWCR & (1 << TWINT);
}

bool check_status (uint8_t status)
{
	return (TWSR & 0xF8) == status;
    177c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

void I2C::verify_start ()
{
	if (!interrupt_flag_set())
	return;
	if (check_status(TW_START))
    1780:	88 7f       	andi	r24, 0xF8	; 248
    1782:	88 30       	cpi	r24, 0x08	; 8
    1784:	19 f4       	brne	.+6      	; 0x178c <_ZN3I2C12verify_startEv+0x1a>
	state = SEND_ADDRESS;
    1786:	82 e0       	ldi	r24, 0x02	; 2
    1788:	80 83       	st	Z, r24
    178a:	08 95       	ret
    178c:	cf 01       	movw	r24, r30
	else
	fail();
    178e:	e3 cf       	rjmp	.-58     	; 0x1756 <_ZN3I2C4failEv>
    1790:	08 95       	ret

00001792 <_ZN3I2C25verify_write_address_sentEv>:
	TWCR = (1 << TWINT) | (1 << TWEN);
	state = VERIFY_ADDRESS;
}

void I2C::verify_write_address_sent ()
{
    1792:	fc 01       	movw	r30, r24
	}
}

bool interrupt_flag_set ()
{
	return TWCR & (1 << TWINT);
    1794:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	state = VERIFY_ADDRESS;
}

void I2C::verify_write_address_sent ()
{
	if (interrupt_flag_set())
    1798:	99 23       	and	r25, r25
    179a:	54 f4       	brge	.+20     	; 0x17b0 <_ZN3I2C25verify_write_address_sentEv+0x1e>
	return TWCR & (1 << TWINT);
}

bool check_status (uint8_t status)
{
	return (TWSR & 0xF8) == status;
    179c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

void I2C::verify_write_address_sent ()
{
	if (interrupt_flag_set())
	{
		if (check_status(TW_MT_SLA_ACK))
    17a0:	88 7f       	andi	r24, 0xF8	; 248
    17a2:	88 31       	cpi	r24, 0x18	; 24
    17a4:	19 f4       	brne	.+6      	; 0x17ac <_ZN3I2C25verify_write_address_sentEv+0x1a>
		state = SEND_BYTE;
    17a6:	84 e0       	ldi	r24, 0x04	; 4
    17a8:	80 83       	st	Z, r24
    17aa:	08 95       	ret
    17ac:	cf 01       	movw	r24, r30
		else
		fail();
    17ae:	d3 cf       	rjmp	.-90     	; 0x1756 <_ZN3I2C4failEv>
    17b0:	08 95       	ret

000017b2 <_ZN3I2C24verify_read_address_sentEv>:
	}
}

void I2C::verify_read_address_sent ()
{
    17b2:	fc 01       	movw	r30, r24
	}
}

bool interrupt_flag_set ()
{
	return TWCR & (1 << TWINT);
    17b4:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	}
}

void I2C::verify_read_address_sent ()
{
	if (interrupt_flag_set())
    17b8:	99 23       	and	r25, r25
    17ba:	54 f4       	brge	.+20     	; 0x17d0 <_ZN3I2C24verify_read_address_sentEv+0x1e>
	return TWCR & (1 << TWINT);
}

bool check_status (uint8_t status)
{
	return (TWSR & 0xF8) == status;
    17bc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

void I2C::verify_read_address_sent ()
{
	if (interrupt_flag_set())
	{
		if (check_status(TW_MR_SLA_ACK))
    17c0:	88 7f       	andi	r24, 0xF8	; 248
    17c2:	80 34       	cpi	r24, 0x40	; 64
    17c4:	19 f4       	brne	.+6      	; 0x17cc <_ZN3I2C24verify_read_address_sentEv+0x1a>
		state = READ_BYTE;
    17c6:	85 e0       	ldi	r24, 0x05	; 5
    17c8:	80 83       	st	Z, r24
    17ca:	08 95       	ret
    17cc:	cf 01       	movw	r24, r30
		else
		fail();
    17ce:	c3 cf       	rjmp	.-122    	; 0x1756 <_ZN3I2C4failEv>
    17d0:	08 95       	ret

000017d2 <_ZN3I2C16verify_data_sentEv>:
	}
}

bool interrupt_flag_set ()
{
	return TWCR & (1 << TWINT);
    17d2:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	state = VERIFY_DATA;
}

void I2C::verify_data_sent ()
{
	if (!interrupt_flag_set())
    17d6:	22 23       	and	r18, r18
    17d8:	a4 f4       	brge	.+40     	; 0x1802 <_ZN3I2C16verify_data_sentEv+0x30>
	return TWCR & (1 << TWINT);
}

bool check_status (uint8_t status)
{
	return (TWSR & 0xF8) == status;
    17da:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

void I2C::verify_data_sent ()
{
	if (!interrupt_flag_set())
	return;
	if (check_status(TW_MT_DATA_ACK))
    17de:	28 7f       	andi	r18, 0xF8	; 248
    17e0:	28 32       	cpi	r18, 0x28	; 40
    17e2:	71 f4       	brne	.+28     	; 0x1800 <_ZN3I2C16verify_data_sentEv+0x2e>
	{
		if (++index < size)
    17e4:	fc 01       	movw	r30, r24
    17e6:	23 89       	ldd	r18, Z+19	; 0x13
    17e8:	2f 5f       	subi	r18, 0xFF	; 255
    17ea:	23 8b       	std	Z+19, r18	; 0x13
    17ec:	34 89       	ldd	r19, Z+20	; 0x14
    17ee:	23 17       	cp	r18, r19
    17f0:	18 f4       	brcc	.+6      	; 0x17f8 <_ZN3I2C16verify_data_sentEv+0x26>
		state = SEND_BYTE;
    17f2:	24 e0       	ldi	r18, 0x04	; 4
    17f4:	20 83       	st	Z, r18
    17f6:	08 95       	ret
		else
		state = STOP;
    17f8:	27 e0       	ldi	r18, 0x07	; 7
    17fa:	fc 01       	movw	r30, r24
    17fc:	20 83       	st	Z, r18
    17fe:	08 95       	ret
	}
	else
	fail();
    1800:	aa cf       	rjmp	.-172    	; 0x1756 <_ZN3I2C4failEv>
    1802:	08 95       	ret

00001804 <_ZN3I2C5writeEPhh>:
{
	this->address = _address << 1;
}

int I2C::write (uint8_t * data, uint8_t size)
{
    1804:	9f 92       	push	r9
    1806:	af 92       	push	r10
    1808:	bf 92       	push	r11
    180a:	cf 92       	push	r12
    180c:	df 92       	push	r13
    180e:	ef 92       	push	r14
    1810:	ff 92       	push	r15
    1812:	0f 93       	push	r16
    1814:	1f 93       	push	r17
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	ec 01       	movw	r28, r24
    181c:	7b 01       	movw	r14, r22
    181e:	14 2f       	mov	r17, r20

	copy_range(data, buffer, size);
    1820:	bc 01       	movw	r22, r24
    1822:	6e 5f       	subi	r22, 0xFE	; 254
    1824:	7f 4f       	sbci	r23, 0xFF	; 255
    1826:	c7 01       	movw	r24, r14
    1828:	2a df       	rcall	.-428    	; 0x167e <_Z10copy_rangePhS_h>

/*------------------------ Internal Helper Functions -------------------------*/

void I2C::reset (uint8_t size)
{
	TWBR = (uint8_t)TWBR_VALUE;
    182a:	88 e4       	ldi	r24, 0x48	; 72
    182c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	this->size = size;
    1830:	1c 8b       	std	Y+20, r17	; 0x14
	index = 0;
    1832:	1b 8a       	std	Y+19, r1	; 0x13
	fail_count = 0;
    1834:	1d 8a       	std	Y+21, r1	; 0x15
	state = START;
    1836:	18 82       	st	Y, r1
int I2C::write (uint8_t * data, uint8_t size)
{

	copy_range(data, buffer, size);
	reset(size);
	while (state != DONE)
    1838:	e0 e0       	ldi	r30, 0x00	; 0
	}
}

void I2C::send_data_byte (uint8_t data)
{
	TWDR = data;
    183a:	0f 2e       	mov	r0, r31
    183c:	fb eb       	ldi	r31, 0xBB	; 187
    183e:	cf 2e       	mov	r12, r31
    1840:	d1 2c       	mov	r13, r1
    1842:	f0 2d       	mov	r31, r0
	TWCR = (1 << TWINT) | (1 << TWEN);
    1844:	0c eb       	ldi	r16, 0xBC	; 188
    1846:	10 e0       	ldi	r17, 0x00	; 0
    1848:	0f 2e       	mov	r0, r31
    184a:	f4 e8       	ldi	r31, 0x84	; 132
    184c:	9f 2e       	mov	r9, r31
    184e:	f0 2d       	mov	r31, r0
	state = VERIFY_DATA;
    1850:	0f 2e       	mov	r0, r31
    1852:	f6 e0       	ldi	r31, 0x06	; 6
    1854:	af 2e       	mov	r10, r31
    1856:	f0 2d       	mov	r31, r0
	state = START;
}

void I2C::start ()
{
	TWCR = (1 << TWSTA) | (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1858:	0f 2e       	mov	r0, r31
    185a:	f4 ee       	ldi	r31, 0xE4	; 228
    185c:	bf 2e       	mov	r11, r31
    185e:	f0 2d       	mov	r31, r0
    1860:	03 c0       	rjmp	.+6      	; 0x1868 <_ZN3I2C5writeEPhh+0x64>
int I2C::write (uint8_t * data, uint8_t size)
{

	copy_range(data, buffer, size);
	reset(size);
	while (state != DONE)
    1862:	e8 81       	ld	r30, Y
    1864:	e8 30       	cpi	r30, 0x08	; 8
    1866:	99 f1       	breq	.+102    	; 0x18ce <_ZN3I2C5writeEPhh+0xca>
	{
		if (fail_count >= MAX_FAIL_COUNT)
    1868:	8d 89       	ldd	r24, Y+21	; 0x15
    186a:	85 30       	cpi	r24, 0x05	; 5
    186c:	98 f5       	brcc	.+102    	; 0x18d4 <_ZN3I2C5writeEPhh+0xd0>
		return I2C_FAILURE;
		switch (state)
    186e:	8e 2f       	mov	r24, r30
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	88 30       	cpi	r24, 0x08	; 8
    1874:	91 05       	cpc	r25, r1
    1876:	40 f5       	brcc	.+80     	; 0x18c8 <_ZN3I2C5writeEPhh+0xc4>
    1878:	fc 01       	movw	r30, r24
    187a:	ed 56       	subi	r30, 0x6D	; 109
    187c:	ff 4f       	sbci	r31, 0xFF	; 255
    187e:	0c 94 da 14 	jmp	0x29b4	; 0x29b4 <__tablejump2__>
	state = START;
}

void I2C::start ()
{
	TWCR = (1 << TWSTA) | (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1882:	f8 01       	movw	r30, r16
    1884:	b0 82       	st	Z, r11
	state = VERIFY_START;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	88 83       	st	Y, r24
    188a:	2a c0       	rjmp	.+84     	; 0x18e0 <_ZN3I2C5writeEPhh+0xdc>
		switch (state)
		{
			case START:
			start();
			when VERIFY_START:
			verify_start();
    188c:	ce 01       	movw	r24, r28
    188e:	71 df       	rcall	.-286    	; 0x1772 <_ZN3I2C12verify_startEv>
			when SEND_ADDRESS:
    1890:	e8 cf       	rjmp	.-48     	; 0x1862 <_ZN3I2C5writeEPhh+0x5e>
			send_address(WRITE);
    1892:	61 e0       	ldi	r22, 0x01	; 1
    1894:	ce 01       	movw	r24, r28
    1896:	36 df       	rcall	.-404    	; 0x1704 <_ZN3I2C12send_addressENS_9DirectionE>
			when VERIFY_ADDRESS:
    1898:	e4 cf       	rjmp	.-56     	; 0x1862 <_ZN3I2C5writeEPhh+0x5e>
			verify_write_address_sent();
    189a:	ce 01       	movw	r24, r28
    189c:	7a df       	rcall	.-268    	; 0x1792 <_ZN3I2C25verify_write_address_sentEv>
    189e:	e1 cf       	rjmp	.-62     	; 0x1862 <_ZN3I2C5writeEPhh+0x5e>
			when SEND_BYTE:
    18a0:	8b 89       	ldd	r24, Y+19	; 0x13
			send_data_byte(data[index]);
    18a2:	f7 01       	movw	r30, r14
    18a4:	e8 0f       	add	r30, r24
    18a6:	f1 1d       	adc	r31, r1
    18a8:	80 81       	ld	r24, Z
    18aa:	f6 01       	movw	r30, r12
	}
}

void I2C::send_data_byte (uint8_t data)
{
	TWDR = data;
    18ac:	80 83       	st	Z, r24
    18ae:	f8 01       	movw	r30, r16
	TWCR = (1 << TWINT) | (1 << TWEN);
    18b0:	90 82       	st	Z, r9
	state = VERIFY_DATA;
    18b2:	a8 82       	st	Y, r10
    18b4:	15 c0       	rjmp	.+42     	; 0x18e0 <_ZN3I2C5writeEPhh+0xdc>
			verify_write_address_sent();
			when SEND_BYTE:
			send_data_byte(data[index]);

			when VERIFY_DATA:
			verify_data_sent();
    18b6:	ce 01       	movw	r24, r28
    18b8:	8c df       	rcall	.-232    	; 0x17d2 <_ZN3I2C16verify_data_sentEv>
    18ba:	d3 cf       	rjmp	.-90     	; 0x1862 <_ZN3I2C5writeEPhh+0x5e>
			when STOP:
    18bc:	84 e9       	ldi	r24, 0x94	; 148
	fail();
}

void I2C::stop ()
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    18be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    18c2:	88 e0       	ldi	r24, 0x08	; 8
	state = DONE;
    18c4:	88 83       	st	Y, r24
    18c6:	09 c0       	rjmp	.+18     	; 0x18da <_ZN3I2C5writeEPhh+0xd6>
    18c8:	88 e0       	ldi	r24, 0x08	; 8
			when VERIFY_DATA:
			verify_data_sent();
			when STOP:
			stop();
			otherwise:
			state = DONE;
    18ca:	88 83       	st	Y, r24
    18cc:	06 c0       	rjmp	.+12     	; 0x18da <_ZN3I2C5writeEPhh+0xd6>
    18ce:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return I2C_SUCCESS;
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	08 c0       	rjmp	.+16     	; 0x18e4 <_ZN3I2C5writeEPhh+0xe0>
    18d4:	80 e0       	ldi	r24, 0x00	; 0
	copy_range(data, buffer, size);
	reset(size);
	while (state != DONE)
	{
		if (fail_count >= MAX_FAIL_COUNT)
		return I2C_FAILURE;
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	05 c0       	rjmp	.+10     	; 0x18e4 <_ZN3I2C5writeEPhh+0xe0>
    18da:	81 e0       	ldi	r24, 0x01	; 1
			stop();
			otherwise:
			state = DONE;
		}
	}
	return I2C_SUCCESS;
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <_ZN3I2C5writeEPhh+0xe0>
    18e0:	e8 81       	ld	r30, Y
int I2C::write (uint8_t * data, uint8_t size)
{

	copy_range(data, buffer, size);
	reset(size);
	while (state != DONE)
    18e2:	c2 cf       	rjmp	.-124    	; 0x1868 <_ZN3I2C5writeEPhh+0x64>
    18e4:	df 91       	pop	r29
			otherwise:
			state = DONE;
		}
	}
	return I2C_SUCCESS;
}
    18e6:	cf 91       	pop	r28
    18e8:	1f 91       	pop	r17
    18ea:	0f 91       	pop	r16
    18ec:	ff 90       	pop	r15
    18ee:	ef 90       	pop	r14
    18f0:	df 90       	pop	r13
    18f2:	cf 90       	pop	r12
    18f4:	bf 90       	pop	r11
    18f6:	af 90       	pop	r10
    18f8:	9f 90       	pop	r9
    18fa:	08 95       	ret

000018fc <_ZN3I2C16verify_data_readEv>:
    18fc:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	fail();
}

void I2C::verify_data_read ()
{
	if (!interrupt_flag_set())
    1900:	22 23       	and	r18, r18
    1902:	fc f4       	brge	.+62     	; 0x1942 <_ZN3I2C16verify_data_readEv+0x46>
	return;
	bool last_byte = !(TWCR & (1 << TWEA));
    1904:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	uint8_t status = last_byte ? TW_MR_DATA_NACK : TW_MR_DATA_ACK;
    1908:	26 ff       	sbrs	r18, 6
    190a:	03 c0       	rjmp	.+6      	; 0x1912 <_ZN3I2C16verify_data_readEv+0x16>
    190c:	40 e5       	ldi	r20, 0x50	; 80
	State next_state = last_byte ? STOP : READ_BYTE;
    190e:	65 e0       	ldi	r22, 0x05	; 5
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <_ZN3I2C16verify_data_readEv+0x1a>
void I2C::verify_data_read ()
{
	if (!interrupt_flag_set())
	return;
	bool last_byte = !(TWCR & (1 << TWEA));
	uint8_t status = last_byte ? TW_MR_DATA_NACK : TW_MR_DATA_ACK;
    1912:	48 e5       	ldi	r20, 0x58	; 88
	State next_state = last_byte ? STOP : READ_BYTE;
    1914:	67 e0       	ldi	r22, 0x07	; 7
	return TWCR & (1 << TWINT);
}

bool check_status (uint8_t status)
{
	return (TWSR & 0xF8) == status;
    1916:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	if (!interrupt_flag_set())
	return;
	bool last_byte = !(TWCR & (1 << TWEA));
	uint8_t status = last_byte ? TW_MR_DATA_NACK : TW_MR_DATA_ACK;
	State next_state = last_byte ? STOP : READ_BYTE;
	if (check_status(status))
    191a:	28 7f       	andi	r18, 0xF8	; 248
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	50 e0       	ldi	r21, 0x00	; 0
    1920:	24 17       	cp	r18, r20
    1922:	35 07       	cpc	r19, r21
    1924:	69 f4       	brne	.+26     	; 0x1940 <_ZN3I2C16verify_data_readEv+0x44>
	{
		buffer[index++] = TWDR;
    1926:	fc 01       	movw	r30, r24
    1928:	23 89       	ldd	r18, Z+19	; 0x13
    192a:	31 e0       	ldi	r19, 0x01	; 1
    192c:	32 0f       	add	r19, r18
    192e:	33 8b       	std	Z+19, r19	; 0x13
    1930:	30 91 bb 00 	lds	r19, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1934:	e2 0f       	add	r30, r18
    1936:	f1 1d       	adc	r31, r1
    1938:	32 83       	std	Z+2, r19	; 0x02
		state = next_state;
    193a:	fc 01       	movw	r30, r24
    193c:	60 83       	st	Z, r22
    193e:	08 95       	ret
	}
	else
	fail();
    1940:	0a cf       	rjmp	.-492    	; 0x1756 <_ZN3I2C4failEv>
    1942:	08 95       	ret

00001944 <_ZN3I2C4readEPhh>:
	}
	return I2C_SUCCESS;
}

int I2C::read (uint8_t * data, uint8_t size)
{
    1944:	bf 92       	push	r11
    1946:	cf 92       	push	r12
    1948:	df 92       	push	r13
    194a:	ef 92       	push	r14
    194c:	ff 92       	push	r15
    194e:	0f 93       	push	r16
    1950:	1f 93       	push	r17
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	ec 01       	movw	r28, r24
    1958:	7b 01       	movw	r14, r22
    195a:	c4 2e       	mov	r12, r20

/*------------------------ Internal Helper Functions -------------------------*/

void I2C::reset (uint8_t size)
{
	TWBR = (uint8_t)TWBR_VALUE;
    195c:	88 e4       	ldi	r24, 0x48	; 72
    195e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	this->size = size;
    1962:	4c 8b       	std	Y+20, r20	; 0x14
	index = 0;
    1964:	1b 8a       	std	Y+19, r1	; 0x13
	fail_count = 0;
    1966:	1d 8a       	std	Y+21, r1	; 0x15
	state = START;
    1968:	18 82       	st	Y, r1
}

int I2C::read (uint8_t * data, uint8_t size)
{
	reset(size);
	while (state != DONE)
    196a:	e0 e0       	ldi	r30, 0x00	; 0
	state = START;
}

void I2C::start ()
{
	TWCR = (1 << TWSTA) | (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    196c:	0c eb       	ldi	r16, 0xBC	; 188
    196e:	10 e0       	ldi	r17, 0x00	; 0
    1970:	0f 2e       	mov	r0, r31
    1972:	f4 ee       	ldi	r31, 0xE4	; 228
    1974:	bf 2e       	mov	r11, r31
    1976:	f0 2d       	mov	r31, r0
	state = VERIFY_START;
    1978:	dd 24       	eor	r13, r13
    197a:	d3 94       	inc	r13
    197c:	03 c0       	rjmp	.+6      	; 0x1984 <_ZN3I2C4readEPhh+0x40>
}

int I2C::read (uint8_t * data, uint8_t size)
{
	reset(size);
	while (state != DONE)
    197e:	e8 81       	ld	r30, Y
    1980:	e8 30       	cpi	r30, 0x08	; 8
    1982:	51 f1       	breq	.+84     	; 0x19d8 <_ZN3I2C4readEPhh+0x94>
	{
		if (fail_count >= MAX_FAIL_COUNT)
    1984:	8d 89       	ldd	r24, Y+21	; 0x15
    1986:	85 30       	cpi	r24, 0x05	; 5
    1988:	78 f5       	brcc	.+94     	; 0x19e8 <_ZN3I2C4readEPhh+0xa4>
		return I2C_FAILURE;
		switch (state)
    198a:	8e 2f       	mov	r24, r30
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	88 30       	cpi	r24, 0x08	; 8
    1990:	91 05       	cpc	r25, r1
    1992:	00 f5       	brcc	.+64     	; 0x19d4 <_ZN3I2C4readEPhh+0x90>
    1994:	fc 01       	movw	r30, r24
    1996:	e5 56       	subi	r30, 0x65	; 101
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	0c 94 da 14 	jmp	0x29b4	; 0x29b4 <__tablejump2__>
	state = START;
}

void I2C::start ()
{
	TWCR = (1 << TWSTA) | (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    199e:	f8 01       	movw	r30, r16
    19a0:	b0 82       	st	Z, r11
	state = VERIFY_START;
    19a2:	d8 82       	st	Y, r13
}

int I2C::read (uint8_t * data, uint8_t size)
{
	reset(size);
	while (state != DONE)
    19a4:	ed 2d       	mov	r30, r13
    19a6:	ee cf       	rjmp	.-36     	; 0x1984 <_ZN3I2C4readEPhh+0x40>
		switch (state)
		{
			case START:
			start();
			when VERIFY_START:
			verify_start();
    19a8:	ce 01       	movw	r24, r28
    19aa:	e3 de       	rcall	.-570    	; 0x1772 <_ZN3I2C12verify_startEv>
			when SEND_ADDRESS:
    19ac:	e8 cf       	rjmp	.-48     	; 0x197e <_ZN3I2C4readEPhh+0x3a>
			send_address(READ);
    19ae:	60 e0       	ldi	r22, 0x00	; 0
    19b0:	ce 01       	movw	r24, r28
    19b2:	a8 de       	rcall	.-688    	; 0x1704 <_ZN3I2C12send_addressENS_9DirectionE>
			when VERIFY_ADDRESS:
			verify_read_address_sent();
    19b4:	e4 cf       	rjmp	.-56     	; 0x197e <_ZN3I2C4readEPhh+0x3a>
    19b6:	ce 01       	movw	r24, r28
			when READ_BYTE:
    19b8:	fc de       	rcall	.-520    	; 0x17b2 <_ZN3I2C24verify_read_address_sentEv>
			read_data_byte();
    19ba:	e1 cf       	rjmp	.-62     	; 0x197e <_ZN3I2C4readEPhh+0x3a>
    19bc:	ce 01       	movw	r24, r28
			when VERIFY_DATA:
    19be:	b5 de       	rcall	.-662    	; 0x172a <_ZN3I2C14read_data_byteEv>
			verify_data_read();
    19c0:	de cf       	rjmp	.-68     	; 0x197e <_ZN3I2C4readEPhh+0x3a>
    19c2:	ce 01       	movw	r24, r28
    19c4:	9b df       	rcall	.-202    	; 0x18fc <_ZN3I2C16verify_data_readEv>
			when STOP:
    19c6:	db cf       	rjmp	.-74     	; 0x197e <_ZN3I2C4readEPhh+0x3a>
	fail();
}

void I2C::stop ()
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    19c8:	84 e9       	ldi	r24, 0x94	; 148
    19ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	state = DONE;
    19ce:	88 e0       	ldi	r24, 0x08	; 8
    19d0:	88 83       	st	Y, r24
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <_ZN3I2C4readEPhh+0x94>
			when VERIFY_DATA:
			verify_data_read();
			when STOP:
			stop();
			otherwise:
			state = DONE;
    19d4:	88 e0       	ldi	r24, 0x08	; 8
		}
	}
	copy_range(buffer, data, size);
    19d6:	88 83       	st	Y, r24
    19d8:	4c 2d       	mov	r20, r12
    19da:	b7 01       	movw	r22, r14
    19dc:	ce 01       	movw	r24, r28
    19de:	02 96       	adiw	r24, 0x02	; 2
    19e0:	4e de       	rcall	.-868    	; 0x167e <_Z10copy_rangePhS_h>
	return I2C_SUCCESS;
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <_ZN3I2C4readEPhh+0xa8>
{
	reset(size);
	while (state != DONE)
	{
		if (fail_count >= MAX_FAIL_COUNT)
		return I2C_FAILURE;
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	90 e0       	ldi	r25, 0x00	; 0
			state = DONE;
		}
	}
	copy_range(buffer, data, size);
	return I2C_SUCCESS;
}
    19ec:	df 91       	pop	r29
    19ee:	cf 91       	pop	r28
    19f0:	1f 91       	pop	r17
    19f2:	0f 91       	pop	r16
    19f4:	ff 90       	pop	r15
    19f6:	ef 90       	pop	r14
    19f8:	df 90       	pop	r13
    19fa:	cf 90       	pop	r12
    19fc:	bf 90       	pop	r11
    19fe:	08 95       	ret

00001a00 <_ZN5I2CIOC1Ev>:
	Wire.read (&receivedVal,1 );
	retVal = ( _dirMask &  receivedVal);

//	}
	return ( retVal );
}
    1a00:	fc 01       	movw	r30, r24
    1a02:	12 82       	std	Z+2, r1	; 0x02
    1a04:	8f ef       	ldi	r24, 0xFF	; 255
    1a06:	81 83       	std	Z+1, r24	; 0x01
    1a08:	10 82       	st	Z, r1
    1a0a:	13 82       	std	Z+3, r1	; 0x03
    1a0c:	08 95       	ret

00001a0e <_ZN5I2CIO5beginEh>:
    1a0e:	cf 93       	push	r28
    1a10:	df 93       	push	r29
    1a12:	ec 01       	movw	r28, r24
    1a14:	6a 83       	std	Y+2, r22	; 0x02
    1a16:	8c e3       	ldi	r24, 0x3C	; 60
    1a18:	93 e0       	ldi	r25, 0x03	; 3
    1a1a:	70 de       	rcall	.-800    	; 0x16fc <_ZN3I2C11set_addressEh>
    1a1c:	41 e0       	ldi	r20, 0x01	; 1
    1a1e:	be 01       	movw	r22, r28
    1a20:	8c e3       	ldi	r24, 0x3C	; 60
    1a22:	93 e0       	ldi	r25, 0x03	; 3
    1a24:	8f df       	rcall	.-226    	; 0x1944 <_ZN3I2C4readEPhh>
    1a26:	88 83       	st	Y, r24
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	df 91       	pop	r29
    1a2e:	cf 91       	pop	r28
    1a30:	08 95       	ret

00001a32 <_ZN5I2CIO8portModeEh>:
    1a32:	61 11       	cpse	r22, r1
    1a34:	04 c0       	rjmp	.+8      	; 0x1a3e <_ZN5I2CIO8portModeEh+0xc>
    1a36:	2f ef       	ldi	r18, 0xFF	; 255
    1a38:	fc 01       	movw	r30, r24
    1a3a:	21 83       	std	Z+1, r18	; 0x01
    1a3c:	08 95       	ret
    1a3e:	fc 01       	movw	r30, r24
    1a40:	11 82       	std	Z+1, r1	; 0x01
    1a42:	08 95       	ret

00001a44 <_ZN5I2CIO5writeEh>:
	// outputs updating the output shadow of the device

	//
	// 15-FEB-2018 - fix, all I/Os initialized as input must be written as HIGH
	//    _shadow = ( value & ~(_dirMask) );
	_shadow = ( value | _dirMask );
    1a44:	fc 01       	movw	r30, r24
    1a46:	21 81       	ldd	r18, Z+1	; 0x01
    1a48:	62 2b       	or	r22, r18
    1a4a:	60 83       	st	Z, r22


	Wire.write ( &_shadow,1 );
    1a4c:	41 e0       	ldi	r20, 0x01	; 1
    1a4e:	bc 01       	movw	r22, r24
    1a50:	8c e3       	ldi	r24, 0x3C	; 60
    1a52:	93 e0       	ldi	r25, 0x03	; 3
    1a54:	d7 de       	rcall	.-594    	; 0x1804 <_ZN3I2C5writeEPhh>

//	}
	return ( (status == 0) );
}
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	08 95       	ret

00001a5c <_ZN3LCD15setBacklightPinEh14t_backlightPol>:
// Switch fully on the LCD (backlight and LCD)
void LCD::on ( void )
{
	display();
	backlight();
}
    1a5c:	08 95       	ret

00001a5e <_ZN3LCD12setBacklightEh>:
    1a5e:	08 95       	ret

00001a60 <_ZN3LCD4sendEhh>:
    1a60:	08 95       	ret

00001a62 <_ZN3LCD5writeEh>:
    1a62:	dc 01       	movw	r26, r24
    1a64:	ed 91       	ld	r30, X+
    1a66:	fc 91       	ld	r31, X
    1a68:	00 84       	ldd	r0, Z+8	; 0x08
    1a6a:	f1 85       	ldd	r31, Z+9	; 0x09
    1a6c:	e0 2d       	mov	r30, r0
    1a6e:	41 e0       	ldi	r20, 0x01	; 1
    1a70:	09 95       	icall
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	08 95       	ret

00001a78 <_ZN3LCDC1Ev>:
    1a78:	20 e1       	ldi	r18, 0x10	; 16
    1a7a:	32 e0       	ldi	r19, 0x02	; 2
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	31 83       	std	Z+1, r19	; 0x01
    1a80:	20 83       	st	Z, r18
    1a82:	08 95       	ret

00001a84 <_ZN3LCD9backlightEv>:
    1a84:	dc 01       	movw	r26, r24
    1a86:	ed 91       	ld	r30, X+
    1a88:	fc 91       	ld	r31, X
    1a8a:	04 80       	ldd	r0, Z+4	; 0x04
    1a8c:	f5 81       	ldd	r31, Z+5	; 0x05
    1a8e:	e0 2d       	mov	r30, r0
    1a90:	6f ef       	ldi	r22, 0xFF	; 255
    1a92:	09 95       	icall
    1a94:	08 95       	ret

00001a96 <_ZN3LCD7commandEh>:
    1a96:	dc 01       	movw	r26, r24
    1a98:	ed 91       	ld	r30, X+
    1a9a:	fc 91       	ld	r31, X
    1a9c:	00 84       	ldd	r0, Z+8	; 0x08
    1a9e:	f1 85       	ldd	r31, Z+9	; 0x09
    1aa0:	e0 2d       	mov	r30, r0
    1aa2:	40 e0       	ldi	r20, 0x00	; 0
    1aa4:	09 95       	icall
    1aa6:	08 95       	ret

00001aa8 <_ZN3LCD5clearEv>:
    1aa8:	61 e0       	ldi	r22, 0x01	; 1
    1aaa:	f5 df       	rcall	.-22     	; 0x1a96 <_ZN3LCD7commandEh>
    1aac:	8f e3       	ldi	r24, 0x3F	; 63
    1aae:	9f e1       	ldi	r25, 0x1F	; 31
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	f1 f7       	brne	.-4      	; 0x1ab0 <_ZN3LCD5clearEv+0x8>
    1ab4:	00 c0       	rjmp	.+0      	; 0x1ab6 <_ZN3LCD5clearEv+0xe>
    1ab6:	00 00       	nop
    1ab8:	08 95       	ret

00001aba <_ZN3LCD7displayEv>:
    1aba:	fc 01       	movw	r30, r24
    1abc:	63 81       	ldd	r22, Z+3	; 0x03
    1abe:	26 2f       	mov	r18, r22
    1ac0:	24 60       	ori	r18, 0x04	; 4
    1ac2:	23 83       	std	Z+3, r18	; 0x03
    1ac4:	6c 60       	ori	r22, 0x0C	; 12
    1ac6:	e7 cf       	rjmp	.-50     	; 0x1a96 <_ZN3LCD7commandEh>
    1ac8:	08 95       	ret

00001aca <_ZN3LCD5beginEhhh>:
// can't assume that its in that state when a application starts (and the
// LiquidCrystal constructor is called).
// A call to begin() will reinitialize the LCD.
//
void LCD::begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
    1aca:	cf 93       	push	r28
    1acc:	df 93       	push	r29
    1ace:	ec 01       	movw	r28, r24
	if (lines > 1)
    1ad0:	42 30       	cpi	r20, 0x02	; 2
    1ad2:	18 f0       	brcs	.+6      	; 0x1ada <_ZN3LCD5beginEhhh+0x10>
	{
		_displayfunction |= LCD_2LINE;
    1ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad6:	88 60       	ori	r24, 0x08	; 8
    1ad8:	8a 83       	std	Y+2, r24	; 0x02
	}
	_numlines = lines;
    1ada:	4d 83       	std	Y+5, r20	; 0x05
	_cols = cols;
    1adc:	6e 83       	std	Y+6, r22	; 0x06

	// for some 1 line displays you can select a 10 pixel high font
	// ------------------------------------------------------------
	if ((dotsize != LCD_5x8DOTS) && (lines == 1))
    1ade:	22 23       	and	r18, r18
    1ae0:	29 f0       	breq	.+10     	; 0x1aec <_ZN3LCD5beginEhhh+0x22>
    1ae2:	41 30       	cpi	r20, 0x01	; 1
    1ae4:	19 f4       	brne	.+6      	; 0x1aec <_ZN3LCD5beginEhhh+0x22>
	{
		_displayfunction |= LCD_5x10DOTS;
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	84 60       	ori	r24, 0x04	; 4
    1aea:	8a 83       	std	Y+2, r24	; 0x02
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1aec:	2f ef       	ldi	r18, 0xFF	; 255
    1aee:	81 ee       	ldi	r24, 0xE1	; 225
    1af0:	94 e0       	ldi	r25, 0x04	; 4
    1af2:	21 50       	subi	r18, 0x01	; 1
    1af4:	80 40       	sbci	r24, 0x00	; 0
    1af6:	90 40       	sbci	r25, 0x00	; 0
    1af8:	e1 f7       	brne	.-8      	; 0x1af2 <_ZN3LCD5beginEhhh+0x28>
    1afa:	00 c0       	rjmp	.+0      	; 0x1afc <_ZN3LCD5beginEhhh+0x32>
    1afc:	00 00       	nop
	// ---------------------------------------------------------------------------
	_delay_ms (100); // 100ms delay

	//put the LCD into 4 bit or 8 bit mode
	// -------------------------------------
	if (! (_displayfunction & LCD_8BITMODE))
    1afe:	6a 81       	ldd	r22, Y+2	; 0x02
    1b00:	64 fd       	sbrc	r22, 4
    1b02:	3d c0       	rjmp	.+122    	; 0x1b7e <_ZN3LCD5beginEhhh+0xb4>
		// this is according to the hitachi HD44780 datasheet
		// figure 24, pg 46

		// we start in 8bit mode, try to set 4 bit mode
		// Special case of "Function Set"
		send(0x03, FOUR_BITS);
    1b04:	e8 81       	ld	r30, Y
    1b06:	f9 81       	ldd	r31, Y+1	; 0x01
    1b08:	00 84       	ldd	r0, Z+8	; 0x08
    1b0a:	f1 85       	ldd	r31, Z+9	; 0x09
    1b0c:	e0 2d       	mov	r30, r0
    1b0e:	42 e0       	ldi	r20, 0x02	; 2
    1b10:	63 e0       	ldi	r22, 0x03	; 3
    1b12:	ce 01       	movw	r24, r28
    1b14:	09 95       	icall
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b16:	8f e4       	ldi	r24, 0x4F	; 79
    1b18:	96 e4       	ldi	r25, 0x46	; 70
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	f1 f7       	brne	.-4      	; 0x1b1a <_ZN3LCD5beginEhhh+0x50>
    1b1e:	00 c0       	rjmp	.+0      	; 0x1b20 <_ZN3LCD5beginEhhh+0x56>
    1b20:	00 00       	nop
		_delay_us(4500); // wait min 4.1ms

		// second try
		send ( 0x03, FOUR_BITS );
    1b22:	e8 81       	ld	r30, Y
    1b24:	f9 81       	ldd	r31, Y+1	; 0x01
    1b26:	00 84       	ldd	r0, Z+8	; 0x08
    1b28:	f1 85       	ldd	r31, Z+9	; 0x09
    1b2a:	e0 2d       	mov	r30, r0
    1b2c:	42 e0       	ldi	r20, 0x02	; 2
    1b2e:	63 e0       	ldi	r22, 0x03	; 3
    1b30:	ce 01       	movw	r24, r28
    1b32:	09 95       	icall
    1b34:	87 e5       	ldi	r24, 0x57	; 87
    1b36:	92 e0       	ldi	r25, 0x02	; 2
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	f1 f7       	brne	.-4      	; 0x1b38 <_ZN3LCD5beginEhhh+0x6e>
    1b3c:	00 c0       	rjmp	.+0      	; 0x1b3e <_ZN3LCD5beginEhhh+0x74>
    1b3e:	00 00       	nop
		_delay_us(150); // wait min 100us

		// third go!
		send( 0x03, FOUR_BITS );
    1b40:	e8 81       	ld	r30, Y
    1b42:	f9 81       	ldd	r31, Y+1	; 0x01
    1b44:	00 84       	ldd	r0, Z+8	; 0x08
    1b46:	f1 85       	ldd	r31, Z+9	; 0x09
    1b48:	e0 2d       	mov	r30, r0
    1b4a:	42 e0       	ldi	r20, 0x02	; 2
    1b4c:	63 e0       	ldi	r22, 0x03	; 3
    1b4e:	ce 01       	movw	r24, r28
    1b50:	09 95       	icall
    1b52:	87 e5       	ldi	r24, 0x57	; 87
    1b54:	92 e0       	ldi	r25, 0x02	; 2
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	f1 f7       	brne	.-4      	; 0x1b56 <_ZN3LCD5beginEhhh+0x8c>
    1b5a:	00 c0       	rjmp	.+0      	; 0x1b5c <_ZN3LCD5beginEhhh+0x92>
    1b5c:	00 00       	nop
		_delay_us(150); // wait min of 100us

		// finally, set to 4-bit interface
		send ( 0x02, FOUR_BITS );
    1b5e:	e8 81       	ld	r30, Y
    1b60:	f9 81       	ldd	r31, Y+1	; 0x01
    1b62:	00 84       	ldd	r0, Z+8	; 0x08
    1b64:	f1 85       	ldd	r31, Z+9	; 0x09
    1b66:	e0 2d       	mov	r30, r0
    1b68:	42 e0       	ldi	r20, 0x02	; 2
    1b6a:	62 e0       	ldi	r22, 0x02	; 2
    1b6c:	ce 01       	movw	r24, r28
    1b6e:	09 95       	icall
    1b70:	87 e5       	ldi	r24, 0x57	; 87
    1b72:	92 e0       	ldi	r25, 0x02	; 2
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	f1 f7       	brne	.-4      	; 0x1b74 <_ZN3LCD5beginEhhh+0xaa>
    1b78:	00 c0       	rjmp	.+0      	; 0x1b7a <_ZN3LCD5beginEhhh+0xb0>
    1b7a:	00 00       	nop
    1b7c:	1d c0       	rjmp	.+58     	; 0x1bb8 <_ZN3LCD5beginEhhh+0xee>
	{
		// this is according to the hitachi HD44780 datasheet
		// page 45 figure 23

		// Send function set command sequence
		command(LCD_FUNCTIONSET | _displayfunction);
    1b7e:	60 62       	ori	r22, 0x20	; 32
    1b80:	ce 01       	movw	r24, r28
    1b82:	89 df       	rcall	.-238    	; 0x1a96 <_ZN3LCD7commandEh>
    1b84:	8f e4       	ldi	r24, 0x4F	; 79
    1b86:	96 e4       	ldi	r25, 0x46	; 70
    1b88:	01 97       	sbiw	r24, 0x01	; 1
    1b8a:	f1 f7       	brne	.-4      	; 0x1b88 <_ZN3LCD5beginEhhh+0xbe>
    1b8c:	00 c0       	rjmp	.+0      	; 0x1b8e <_ZN3LCD5beginEhhh+0xc4>
    1b8e:	00 00       	nop
		_delay_us(4500);  // wait more than 4.1ms

		// second try
		command(LCD_FUNCTIONSET | _displayfunction);
    1b90:	6a 81       	ldd	r22, Y+2	; 0x02
    1b92:	60 62       	ori	r22, 0x20	; 32
    1b94:	ce 01       	movw	r24, r28
    1b96:	7f df       	rcall	.-258    	; 0x1a96 <_ZN3LCD7commandEh>
    1b98:	87 e5       	ldi	r24, 0x57	; 87
    1b9a:	92 e0       	ldi	r25, 0x02	; 2
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	f1 f7       	brne	.-4      	; 0x1b9c <_ZN3LCD5beginEhhh+0xd2>
    1ba0:	00 c0       	rjmp	.+0      	; 0x1ba2 <_ZN3LCD5beginEhhh+0xd8>
    1ba2:	00 00       	nop
		_delay_us(150);

		// third go
		command(LCD_FUNCTIONSET | _displayfunction);
    1ba4:	6a 81       	ldd	r22, Y+2	; 0x02
    1ba6:	60 62       	ori	r22, 0x20	; 32
    1ba8:	ce 01       	movw	r24, r28
    1baa:	75 df       	rcall	.-278    	; 0x1a96 <_ZN3LCD7commandEh>
    1bac:	87 e5       	ldi	r24, 0x57	; 87
    1bae:	92 e0       	ldi	r25, 0x02	; 2
    1bb0:	01 97       	sbiw	r24, 0x01	; 1
    1bb2:	f1 f7       	brne	.-4      	; 0x1bb0 <_ZN3LCD5beginEhhh+0xe6>
    1bb4:	00 c0       	rjmp	.+0      	; 0x1bb6 <_ZN3LCD5beginEhhh+0xec>
    1bb6:	00 00       	nop
		_delay_us(150);

	}

	// finally, set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);
    1bb8:	6a 81       	ldd	r22, Y+2	; 0x02
    1bba:	60 62       	ori	r22, 0x20	; 32
    1bbc:	ce 01       	movw	r24, r28
    1bbe:	6b df       	rcall	.-298    	; 0x1a96 <_ZN3LCD7commandEh>
    1bc0:	8f ee       	ldi	r24, 0xEF	; 239
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
    1bc6:	f1 f7       	brne	.-4      	; 0x1bc4 <_ZN3LCD5beginEhhh+0xfa>
    1bc8:	00 c0       	rjmp	.+0      	; 0x1bca <_ZN3LCD5beginEhhh+0x100>
	_delay_us ( 60 );  // wait more

	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    1bca:	00 00       	nop
	display();
    1bcc:	84 e0       	ldi	r24, 0x04	; 4
    1bce:	8b 83       	std	Y+3, r24	; 0x03
    1bd0:	ce 01       	movw	r24, r28

	// clear the LCD
	clear();
    1bd2:	73 df       	rcall	.-282    	; 0x1aba <_ZN3LCD7displayEv>
    1bd4:	ce 01       	movw	r24, r28

	// Initialize to default text direction (for romance languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    1bd6:	68 df       	rcall	.-304    	; 0x1aa8 <_ZN3LCD5clearEv>
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    1bd8:	82 e0       	ldi	r24, 0x02	; 2
    1bda:	8c 83       	std	Y+4, r24	; 0x04
    1bdc:	66 e0       	ldi	r22, 0x06	; 6
    1bde:	ce 01       	movw	r24, r28

	backlight();
    1be0:	5a df       	rcall	.-332    	; 0x1a96 <_ZN3LCD7commandEh>
    1be2:	ce 01       	movw	r24, r28
    1be4:	4f df       	rcall	.-354    	; 0x1a84 <_ZN3LCD9backlightEv>

}
    1be6:	df 91       	pop	r29
    1be8:	cf 91       	pop	r28
    1bea:	08 95       	ret

00001bec <_ZN17LiquidCrystal_I2C15setBacklightPinEh14t_backlightPol>:
	// Initialise pin mapping
	_data_pins[0] = ( 1 << d4 );
	_data_pins[1] = ( 1 << d5 );
	_data_pins[2] = ( 1 << d6 );
	_data_pins[3] = ( 1 << d7 );
}
    1bec:	21 e0       	ldi	r18, 0x01	; 1
    1bee:	01 c0       	rjmp	.+2      	; 0x1bf2 <_ZN17LiquidCrystal_I2C15setBacklightPinEh14t_backlightPol+0x6>
    1bf0:	22 0f       	add	r18, r18
    1bf2:	6a 95       	dec	r22
    1bf4:	ea f7       	brpl	.-6      	; 0x1bf0 <_ZN17LiquidCrystal_I2C15setBacklightPinEh14t_backlightPol+0x4>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	19 96       	adiw	r26, 0x09	; 9
    1bfa:	2c 93       	st	X, r18
    1bfc:	19 97       	sbiw	r26, 0x09	; 9
    1bfe:	17 96       	adiw	r26, 0x07	; 7
    1c00:	4c 93       	st	X, r20
    1c02:	17 97       	sbiw	r26, 0x07	; 7
    1c04:	ed 91       	ld	r30, X+
    1c06:	fc 91       	ld	r31, X
    1c08:	04 80       	ldd	r0, Z+4	; 0x04
    1c0a:	f5 81       	ldd	r31, Z+5	; 0x05
    1c0c:	e0 2d       	mov	r30, r0
    1c0e:	60 e0       	ldi	r22, 0x00	; 0
    1c10:	09 95       	icall
    1c12:	08 95       	ret

00001c14 <_ZN17LiquidCrystal_I2C12setBacklightEh>:
    1c14:	fc 01       	movw	r30, r24
    1c16:	81 85       	ldd	r24, Z+9	; 0x09
    1c18:	88 23       	and	r24, r24
    1c1a:	89 f0       	breq	.+34     	; 0x1c3e <_ZN17LiquidCrystal_I2C12setBacklightEh+0x2a>
    1c1c:	97 81       	ldd	r25, Z+7	; 0x07
    1c1e:	91 11       	cpse	r25, r1
    1c20:	03 c0       	rjmp	.+6      	; 0x1c28 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x14>
    1c22:	61 11       	cpse	r22, r1
    1c24:	05 c0       	rjmp	.+10     	; 0x1c30 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x1c>
    1c26:	06 c0       	rjmp	.+12     	; 0x1c34 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    1c28:	91 30       	cpi	r25, 0x01	; 1
    1c2a:	21 f4       	brne	.+8      	; 0x1c34 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    1c2c:	61 11       	cpse	r22, r1
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    1c30:	82 87       	std	Z+10, r24	; 0x0a
    1c32:	01 c0       	rjmp	.+2      	; 0x1c36 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x22>
    1c34:	12 86       	std	Z+10, r1	; 0x0a
    1c36:	62 85       	ldd	r22, Z+10	; 0x0a
    1c38:	cf 01       	movw	r24, r30
    1c3a:	0b 96       	adiw	r24, 0x0b	; 11
    1c3c:	03 cf       	rjmp	.-506    	; 0x1a44 <_ZN5I2CIO5writeEh>
    1c3e:	08 95       	ret

00001c40 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh>:
    1c40:	6f 92       	push	r6
    1c42:	7f 92       	push	r7
    1c44:	8f 92       	push	r8
    1c46:	af 92       	push	r10
    1c48:	cf 92       	push	r12
    1c4a:	df 92       	push	r13
    1c4c:	ef 92       	push	r14
    1c4e:	ff 92       	push	r15
    1c50:	0f 93       	push	r16
    1c52:	1f 93       	push	r17
    1c54:	cf 93       	push	r28
    1c56:	df 93       	push	r29
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	3c 01       	movw	r6, r24
    1c5e:	d6 2e       	mov	r13, r22
    1c60:	f4 2e       	mov	r15, r20
    1c62:	12 2f       	mov	r17, r18
    1c64:	09 df       	rcall	.-494    	; 0x1a78 <_ZN3LCDC1Ev>
    1c66:	8e e1       	ldi	r24, 0x1E	; 30
    1c68:	92 e0       	ldi	r25, 0x02	; 2
    1c6a:	f3 01       	movw	r30, r6
    1c6c:	91 83       	std	Z+1, r25	; 0x01
    1c6e:	80 83       	st	Z, r24
    1c70:	c3 01       	movw	r24, r6
    1c72:	0b 96       	adiw	r24, 0x0b	; 11
    1c74:	c5 de       	rcall	.-630    	; 0x1a00 <_ZN5I2CIOC1Ev>
    1c76:	f3 01       	movw	r30, r6
    1c78:	d0 86       	std	Z+8, r13	; 0x08
    1c7a:	11 86       	std	Z+9, r1	; 0x09
    1c7c:	12 86       	std	Z+10, r1	; 0x0a
    1c7e:	17 82       	std	Z+7, r1	; 0x07
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	98 2f       	mov	r25, r24
    1c84:	01 c0       	rjmp	.+2      	; 0x1c88 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x48>
    1c86:	99 0f       	add	r25, r25
    1c88:	fa 94       	dec	r15
    1c8a:	ea f7       	brpl	.-6      	; 0x1c86 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x46>
    1c8c:	97 87       	std	Z+15, r25	; 0x0f
    1c8e:	98 2f       	mov	r25, r24
    1c90:	01 c0       	rjmp	.+2      	; 0x1c94 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x54>
    1c92:	99 0f       	add	r25, r25
    1c94:	1a 95       	dec	r17
    1c96:	ea f7       	brpl	.-6      	; 0x1c92 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x52>
    1c98:	90 8b       	std	Z+16, r25	; 0x10
    1c9a:	98 2f       	mov	r25, r24
    1c9c:	01 c0       	rjmp	.+2      	; 0x1ca0 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x60>
    1c9e:	99 0f       	add	r25, r25
    1ca0:	0a 95       	dec	r16
    1ca2:	ea f7       	brpl	.-6      	; 0x1c9e <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x5e>
    1ca4:	91 8b       	std	Z+17, r25	; 0x11
    1ca6:	98 2f       	mov	r25, r24
    1ca8:	01 c0       	rjmp	.+2      	; 0x1cac <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x6c>
    1caa:	99 0f       	add	r25, r25
    1cac:	ea 94       	dec	r14
    1cae:	ea f7       	brpl	.-6      	; 0x1caa <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x6a>
    1cb0:	92 8b       	std	Z+18, r25	; 0x12
    1cb2:	98 2f       	mov	r25, r24
    1cb4:	01 c0       	rjmp	.+2      	; 0x1cb8 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x78>
    1cb6:	99 0f       	add	r25, r25
    1cb8:	ca 94       	dec	r12
    1cba:	ea f7       	brpl	.-6      	; 0x1cb6 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x76>
    1cbc:	93 8b       	std	Z+19, r25	; 0x13
    1cbe:	98 2f       	mov	r25, r24
    1cc0:	01 c0       	rjmp	.+2      	; 0x1cc4 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x84>
    1cc2:	99 0f       	add	r25, r25
    1cc4:	aa 94       	dec	r10
    1cc6:	ea f7       	brpl	.-6      	; 0x1cc2 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x82>
    1cc8:	94 8b       	std	Z+20, r25	; 0x14
    1cca:	01 c0       	rjmp	.+2      	; 0x1cce <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x8e>
    1ccc:	88 0f       	add	r24, r24
    1cce:	8a 94       	dec	r8
    1cd0:	ea f7       	brpl	.-6      	; 0x1ccc <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x8c>
    1cd2:	85 8b       	std	Z+21, r24	; 0x15
    1cd4:	df 91       	pop	r29
    1cd6:	cf 91       	pop	r28
    1cd8:	1f 91       	pop	r17
    1cda:	0f 91       	pop	r16
    1cdc:	ff 90       	pop	r15
    1cde:	ef 90       	pop	r14
    1ce0:	df 90       	pop	r13
    1ce2:	cf 90       	pop	r12
    1ce4:	af 90       	pop	r10
    1ce6:	8f 90       	pop	r8
    1ce8:	7f 90       	pop	r7
    1cea:	6f 90       	pop	r6
    1cec:	08 95       	ret

00001cee <_ZN17LiquidCrystal_I2C4initEv>:
    1cee:	0f 93       	push	r16
    1cf0:	1f 93       	push	r17
    1cf2:	cf 93       	push	r28
    1cf4:	df 93       	push	r29
    1cf6:	ec 01       	movw	r28, r24
    1cf8:	8c 01       	movw	r16, r24
    1cfa:	05 5f       	subi	r16, 0xF5	; 245
    1cfc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cfe:	68 85       	ldd	r22, Y+8	; 0x08
    1d00:	c8 01       	movw	r24, r16
    1d02:	85 de       	rcall	.-758    	; 0x1a0e <_ZN5I2CIO5beginEh>
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	51 f4       	brne	.+20     	; 0x1d1c <_ZN17LiquidCrystal_I2C4initEv+0x2e>
    1d08:	61 e0       	ldi	r22, 0x01	; 1
    1d0a:	c8 01       	movw	r24, r16
    1d0c:	92 de       	rcall	.-732    	; 0x1a32 <_ZN5I2CIO8portModeEh>
    1d0e:	1a 82       	std	Y+2, r1	; 0x02
    1d10:	60 e0       	ldi	r22, 0x00	; 0
    1d12:	c8 01       	movw	r24, r16
    1d14:	97 de       	rcall	.-722    	; 0x1a44 <_ZN5I2CIO5writeEh>
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	02 c0       	rjmp	.+4      	; 0x1d20 <_ZN17LiquidCrystal_I2C4initEv+0x32>
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	df 91       	pop	r29
    1d22:	cf 91       	pop	r28
    1d24:	1f 91       	pop	r17
    1d26:	0f 91       	pop	r16
    1d28:	08 95       	ret

00001d2a <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
}

//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
    1d2a:	ef 92       	push	r14
    1d2c:	ff 92       	push	r15
    1d2e:	0f 93       	push	r16
    1d30:	1f 93       	push	r17
    1d32:	cf 93       	push	r28
    1d34:	8c 01       	movw	r16, r24
    1d36:	c6 2f       	mov	r28, r22
	_i2cio.write (data | _En);   // En HIGH
    1d38:	7c 01       	movw	r14, r24
    1d3a:	8b e0       	ldi	r24, 0x0B	; 11
    1d3c:	e8 0e       	add	r14, r24
    1d3e:	f1 1c       	adc	r15, r1
    1d40:	f8 01       	movw	r30, r16
    1d42:	67 85       	ldd	r22, Z+15	; 0x0f
    1d44:	6c 2b       	or	r22, r28
    1d46:	c7 01       	movw	r24, r14
    1d48:	7d de       	rcall	.-774    	; 0x1a44 <_ZN5I2CIO5writeEh>
	_i2cio.write (data & ~_En);  // En LOW
    1d4a:	f8 01       	movw	r30, r16
    1d4c:	67 85       	ldd	r22, Z+15	; 0x0f
    1d4e:	60 95       	com	r22
    1d50:	6c 23       	and	r22, r28
    1d52:	c7 01       	movw	r24, r14
    1d54:	77 de       	rcall	.-786    	; 0x1a44 <_ZN5I2CIO5writeEh>
    1d56:	cf 91       	pop	r28
    1d58:	1f 91       	pop	r17
    1d5a:	0f 91       	pop	r16
    1d5c:	ff 90       	pop	r15
    1d5e:	ef 90       	pop	r14
    1d60:	08 95       	ret

00001d62 <_ZN17LiquidCrystal_I2C10write4bitsEhh>:
}

//
// write4bits
void LiquidCrystal_I2C::write4bits ( uint8_t value, uint8_t mode )
{
    1d62:	dc 01       	movw	r26, r24
    1d64:	fc 01       	movw	r30, r24
    1d66:	04 96       	adiw	r24, 0x04	; 4
	uint8_t pinMapValue = 0;
    1d68:	20 e0       	ldi	r18, 0x00	; 0

	// Map the value to LCD pin mapping
	// --------------------------------
	for ( uint8_t i = 0; i < 4; i++ )
	{
		if ( ( value & 0x1 ) == 1 )
    1d6a:	60 ff       	sbrs	r22, 0
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x10>
		{
			pinMapValue |= _data_pins[i];
    1d6e:	32 89       	ldd	r19, Z+18	; 0x12
    1d70:	23 2b       	or	r18, r19
		}
		value = ( value >> 1 );
    1d72:	66 95       	lsr	r22
    1d74:	31 96       	adiw	r30, 0x01	; 1
{
	uint8_t pinMapValue = 0;

	// Map the value to LCD pin mapping
	// --------------------------------
	for ( uint8_t i = 0; i < 4; i++ )
    1d76:	e8 17       	cp	r30, r24
    1d78:	f9 07       	cpc	r31, r25
    1d7a:	b9 f7       	brne	.-18     	; 0x1d6a <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x8>
		value = ( value >> 1 );
	}

	// Is it a command or data
	// -----------------------
	if ( mode == LCD_DATA )
    1d7c:	41 30       	cpi	r20, 0x01	; 1
    1d7e:	19 f4       	brne	.+6      	; 0x1d86 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x24>
	{
		mode = _Rs;
    1d80:	51 96       	adiw	r26, 0x11	; 17
    1d82:	4c 91       	ld	r20, X
    1d84:	51 97       	sbiw	r26, 0x11	; 17
    1d86:	1a 96       	adiw	r26, 0x0a	; 10
    1d88:	9c 91       	ld	r25, X
    1d8a:	1a 97       	sbiw	r26, 0x0a	; 10
    1d8c:	62 2f       	mov	r22, r18
    1d8e:	69 2b       	or	r22, r25
	}

	pinMapValue |= mode | _backlightStsMask;
	pulseEnable ( pinMapValue );
    1d90:	64 2b       	or	r22, r20
    1d92:	cd 01       	movw	r24, r26
    1d94:	ca cf       	rjmp	.-108    	; 0x1d2a <_ZN17LiquidCrystal_I2C11pulseEnableEh>
    1d96:	08 95       	ret

00001d98 <_ZN17LiquidCrystal_I2C4sendEhh>:
//----------------------------------------------------------------------------

//
// send - write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode)
{
    1d98:	0f 93       	push	r16
    1d9a:	1f 93       	push	r17
    1d9c:	cf 93       	push	r28
    1d9e:	df 93       	push	r29
    1da0:	8c 01       	movw	r16, r24
    1da2:	c6 2f       	mov	r28, r22
    1da4:	d4 2f       	mov	r29, r20
	// No need to use the delay routines since the time taken to write takes
	// longer that what is needed both for toggling and enable pin an to execute
	// the command.

	if ( mode == FOUR_BITS )
    1da6:	42 30       	cpi	r20, 0x02	; 2
    1da8:	21 f4       	brne	.+8      	; 0x1db2 <_ZN17LiquidCrystal_I2C4sendEhh+0x1a>
	{
		write4bits( (value & 0x0F), COMMAND );
    1daa:	6f 70       	andi	r22, 0x0F	; 15
    1dac:	40 e0       	ldi	r20, 0x00	; 0
    1dae:	d9 df       	rcall	.-78     	; 0x1d62 <_ZN17LiquidCrystal_I2C10write4bitsEhh>
    1db0:	0f c0       	rjmp	.+30     	; 0x1dd0 <_ZN17LiquidCrystal_I2C4sendEhh+0x38>
	}
	else
	{
		write4bits( (value >> 4), mode );
    1db2:	70 e0       	ldi	r23, 0x00	; 0
    1db4:	75 95       	asr	r23
    1db6:	67 95       	ror	r22
    1db8:	75 95       	asr	r23
    1dba:	67 95       	ror	r22
    1dbc:	75 95       	asr	r23
    1dbe:	67 95       	ror	r22
    1dc0:	75 95       	asr	r23
    1dc2:	67 95       	ror	r22
    1dc4:	ce df       	rcall	.-100    	; 0x1d62 <_ZN17LiquidCrystal_I2C10write4bitsEhh>
		write4bits( (value & 0x0F), mode);
    1dc6:	6c 2f       	mov	r22, r28
    1dc8:	6f 70       	andi	r22, 0x0F	; 15
    1dca:	4d 2f       	mov	r20, r29
    1dcc:	c8 01       	movw	r24, r16
    1dce:	c9 df       	rcall	.-110    	; 0x1d62 <_ZN17LiquidCrystal_I2C10write4bitsEhh>
	}
}
    1dd0:	df 91       	pop	r29
    1dd2:	cf 91       	pop	r28
    1dd4:	1f 91       	pop	r17
    1dd6:	0f 91       	pop	r16
    1dd8:	08 95       	ret

00001dda <_ZN17LiquidCrystal_I2C5beginEhhh>:
// ---------------------------------------------------------------------------

//
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
    1dda:	ff 92       	push	r15
    1ddc:	0f 93       	push	r16
    1dde:	1f 93       	push	r17
    1de0:	cf 93       	push	r28
    1de2:	df 93       	push	r29
    1de4:	ec 01       	movw	r28, r24
    1de6:	16 2f       	mov	r17, r22
    1de8:	04 2f       	mov	r16, r20
    1dea:	f2 2e       	mov	r15, r18

	init();     // Initialise the I2C expander interface
    1dec:	80 df       	rcall	.-256    	; 0x1cee <_ZN17LiquidCrystal_I2C4initEv>
	LCD::begin ( cols, lines, dotsize );
    1dee:	2f 2d       	mov	r18, r15
    1df0:	40 2f       	mov	r20, r16
    1df2:	61 2f       	mov	r22, r17
    1df4:	ce 01       	movw	r24, r28
    1df6:	69 de       	rcall	.-814    	; 0x1aca <_ZN3LCD5beginEhhh>
}
    1df8:	df 91       	pop	r29
    1dfa:	cf 91       	pop	r28
    1dfc:	1f 91       	pop	r17
    1dfe:	0f 91       	pop	r16
    1e00:	ff 90       	pop	r15
    1e02:	08 95       	ret

00001e04 <_ZN17Adafruit_7segmentC1Eh>:
	}
}
/******************************* 7 SEGMENT OBJECT */

Adafruit_7segment::Adafruit_7segment(uint8_t address) {
	position = 0;
    1e04:	fc 01       	movw	r30, r24
    1e06:	e9 5b       	subi	r30, 0xB9	; 185
    1e08:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0a:	10 82       	st	Z, r1
	i2c_node.set_address(address);
    1e0c:	41 96       	adiw	r24, 0x11	; 17
    1e0e:	76 cc       	rjmp	.-1812   	; 0x16fc <_ZN3I2C11set_addressEh>
    1e10:	08 95       	ret

00001e12 <main>:

#define F_CPU 16000000UL
#include <util/delay.h>

int main ()
{
    1e12:	cf 93       	push	r28
    1e14:	df 93       	push	r29
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
    1e1a:	cc 57       	subi	r28, 0x7C	; 124
    1e1c:	d1 40       	sbci	r29, 0x01	; 1
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	de bf       	out	0x3e, r29	; 62
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1e28:	2f ef       	ldi	r18, 0xFF	; 255
    1e2a:	83 ed       	ldi	r24, 0xD3	; 211
    1e2c:	90 e3       	ldi	r25, 0x30	; 48
    1e2e:	21 50       	subi	r18, 0x01	; 1
    1e30:	80 40       	sbci	r24, 0x00	; 0
    1e32:	90 40       	sbci	r25, 0x00	; 0
    1e34:	e1 f7       	brne	.-8      	; 0x1e2e <main+0x1c>
    1e36:	00 c0       	rjmp	.+0      	; 0x1e38 <main+0x26>
    1e38:	00 00       	nop
#include "../memory/memory.hpp"
#include "../uart/uart_module.hpp"
#include "request.hpp"
#include "../timer/Clock.hpp"

class Communications
    1e3a:	ce 01       	movw	r24, r28
    1e3c:	04 96       	adiw	r24, 0x04	; 4
    1e3e:	0e 94 e7 06 	call	0xdce	; 0xdce <_ZN12MessageQueueC1Ev>
    1e42:	ce 01       	movw	r24, r28
    1e44:	83 56       	subi	r24, 0x63	; 99
    1e46:	9f 4f       	sbci	r25, 0xFF	; 255
    1e48:	15 d8       	rcall	.-4054   	; 0xe74 <_ZN18FastTransferParserC1Ev>
    1e4a:	ce 01       	movw	r24, r28
    1e4c:	80 53       	subi	r24, 0x30	; 48
    1e4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e50:	5e d0       	rcall	.+188    	; 0x1f0e <_ZN6ClocksC1Ev>
  _delay_ms(1000);
  ControlBoxEngine box;
  box.initialize();
    1e52:	ce 01       	movw	r24, r28
    1e54:	01 96       	adiw	r24, 0x01	; 1
    1e56:	99 d8       	rcall	.-3790   	; 0xf8a <_ZN16ControlBoxEngine10initializeEv>
  box.loop();
    1e58:	ce 01       	movw	r24, r28
    1e5a:	01 96       	adiw	r24, 0x01	; 1
    1e5c:	a9 d8       	rcall	.-3758   	; 0xfb0 <_ZN16ControlBoxEngine4loopEv>
  return 0;
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	c4 58       	subi	r28, 0x84	; 132
    1e64:	de 4f       	sbci	r29, 0xFE	; 254
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	f8 94       	cli
    1e6a:	de bf       	out	0x3e, r29	; 62
    1e6c:	0f be       	out	0x3f, r0	; 63
    1e6e:	cd bf       	out	0x3d, r28	; 61
    1e70:	df 91       	pop	r29
    1e72:	cf 91       	pop	r28
    1e74:	08 95       	ret

00001e76 <_ZN6Memory10initializeEv>:
void Memory::link (uint8_t i, uint8_t j)
{
  Variable * ptr = &variables[i];
  while (ptr->next)
    ptr = ptr->next;
  ptr->next = &variables[j];
    1e76:	e2 e5       	ldi	r30, 0x52	; 82
    1e78:	f3 e0       	ldi	r31, 0x03	; 3
    1e7a:	82 e5       	ldi	r24, 0x52	; 82
    1e7c:	96 e0       	ldi	r25, 0x06	; 6
    1e7e:	11 82       	std	Z+1, r1	; 0x01
    1e80:	10 82       	st	Z, r1
    1e82:	13 82       	std	Z+3, r1	; 0x03
    1e84:	12 82       	std	Z+2, r1	; 0x02
    1e86:	15 82       	std	Z+5, r1	; 0x05
    1e88:	14 82       	std	Z+4, r1	; 0x04
    1e8a:	36 96       	adiw	r30, 0x06	; 6
    1e8c:	e8 17       	cp	r30, r24
    1e8e:	f9 07       	cpc	r31, r25
    1e90:	b1 f7       	brne	.-20     	; 0x1e7e <_ZN6Memory10initializeEv+0x8>
    1e92:	08 95       	ret

00001e94 <_ZN6Memory5writeEhj>:
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	fc 01       	movw	r30, r24
    1e98:	ee 0f       	add	r30, r30
    1e9a:	ff 1f       	adc	r31, r31
    1e9c:	e8 0f       	add	r30, r24
    1e9e:	f9 1f       	adc	r31, r25
    1ea0:	ee 0f       	add	r30, r30
    1ea2:	ff 1f       	adc	r31, r31
    1ea4:	ee 5a       	subi	r30, 0xAE	; 174
    1ea6:	fc 4f       	sbci	r31, 0xFC	; 252
    1ea8:	01 c0       	rjmp	.+2      	; 0x1eac <_ZN6Memory5writeEhj+0x18>
    1eaa:	fc 01       	movw	r30, r24
    1eac:	84 81       	ldd	r24, Z+4	; 0x04
    1eae:	95 81       	ldd	r25, Z+5	; 0x05
    1eb0:	00 97       	sbiw	r24, 0x00	; 0
    1eb2:	d9 f7       	brne	.-10     	; 0x1eaa <_ZN6Memory5writeEhj+0x16>
    1eb4:	30 97       	sbiw	r30, 0x00	; 0
    1eb6:	39 f0       	breq	.+14     	; 0x1ec6 <_ZN6Memory5writeEhj+0x32>
    1eb8:	71 83       	std	Z+1, r23	; 0x01
    1eba:	60 83       	st	Z, r22
    1ebc:	02 80       	ldd	r0, Z+2	; 0x02
    1ebe:	f3 81       	ldd	r31, Z+3	; 0x03
    1ec0:	e0 2d       	mov	r30, r0
    1ec2:	30 97       	sbiw	r30, 0x00	; 0
    1ec4:	c9 f7       	brne	.-14     	; 0x1eb8 <_ZN6Memory5writeEhj+0x24>
    1ec6:	08 95       	ret

00001ec8 <_ZN6Memory4readEh>:
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	fc 01       	movw	r30, r24
    1ecc:	ee 0f       	add	r30, r30
    1ece:	ff 1f       	adc	r31, r31
    1ed0:	e8 0f       	add	r30, r24
    1ed2:	f9 1f       	adc	r31, r25
    1ed4:	ee 0f       	add	r30, r30
    1ed6:	ff 1f       	adc	r31, r31
    1ed8:	ee 5a       	subi	r30, 0xAE	; 174
    1eda:	fc 4f       	sbci	r31, 0xFC	; 252
    1edc:	80 81       	ld	r24, Z
    1ede:	91 81       	ldd	r25, Z+1	; 0x01
    1ee0:	08 95       	ret

00001ee2 <_ZN6Memory13valid_addressEh>:
}

bool Memory::valid_address (uint8_t address)
{
  return address < Memory::SIZE;
    1ee2:	80 95       	com	r24
}
    1ee4:	88 1f       	adc	r24, r24
    1ee6:	88 27       	eor	r24, r24
    1ee8:	88 1f       	adc	r24, r24
    1eea:	08 95       	ret

00001eec <_ZN6Clocks5resetEv>:
{
	update();

	return abs(currentTime-startTime) / length;

}
    1eec:	cf 93       	push	r28
    1eee:	df 93       	push	r29
    1ef0:	ec 01       	movw	r28, r24
    1ef2:	82 e5       	ldi	r24, 0x52	; 82
    1ef4:	96 e0       	ldi	r25, 0x06	; 6
    1ef6:	61 d1       	rcall	.+706    	; 0x21ba <_ZN12SimpleTimer16millisEv>
    1ef8:	6c 83       	std	Y+4, r22	; 0x04
    1efa:	7d 83       	std	Y+5, r23	; 0x05
    1efc:	8e 83       	std	Y+6, r24	; 0x06
    1efe:	9f 83       	std	Y+7, r25	; 0x07
    1f00:	68 83       	st	Y, r22
    1f02:	79 83       	std	Y+1, r23	; 0x01
    1f04:	8a 83       	std	Y+2, r24	; 0x02
    1f06:	9b 83       	std	Y+3, r25	; 0x03
    1f08:	df 91       	pop	r29
    1f0a:	cf 91       	pop	r28
    1f0c:	08 95       	ret

00001f0e <_ZN6ClocksC1Ev>:
    1f0e:	cf 93       	push	r28
    1f10:	df 93       	push	r29
    1f12:	ec 01       	movw	r28, r24
    1f14:	41 e0       	ldi	r20, 0x01	; 1
    1f16:	50 e0       	ldi	r21, 0x00	; 0
    1f18:	60 e0       	ldi	r22, 0x00	; 0
    1f1a:	70 e0       	ldi	r23, 0x00	; 0
    1f1c:	82 e5       	ldi	r24, 0x52	; 82
    1f1e:	96 e0       	ldi	r25, 0x06	; 6
    1f20:	62 d1       	rcall	.+708    	; 0x21e6 <_ZN12SimpleTimer112set_durationEm>
    1f22:	82 e5       	ldi	r24, 0x52	; 82
    1f24:	96 e0       	ldi	r25, 0x06	; 6
    1f26:	52 d1       	rcall	.+676    	; 0x21cc <_ZN12SimpleTimer15startEv>
    1f28:	82 e3       	ldi	r24, 0x32	; 50
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	a0 e0       	ldi	r26, 0x00	; 0
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	88 87       	std	Y+8, r24	; 0x08
    1f32:	99 87       	std	Y+9, r25	; 0x09
    1f34:	aa 87       	std	Y+10, r26	; 0x0a
    1f36:	bb 87       	std	Y+11, r27	; 0x0b
    1f38:	ce 01       	movw	r24, r28
    1f3a:	d8 df       	rcall	.-80     	; 0x1eec <_ZN6Clocks5resetEv>
    1f3c:	df 91       	pop	r29
    1f3e:	cf 91       	pop	r28
    1f40:	08 95       	ret

00001f42 <_ZN6ClocksC1El>:
    1f42:	cf 92       	push	r12
    1f44:	df 92       	push	r13
    1f46:	ef 92       	push	r14
    1f48:	ff 92       	push	r15
    1f4a:	cf 93       	push	r28
    1f4c:	df 93       	push	r29
    1f4e:	ec 01       	movw	r28, r24
    1f50:	6a 01       	movw	r12, r20
    1f52:	7b 01       	movw	r14, r22
    1f54:	41 e0       	ldi	r20, 0x01	; 1
    1f56:	50 e0       	ldi	r21, 0x00	; 0
    1f58:	60 e0       	ldi	r22, 0x00	; 0
    1f5a:	70 e0       	ldi	r23, 0x00	; 0
    1f5c:	82 e5       	ldi	r24, 0x52	; 82
    1f5e:	96 e0       	ldi	r25, 0x06	; 6
    1f60:	42 d1       	rcall	.+644    	; 0x21e6 <_ZN12SimpleTimer112set_durationEm>
    1f62:	82 e5       	ldi	r24, 0x52	; 82
    1f64:	96 e0       	ldi	r25, 0x06	; 6
    1f66:	32 d1       	rcall	.+612    	; 0x21cc <_ZN12SimpleTimer15startEv>
    1f68:	c8 86       	std	Y+8, r12	; 0x08
    1f6a:	d9 86       	std	Y+9, r13	; 0x09
    1f6c:	ea 86       	std	Y+10, r14	; 0x0a
    1f6e:	fb 86       	std	Y+11, r15	; 0x0b
    1f70:	ce 01       	movw	r24, r28
    1f72:	bc df       	rcall	.-136    	; 0x1eec <_ZN6Clocks5resetEv>
    1f74:	df 91       	pop	r29
    1f76:	cf 91       	pop	r28
    1f78:	ff 90       	pop	r15
    1f7a:	ef 90       	pop	r14
    1f7c:	df 90       	pop	r13
    1f7e:	cf 90       	pop	r12
    1f80:	08 95       	ret

00001f82 <_ZN6Clocks11setIntervalEl>:
    1f82:	fc 01       	movw	r30, r24
    1f84:	40 87       	std	Z+8, r20	; 0x08
    1f86:	51 87       	std	Z+9, r21	; 0x09
    1f88:	62 87       	std	Z+10, r22	; 0x0a
    1f8a:	73 87       	std	Z+11, r23	; 0x0b
    1f8c:	08 95       	ret

00001f8e <_ZN6Clocks6updateEv>:
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
    1f92:	ec 01       	movw	r28, r24
    1f94:	82 e5       	ldi	r24, 0x52	; 82
    1f96:	96 e0       	ldi	r25, 0x06	; 6
    1f98:	10 d1       	rcall	.+544    	; 0x21ba <_ZN12SimpleTimer16millisEv>
    1f9a:	68 83       	st	Y, r22
    1f9c:	79 83       	std	Y+1, r23	; 0x01
    1f9e:	8a 83       	std	Y+2, r24	; 0x02
    1fa0:	9b 83       	std	Y+3, r25	; 0x03
    1fa2:	df 91       	pop	r29
    1fa4:	cf 91       	pop	r28
    1fa6:	08 95       	ret

00001fa8 <_ZN6Clocks6isDoneEv>:
    1fa8:	cf 93       	push	r28
    1faa:	df 93       	push	r29
    1fac:	ec 01       	movw	r28, r24
    1fae:	ef df       	rcall	.-34     	; 0x1f8e <_ZN6Clocks6updateEv>
    1fb0:	28 81       	ld	r18, Y
    1fb2:	39 81       	ldd	r19, Y+1	; 0x01
    1fb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb8:	28 1b       	sub	r18, r24
    1fba:	39 0b       	sbc	r19, r25
    1fbc:	c9 01       	movw	r24, r18
    1fbe:	99 23       	and	r25, r25
    1fc0:	24 f4       	brge	.+8      	; 0x1fca <_ZN6Clocks6isDoneEv+0x22>
    1fc2:	88 27       	eor	r24, r24
    1fc4:	99 27       	eor	r25, r25
    1fc6:	82 1b       	sub	r24, r18
    1fc8:	93 0b       	sbc	r25, r19
    1fca:	09 2e       	mov	r0, r25
    1fcc:	00 0c       	add	r0, r0
    1fce:	aa 0b       	sbc	r26, r26
    1fd0:	bb 0b       	sbc	r27, r27
    1fd2:	48 85       	ldd	r20, Y+8	; 0x08
    1fd4:	59 85       	ldd	r21, Y+9	; 0x09
    1fd6:	6a 85       	ldd	r22, Y+10	; 0x0a
    1fd8:	7b 85       	ldd	r23, Y+11	; 0x0b
    1fda:	48 17       	cp	r20, r24
    1fdc:	59 07       	cpc	r21, r25
    1fde:	6a 07       	cpc	r22, r26
    1fe0:	7b 07       	cpc	r23, r27
    1fe2:	24 f4       	brge	.+8      	; 0x1fec <_ZN6Clocks6isDoneEv+0x44>
    1fe4:	ce 01       	movw	r24, r28
    1fe6:	82 df       	rcall	.-252    	; 0x1eec <_ZN6Clocks5resetEv>
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	01 c0       	rjmp	.+2      	; 0x1fee <_ZN6Clocks6isDoneEv+0x46>
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	df 91       	pop	r29
    1ff0:	cf 91       	pop	r28
    1ff2:	08 95       	ret

00001ff4 <_ZN6Clocks14isDone_NoResetEv>:
    1ff4:	0f 93       	push	r16
    1ff6:	1f 93       	push	r17
    1ff8:	cf 93       	push	r28
    1ffa:	df 93       	push	r29
    1ffc:	ec 01       	movw	r28, r24
    1ffe:	c7 df       	rcall	.-114    	; 0x1f8e <_ZN6Clocks6updateEv>
    2000:	88 81       	ld	r24, Y
    2002:	99 81       	ldd	r25, Y+1	; 0x01
    2004:	2c 81       	ldd	r18, Y+4	; 0x04
    2006:	3d 81       	ldd	r19, Y+5	; 0x05
    2008:	82 1b       	sub	r24, r18
    200a:	93 0b       	sbc	r25, r19
    200c:	ac 01       	movw	r20, r24
    200e:	22 f4       	brpl	.+8      	; 0x2018 <_ZN6Clocks14isDone_NoResetEv+0x24>
    2010:	44 27       	eor	r20, r20
    2012:	55 27       	eor	r21, r21
    2014:	48 1b       	sub	r20, r24
    2016:	59 0b       	sbc	r21, r25
    2018:	05 2e       	mov	r0, r21
    201a:	00 0c       	add	r0, r0
    201c:	66 0b       	sbc	r22, r22
    201e:	77 0b       	sbc	r23, r23
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	08 85       	ldd	r16, Y+8	; 0x08
    2024:	19 85       	ldd	r17, Y+9	; 0x09
    2026:	2a 85       	ldd	r18, Y+10	; 0x0a
    2028:	3b 85       	ldd	r19, Y+11	; 0x0b
    202a:	04 17       	cp	r16, r20
    202c:	15 07       	cpc	r17, r21
    202e:	26 07       	cpc	r18, r22
    2030:	37 07       	cpc	r19, r23
    2032:	0c f0       	brlt	.+2      	; 0x2036 <_ZN6Clocks14isDone_NoResetEv+0x42>
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	df 91       	pop	r29
    2038:	cf 91       	pop	r28
    203a:	1f 91       	pop	r17
    203c:	0f 91       	pop	r16
    203e:	08 95       	ret

00002040 <_GLOBAL__sub_I__ZN6ClocksC2Ev>:

#include "../timer/SimpleTimer1.hpp"
#include "../uart/uart_2.hpp"
#include "../uart/uart_3.hpp"

static SimpleTimer1 ClockTimer;
    2040:	82 e5       	ldi	r24, 0x52	; 82
    2042:	96 e0       	ldi	r25, 0x06	; 6
    2044:	ce c0       	rjmp	.+412    	; 0x21e2 <_ZN12SimpleTimer1C1Ev>
    2046:	08 95       	ret

00002048 <_Z5resetv>:
    2048:	10 92 57 06 	sts	0x0657, r1	; 0x800657 <_ZL5count>
    204c:	10 92 58 06 	sts	0x0658, r1	; 0x800658 <_ZL5count+0x1>
    2050:	10 92 59 06 	sts	0x0659, r1	; 0x800659 <_ZL5count+0x2>
    2054:	10 92 5a 06 	sts	0x065A, r1	; 0x80065a <_ZL5count+0x3>
    2058:	07 d1       	rcall	.+526    	; 0x2268 <_Z36timer0_disableTimerOverflowInterruptv>
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	d7 c0       	rjmp	.+430    	; 0x220c <_Z21timer0_setClockSource12CLOCK_SOURCE>
    205e:	08 95       	ret

00002060 <__vector_23>:
    2060:	1f 92       	push	r1
    2062:	0f 92       	push	r0
    2064:	0f b6       	in	r0, 0x3f	; 63
    2066:	0f 92       	push	r0
    2068:	11 24       	eor	r1, r1
    206a:	0b b6       	in	r0, 0x3b	; 59
    206c:	0f 92       	push	r0
    206e:	2f 93       	push	r18
    2070:	3f 93       	push	r19
    2072:	4f 93       	push	r20
    2074:	5f 93       	push	r21
    2076:	6f 93       	push	r22
    2078:	7f 93       	push	r23
    207a:	8f 93       	push	r24
    207c:	9f 93       	push	r25
    207e:	af 93       	push	r26
    2080:	bf 93       	push	r27
    2082:	ef 93       	push	r30
    2084:	ff 93       	push	r31
    2086:	80 91 57 06 	lds	r24, 0x0657	; 0x800657 <_ZL5count>
    208a:	90 91 58 06 	lds	r25, 0x0658	; 0x800658 <_ZL5count+0x1>
    208e:	a0 91 59 06 	lds	r26, 0x0659	; 0x800659 <_ZL5count+0x2>
    2092:	b0 91 5a 06 	lds	r27, 0x065A	; 0x80065a <_ZL5count+0x3>
    2096:	01 96       	adiw	r24, 0x01	; 1
    2098:	a1 1d       	adc	r26, r1
    209a:	b1 1d       	adc	r27, r1
    209c:	80 93 57 06 	sts	0x0657, r24	; 0x800657 <_ZL5count>
    20a0:	90 93 58 06 	sts	0x0658, r25	; 0x800658 <_ZL5count+0x1>
    20a4:	a0 93 59 06 	sts	0x0659, r26	; 0x800659 <_ZL5count+0x2>
    20a8:	b0 93 5a 06 	sts	0x065A, r27	; 0x80065a <_ZL5count+0x3>
    20ac:	40 91 57 06 	lds	r20, 0x0657	; 0x800657 <_ZL5count>
    20b0:	50 91 58 06 	lds	r21, 0x0658	; 0x800658 <_ZL5count+0x1>
    20b4:	60 91 59 06 	lds	r22, 0x0659	; 0x800659 <_ZL5count+0x2>
    20b8:	70 91 5a 06 	lds	r23, 0x065A	; 0x80065a <_ZL5count+0x3>
    20bc:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <_ZL9max_count>
    20c0:	90 91 54 06 	lds	r25, 0x0654	; 0x800654 <_ZL9max_count+0x1>
    20c4:	a0 91 55 06 	lds	r26, 0x0655	; 0x800655 <_ZL9max_count+0x2>
    20c8:	b0 91 56 06 	lds	r27, 0x0656	; 0x800656 <_ZL9max_count+0x3>
    20cc:	84 17       	cp	r24, r20
    20ce:	95 07       	cpc	r25, r21
    20d0:	a6 07       	cpc	r26, r22
    20d2:	b7 07       	cpc	r27, r23
    20d4:	08 f4       	brcc	.+2      	; 0x20d8 <__vector_23+0x78>
    20d6:	b8 df       	rcall	.-144    	; 0x2048 <_Z5resetv>
    20d8:	ff 91       	pop	r31
    20da:	ef 91       	pop	r30
    20dc:	bf 91       	pop	r27
    20de:	af 91       	pop	r26
    20e0:	9f 91       	pop	r25
    20e2:	8f 91       	pop	r24
    20e4:	7f 91       	pop	r23
    20e6:	6f 91       	pop	r22
    20e8:	5f 91       	pop	r21
    20ea:	4f 91       	pop	r20
    20ec:	3f 91       	pop	r19
    20ee:	2f 91       	pop	r18
    20f0:	0f 90       	pop	r0
    20f2:	0b be       	out	0x3b, r0	; 59
    20f4:	0f 90       	pop	r0
    20f6:	0f be       	out	0x3f, r0	; 63
    20f8:	0f 90       	pop	r0
    20fa:	1f 90       	pop	r1
    20fc:	18 95       	reti

000020fe <__vector_20>:
    20fe:	1f 92       	push	r1
    2100:	0f 92       	push	r0
    2102:	0f b6       	in	r0, 0x3f	; 63
    2104:	0f 92       	push	r0
    2106:	11 24       	eor	r1, r1
    2108:	4f 93       	push	r20
    210a:	5f 93       	push	r21
    210c:	6f 93       	push	r22
    210e:	7f 93       	push	r23
    2110:	8f 93       	push	r24
    2112:	9f 93       	push	r25
    2114:	af 93       	push	r26
    2116:	bf 93       	push	r27
    2118:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <_ZL5count>
    211c:	90 91 64 06 	lds	r25, 0x0664	; 0x800664 <_ZL5count+0x1>
    2120:	a0 91 65 06 	lds	r26, 0x0665	; 0x800665 <_ZL5count+0x2>
    2124:	b0 91 66 06 	lds	r27, 0x0666	; 0x800666 <_ZL5count+0x3>
    2128:	01 96       	adiw	r24, 0x01	; 1
    212a:	a1 1d       	adc	r26, r1
    212c:	b1 1d       	adc	r27, r1
    212e:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <_ZL5count>
    2132:	90 93 64 06 	sts	0x0664, r25	; 0x800664 <_ZL5count+0x1>
    2136:	a0 93 65 06 	sts	0x0665, r26	; 0x800665 <_ZL5count+0x2>
    213a:	b0 93 66 06 	sts	0x0666, r27	; 0x800666 <_ZL5count+0x3>
    213e:	40 91 63 06 	lds	r20, 0x0663	; 0x800663 <_ZL5count>
    2142:	50 91 64 06 	lds	r21, 0x0664	; 0x800664 <_ZL5count+0x1>
    2146:	60 91 65 06 	lds	r22, 0x0665	; 0x800665 <_ZL5count+0x2>
    214a:	70 91 66 06 	lds	r23, 0x0666	; 0x800666 <_ZL5count+0x3>
    214e:	80 91 5b 06 	lds	r24, 0x065B	; 0x80065b <_ZL9max_count>
    2152:	90 91 5c 06 	lds	r25, 0x065C	; 0x80065c <_ZL9max_count+0x1>
    2156:	a0 91 5d 06 	lds	r26, 0x065D	; 0x80065d <_ZL9max_count+0x2>
    215a:	b0 91 5e 06 	lds	r27, 0x065E	; 0x80065e <_ZL9max_count+0x3>
    215e:	84 17       	cp	r24, r20
    2160:	95 07       	cpc	r25, r21
    2162:	a6 07       	cpc	r26, r22
    2164:	b7 07       	cpc	r27, r23
    2166:	d8 f4       	brcc	.+54     	; 0x219e <__vector_20+0xa0>
    2168:	80 91 5f 06 	lds	r24, 0x065F	; 0x80065f <_ZL11GlobalCount>
    216c:	90 91 60 06 	lds	r25, 0x0660	; 0x800660 <_ZL11GlobalCount+0x1>
    2170:	a0 91 61 06 	lds	r26, 0x0661	; 0x800661 <_ZL11GlobalCount+0x2>
    2174:	b0 91 62 06 	lds	r27, 0x0662	; 0x800662 <_ZL11GlobalCount+0x3>
    2178:	04 96       	adiw	r24, 0x04	; 4
    217a:	a1 1d       	adc	r26, r1
    217c:	b1 1d       	adc	r27, r1
    217e:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <_ZL11GlobalCount>
    2182:	90 93 60 06 	sts	0x0660, r25	; 0x800660 <_ZL11GlobalCount+0x1>
    2186:	a0 93 61 06 	sts	0x0661, r26	; 0x800661 <_ZL11GlobalCount+0x2>
    218a:	b0 93 62 06 	sts	0x0662, r27	; 0x800662 <_ZL11GlobalCount+0x3>
    218e:	10 92 63 06 	sts	0x0663, r1	; 0x800663 <_ZL5count>
    2192:	10 92 64 06 	sts	0x0664, r1	; 0x800664 <_ZL5count+0x1>
    2196:	10 92 65 06 	sts	0x0665, r1	; 0x800665 <_ZL5count+0x2>
    219a:	10 92 66 06 	sts	0x0666, r1	; 0x800666 <_ZL5count+0x3>
    219e:	16 ba       	out	0x16, r1	; 22
    21a0:	bf 91       	pop	r27
    21a2:	af 91       	pop	r26
    21a4:	9f 91       	pop	r25
    21a6:	8f 91       	pop	r24
    21a8:	7f 91       	pop	r23
    21aa:	6f 91       	pop	r22
    21ac:	5f 91       	pop	r21
    21ae:	4f 91       	pop	r20
    21b0:	0f 90       	pop	r0
    21b2:	0f be       	out	0x3f, r0	; 63
    21b4:	0f 90       	pop	r0
    21b6:	1f 90       	pop	r1
    21b8:	18 95       	reti

000021ba <_ZN12SimpleTimer16millisEv>:
    21ba:	60 91 5f 06 	lds	r22, 0x065F	; 0x80065f <_ZL11GlobalCount>
    21be:	70 91 60 06 	lds	r23, 0x0660	; 0x800660 <_ZL11GlobalCount+0x1>
    21c2:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <_ZL11GlobalCount+0x2>
    21c6:	90 91 62 06 	lds	r25, 0x0662	; 0x800662 <_ZL11GlobalCount+0x3>
    21ca:	08 95       	ret

000021cc <_ZN12SimpleTimer15startEv>:
    21cc:	ef e6       	ldi	r30, 0x6F	; 111
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	80 81       	ld	r24, Z
    21d2:	81 60       	ori	r24, 0x01	; 1
    21d4:	80 83       	st	Z, r24
    21d6:	e1 e8       	ldi	r30, 0x81	; 129
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	80 81       	ld	r24, Z
    21dc:	81 60       	ori	r24, 0x01	; 1
    21de:	80 83       	st	Z, r24
    21e0:	08 95       	ret

000021e2 <_ZN12SimpleTimer1C1Ev>:
    21e2:	f4 cf       	rjmp	.-24     	; 0x21cc <_ZN12SimpleTimer15startEv>
    21e4:	08 95       	ret

000021e6 <_ZN12SimpleTimer112set_durationEm>:
    21e6:	a0 e8       	ldi	r26, 0x80	; 128
    21e8:	be e3       	ldi	r27, 0x3E	; 62
    21ea:	9a 01       	movw	r18, r20
    21ec:	ab 01       	movw	r20, r22
    21ee:	00 d4       	rcall	.+2048   	; 0x29f0 <__muluhisi3>
    21f0:	2f ef       	ldi	r18, 0xFF	; 255
    21f2:	3f ef       	ldi	r19, 0xFF	; 255
    21f4:	40 e0       	ldi	r20, 0x00	; 0
    21f6:	50 e0       	ldi	r21, 0x00	; 0
    21f8:	9f d3       	rcall	.+1854   	; 0x2938 <__udivmodsi4>
    21fa:	20 93 5b 06 	sts	0x065B, r18	; 0x80065b <_ZL9max_count>
    21fe:	30 93 5c 06 	sts	0x065C, r19	; 0x80065c <_ZL9max_count+0x1>
    2202:	40 93 5d 06 	sts	0x065D, r20	; 0x80065d <_ZL9max_count+0x2>
    2206:	50 93 5e 06 	sts	0x065E, r21	; 0x80065e <_ZL9max_count+0x3>
    220a:	08 95       	ret

0000220c <_Z21timer0_setClockSource12CLOCK_SOURCE>:
    220c:	e8 2f       	mov	r30, r24
    220e:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <_ZL2cs>
    2212:	85 b5       	in	r24, 0x25	; 37
    2214:	88 7f       	andi	r24, 0xF8	; 248
    2216:	85 bd       	out	0x25, r24	; 37
    2218:	8e 2f       	mov	r24, r30
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	88 30       	cpi	r24, 0x08	; 8
    221e:	91 05       	cpc	r25, r1
    2220:	10 f5       	brcc	.+68     	; 0x2266 <_Z21timer0_setClockSource12CLOCK_SOURCE+0x5a>
    2222:	fc 01       	movw	r30, r24
    2224:	ed 55       	subi	r30, 0x5D	; 93
    2226:	ff 4f       	sbci	r31, 0xFF	; 255
    2228:	c5 c3       	rjmp	.+1930   	; 0x29b4 <__tablejump2__>
    222a:	85 b5       	in	r24, 0x25	; 37
    222c:	85 bd       	out	0x25, r24	; 37
    222e:	08 95       	ret
    2230:	85 b5       	in	r24, 0x25	; 37
    2232:	81 60       	ori	r24, 0x01	; 1
    2234:	85 bd       	out	0x25, r24	; 37
    2236:	08 95       	ret
    2238:	85 b5       	in	r24, 0x25	; 37
    223a:	82 60       	ori	r24, 0x02	; 2
    223c:	85 bd       	out	0x25, r24	; 37
    223e:	08 95       	ret
    2240:	85 b5       	in	r24, 0x25	; 37
    2242:	83 60       	ori	r24, 0x03	; 3
    2244:	85 bd       	out	0x25, r24	; 37
    2246:	08 95       	ret
    2248:	85 b5       	in	r24, 0x25	; 37
    224a:	84 60       	ori	r24, 0x04	; 4
    224c:	85 bd       	out	0x25, r24	; 37
    224e:	08 95       	ret
    2250:	85 b5       	in	r24, 0x25	; 37
    2252:	85 60       	ori	r24, 0x05	; 5
    2254:	85 bd       	out	0x25, r24	; 37
    2256:	08 95       	ret
    2258:	85 b5       	in	r24, 0x25	; 37
    225a:	86 60       	ori	r24, 0x06	; 6
    225c:	85 bd       	out	0x25, r24	; 37
    225e:	08 95       	ret
    2260:	85 b5       	in	r24, 0x25	; 37
    2262:	87 60       	ori	r24, 0x07	; 7
    2264:	85 bd       	out	0x25, r24	; 37
    2266:	08 95       	ret

00002268 <_Z36timer0_disableTimerOverflowInterruptv>:
    2268:	ee e6       	ldi	r30, 0x6E	; 110
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	80 81       	ld	r24, Z
    226e:	8e 7f       	andi	r24, 0xFE	; 254
    2270:	80 83       	st	Z, r24
    2272:	08 95       	ret

00002274 <__vector_25>:
    2274:	1f 92       	push	r1
    2276:	0f 92       	push	r0
    2278:	0f b6       	in	r0, 0x3f	; 63
    227a:	0f 92       	push	r0
    227c:	11 24       	eor	r1, r1
    227e:	0b b6       	in	r0, 0x3b	; 59
    2280:	0f 92       	push	r0
    2282:	2f 93       	push	r18
    2284:	8f 93       	push	r24
    2286:	9f 93       	push	r25
    2288:	ef 93       	push	r30
    228a:	ff 93       	push	r31
    228c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    2290:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    2294:	8c 71       	andi	r24, 0x1C	; 28
    2296:	e0 91 6a 06 	lds	r30, 0x066A	; 0x80066a <_ZL12receive_head>
    229a:	ef 5f       	subi	r30, 0xFF	; 255
    229c:	ef 71       	andi	r30, 0x1F	; 31
    229e:	90 91 69 06 	lds	r25, 0x0669	; 0x800669 <_ZL12receive_tail>
    22a2:	e9 17       	cp	r30, r25
    22a4:	39 f0       	breq	.+14     	; 0x22b4 <__vector_25+0x40>
    22a6:	e0 93 6a 06 	sts	0x066A, r30	; 0x80066a <_ZL12receive_head>
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	e5 59       	subi	r30, 0x95	; 149
    22ae:	f9 4f       	sbci	r31, 0xF9	; 249
    22b0:	20 83       	st	Z, r18
    22b2:	01 c0       	rjmp	.+2      	; 0x22b6 <__vector_25+0x42>
    22b4:	82 e0       	ldi	r24, 0x02	; 2
    22b6:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <_ZL18last_receive_error>
    22ba:	89 2b       	or	r24, r25
    22bc:	80 93 68 06 	sts	0x0668, r24	; 0x800668 <_ZL18last_receive_error>
    22c0:	ff 91       	pop	r31
    22c2:	ef 91       	pop	r30
    22c4:	9f 91       	pop	r25
    22c6:	8f 91       	pop	r24
    22c8:	2f 91       	pop	r18
    22ca:	0f 90       	pop	r0
    22cc:	0b be       	out	0x3b, r0	; 59
    22ce:	0f 90       	pop	r0
    22d0:	0f be       	out	0x3f, r0	; 63
    22d2:	0f 90       	pop	r0
    22d4:	1f 90       	pop	r1
    22d6:	18 95       	reti

000022d8 <__vector_26>:
    22d8:	1f 92       	push	r1
    22da:	0f 92       	push	r0
    22dc:	0f b6       	in	r0, 0x3f	; 63
    22de:	0f 92       	push	r0
    22e0:	11 24       	eor	r1, r1
    22e2:	0b b6       	in	r0, 0x3b	; 59
    22e4:	0f 92       	push	r0
    22e6:	8f 93       	push	r24
    22e8:	9f 93       	push	r25
    22ea:	ef 93       	push	r30
    22ec:	ff 93       	push	r31
    22ee:	90 91 8c 06 	lds	r25, 0x068C	; 0x80068c <_ZL13transmit_head>
    22f2:	80 91 8b 06 	lds	r24, 0x068B	; 0x80068b <_ZL13transmit_tail>
    22f6:	98 17       	cp	r25, r24
    22f8:	69 f0       	breq	.+26     	; 0x2314 <__vector_26+0x3c>
    22fa:	e0 91 8b 06 	lds	r30, 0x068B	; 0x80068b <_ZL13transmit_tail>
    22fe:	ef 5f       	subi	r30, 0xFF	; 255
    2300:	ef 71       	andi	r30, 0x1F	; 31
    2302:	e0 93 8b 06 	sts	0x068B, r30	; 0x80068b <_ZL13transmit_tail>
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	e3 57       	subi	r30, 0x73	; 115
    230a:	f9 4f       	sbci	r31, 0xF9	; 249
    230c:	80 81       	ld	r24, Z
    230e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    2312:	05 c0       	rjmp	.+10     	; 0x231e <__vector_26+0x46>
    2314:	e1 ec       	ldi	r30, 0xC1	; 193
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	80 81       	ld	r24, Z
    231a:	8f 7d       	andi	r24, 0xDF	; 223
    231c:	80 83       	st	Z, r24
    231e:	ff 91       	pop	r31
    2320:	ef 91       	pop	r30
    2322:	9f 91       	pop	r25
    2324:	8f 91       	pop	r24
    2326:	0f 90       	pop	r0
    2328:	0b be       	out	0x3b, r0	; 59
    232a:	0f 90       	pop	r0
    232c:	0f be       	out	0x3f, r0	; 63
    232e:	0f 90       	pop	r0
    2330:	1f 90       	pop	r1
    2332:	18 95       	reti

00002334 <__vector_36>:
    2334:	1f 92       	push	r1
    2336:	0f 92       	push	r0
    2338:	0f b6       	in	r0, 0x3f	; 63
    233a:	0f 92       	push	r0
    233c:	11 24       	eor	r1, r1
    233e:	0b b6       	in	r0, 0x3b	; 59
    2340:	0f 92       	push	r0
    2342:	2f 93       	push	r18
    2344:	8f 93       	push	r24
    2346:	9f 93       	push	r25
    2348:	ef 93       	push	r30
    234a:	ff 93       	push	r31
    234c:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    2350:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    2354:	8c 71       	andi	r24, 0x1C	; 28
    2356:	e0 91 af 06 	lds	r30, 0x06AF	; 0x8006af <_ZL12receive_head>
    235a:	ef 5f       	subi	r30, 0xFF	; 255
    235c:	90 91 ae 06 	lds	r25, 0x06AE	; 0x8006ae <_ZL12receive_tail>
    2360:	e9 17       	cp	r30, r25
    2362:	39 f0       	breq	.+14     	; 0x2372 <__vector_36+0x3e>
    2364:	e0 93 af 06 	sts	0x06AF, r30	; 0x8006af <_ZL12receive_head>
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	e0 55       	subi	r30, 0x50	; 80
    236c:	f9 4f       	sbci	r31, 0xF9	; 249
    236e:	20 83       	st	Z, r18
    2370:	01 c0       	rjmp	.+2      	; 0x2374 <__vector_36+0x40>
    2372:	82 e0       	ldi	r24, 0x02	; 2
    2374:	90 91 ad 06 	lds	r25, 0x06AD	; 0x8006ad <_ZL18last_receive_error>
    2378:	89 2b       	or	r24, r25
    237a:	80 93 ad 06 	sts	0x06AD, r24	; 0x8006ad <_ZL18last_receive_error>
    237e:	ff 91       	pop	r31
    2380:	ef 91       	pop	r30
    2382:	9f 91       	pop	r25
    2384:	8f 91       	pop	r24
    2386:	2f 91       	pop	r18
    2388:	0f 90       	pop	r0
    238a:	0b be       	out	0x3b, r0	; 59
    238c:	0f 90       	pop	r0
    238e:	0f be       	out	0x3f, r0	; 63
    2390:	0f 90       	pop	r0
    2392:	1f 90       	pop	r1
    2394:	18 95       	reti

00002396 <__vector_37>:
    2396:	1f 92       	push	r1
    2398:	0f 92       	push	r0
    239a:	0f b6       	in	r0, 0x3f	; 63
    239c:	0f 92       	push	r0
    239e:	11 24       	eor	r1, r1
    23a0:	0b b6       	in	r0, 0x3b	; 59
    23a2:	0f 92       	push	r0
    23a4:	8f 93       	push	r24
    23a6:	9f 93       	push	r25
    23a8:	ef 93       	push	r30
    23aa:	ff 93       	push	r31
    23ac:	90 91 b1 07 	lds	r25, 0x07B1	; 0x8007b1 <_ZL13transmit_head>
    23b0:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <_ZL13transmit_tail>
    23b4:	98 17       	cp	r25, r24
    23b6:	61 f0       	breq	.+24     	; 0x23d0 <__vector_37+0x3a>
    23b8:	e0 91 b0 07 	lds	r30, 0x07B0	; 0x8007b0 <_ZL13transmit_tail>
    23bc:	ef 5f       	subi	r30, 0xFF	; 255
    23be:	e0 93 b0 07 	sts	0x07B0, r30	; 0x8007b0 <_ZL13transmit_tail>
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	ee 54       	subi	r30, 0x4E	; 78
    23c6:	f8 4f       	sbci	r31, 0xF8	; 248
    23c8:	80 81       	ld	r24, Z
    23ca:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    23ce:	05 c0       	rjmp	.+10     	; 0x23da <__vector_37+0x44>
    23d0:	e9 ec       	ldi	r30, 0xC9	; 201
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	80 81       	ld	r24, Z
    23d6:	8f 7d       	andi	r24, 0xDF	; 223
    23d8:	80 83       	st	Z, r24
    23da:	ff 91       	pop	r31
    23dc:	ef 91       	pop	r30
    23de:	9f 91       	pop	r25
    23e0:	8f 91       	pop	r24
    23e2:	0f 90       	pop	r0
    23e4:	0b be       	out	0x3b, r0	; 59
    23e6:	0f 90       	pop	r0
    23e8:	0f be       	out	0x3f, r0	; 63
    23ea:	0f 90       	pop	r0
    23ec:	1f 90       	pop	r1
    23ee:	18 95       	reti

000023f0 <_Z16uart1_initializej>:
    23f0:	10 92 b1 07 	sts	0x07B1, r1	; 0x8007b1 <_ZL13transmit_head>
    23f4:	10 92 b0 07 	sts	0x07B0, r1	; 0x8007b0 <_ZL13transmit_tail>
    23f8:	10 92 af 06 	sts	0x06AF, r1	; 0x8006af <_ZL12receive_head>
    23fc:	10 92 ae 06 	sts	0x06AE, r1	; 0x8006ae <_ZL12receive_tail>
    2400:	90 78       	andi	r25, 0x80	; 128
    2402:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    2406:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    240a:	88 e9       	ldi	r24, 0x98	; 152
    240c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    2410:	86 e0       	ldi	r24, 0x06	; 6
    2412:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    2416:	08 95       	ret

00002418 <_Z15uart1_read_bytev>:
    2418:	90 91 af 06 	lds	r25, 0x06AF	; 0x8006af <_ZL12receive_head>
    241c:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <_ZL12receive_tail>
    2420:	98 17       	cp	r25, r24
    2422:	a1 f0       	breq	.+40     	; 0x244c <_Z15uart1_read_bytev+0x34>
    2424:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <_ZL12receive_tail>
    2428:	8f 5f       	subi	r24, 0xFF	; 255
    242a:	e8 2f       	mov	r30, r24
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	e0 55       	subi	r30, 0x50	; 80
    2430:	f9 4f       	sbci	r31, 0xF9	; 249
    2432:	20 81       	ld	r18, Z
    2434:	80 93 ae 06 	sts	0x06AE, r24	; 0x8006ae <_ZL12receive_tail>
    2438:	80 91 ad 06 	lds	r24, 0x06AD	; 0x8006ad <_ZL18last_receive_error>
    243c:	10 92 ad 06 	sts	0x06AD, r1	; 0x8006ad <_ZL18last_receive_error>
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	98 2f       	mov	r25, r24
    2444:	88 27       	eor	r24, r24
    2446:	82 0f       	add	r24, r18
    2448:	91 1d       	adc	r25, r1
    244a:	08 95       	ret
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	91 e0       	ldi	r25, 0x01	; 1
    2450:	08 95       	ret

00002452 <_Z15uart1_send_byteh>:
    2452:	20 91 b1 07 	lds	r18, 0x07B1	; 0x8007b1 <_ZL13transmit_head>
    2456:	2f 5f       	subi	r18, 0xFF	; 255
    2458:	90 91 b0 07 	lds	r25, 0x07B0	; 0x8007b0 <_ZL13transmit_tail>
    245c:	29 17       	cp	r18, r25
    245e:	e1 f3       	breq	.-8      	; 0x2458 <_Z15uart1_send_byteh+0x6>
    2460:	e2 2f       	mov	r30, r18
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	ee 54       	subi	r30, 0x4E	; 78
    2466:	f8 4f       	sbci	r31, 0xF8	; 248
    2468:	80 83       	st	Z, r24
    246a:	20 93 b1 07 	sts	0x07B1, r18	; 0x8007b1 <_ZL13transmit_head>
    246e:	e9 ec       	ldi	r30, 0xC9	; 201
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	80 81       	ld	r24, Z
    2474:	80 62       	ori	r24, 0x20	; 32
    2476:	80 83       	st	Z, r24
    2478:	08 95       	ret

0000247a <__vector_51>:
    247a:	1f 92       	push	r1
    247c:	0f 92       	push	r0
    247e:	0f b6       	in	r0, 0x3f	; 63
    2480:	0f 92       	push	r0
    2482:	11 24       	eor	r1, r1
    2484:	0b b6       	in	r0, 0x3b	; 59
    2486:	0f 92       	push	r0
    2488:	2f 93       	push	r18
    248a:	8f 93       	push	r24
    248c:	9f 93       	push	r25
    248e:	ef 93       	push	r30
    2490:	ff 93       	push	r31
    2492:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
    2496:	20 91 d6 00 	lds	r18, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7e00d6>
    249a:	8c 71       	andi	r24, 0x1C	; 28
    249c:	e0 91 b4 08 	lds	r30, 0x08B4	; 0x8008b4 <_ZL12receive_head>
    24a0:	ef 5f       	subi	r30, 0xFF	; 255
    24a2:	ef 71       	andi	r30, 0x1F	; 31
    24a4:	90 91 b3 08 	lds	r25, 0x08B3	; 0x8008b3 <_ZL12receive_tail>
    24a8:	e9 17       	cp	r30, r25
    24aa:	39 f0       	breq	.+14     	; 0x24ba <__vector_51+0x40>
    24ac:	e0 93 b4 08 	sts	0x08B4, r30	; 0x8008b4 <_ZL12receive_head>
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	eb 54       	subi	r30, 0x4B	; 75
    24b4:	f7 4f       	sbci	r31, 0xF7	; 247
    24b6:	20 83       	st	Z, r18
    24b8:	01 c0       	rjmp	.+2      	; 0x24bc <__vector_51+0x42>
    24ba:	82 e0       	ldi	r24, 0x02	; 2
    24bc:	90 91 b2 08 	lds	r25, 0x08B2	; 0x8008b2 <_ZL18last_receive_error>
    24c0:	89 2b       	or	r24, r25
    24c2:	80 93 b2 08 	sts	0x08B2, r24	; 0x8008b2 <_ZL18last_receive_error>
    24c6:	ff 91       	pop	r31
    24c8:	ef 91       	pop	r30
    24ca:	9f 91       	pop	r25
    24cc:	8f 91       	pop	r24
    24ce:	2f 91       	pop	r18
    24d0:	0f 90       	pop	r0
    24d2:	0b be       	out	0x3b, r0	; 59
    24d4:	0f 90       	pop	r0
    24d6:	0f be       	out	0x3f, r0	; 63
    24d8:	0f 90       	pop	r0
    24da:	1f 90       	pop	r1
    24dc:	18 95       	reti

000024de <__vector_52>:
    24de:	1f 92       	push	r1
    24e0:	0f 92       	push	r0
    24e2:	0f b6       	in	r0, 0x3f	; 63
    24e4:	0f 92       	push	r0
    24e6:	11 24       	eor	r1, r1
    24e8:	0b b6       	in	r0, 0x3b	; 59
    24ea:	0f 92       	push	r0
    24ec:	8f 93       	push	r24
    24ee:	9f 93       	push	r25
    24f0:	ef 93       	push	r30
    24f2:	ff 93       	push	r31
    24f4:	90 91 d6 08 	lds	r25, 0x08D6	; 0x8008d6 <_ZL13transmit_head>
    24f8:	80 91 d5 08 	lds	r24, 0x08D5	; 0x8008d5 <_ZL13transmit_tail>
    24fc:	98 17       	cp	r25, r24
    24fe:	69 f0       	breq	.+26     	; 0x251a <__vector_52+0x3c>
    2500:	e0 91 d5 08 	lds	r30, 0x08D5	; 0x8008d5 <_ZL13transmit_tail>
    2504:	ef 5f       	subi	r30, 0xFF	; 255
    2506:	ef 71       	andi	r30, 0x1F	; 31
    2508:	e0 93 d5 08 	sts	0x08D5, r30	; 0x8008d5 <_ZL13transmit_tail>
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	e9 52       	subi	r30, 0x29	; 41
    2510:	f7 4f       	sbci	r31, 0xF7	; 247
    2512:	80 81       	ld	r24, Z
    2514:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7e00d6>
    2518:	05 c0       	rjmp	.+10     	; 0x2524 <__vector_52+0x46>
    251a:	e1 ed       	ldi	r30, 0xD1	; 209
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	80 81       	ld	r24, Z
    2520:	8f 7d       	andi	r24, 0xDF	; 223
    2522:	80 83       	st	Z, r24
    2524:	ff 91       	pop	r31
    2526:	ef 91       	pop	r30
    2528:	9f 91       	pop	r25
    252a:	8f 91       	pop	r24
    252c:	0f 90       	pop	r0
    252e:	0b be       	out	0x3b, r0	; 59
    2530:	0f 90       	pop	r0
    2532:	0f be       	out	0x3f, r0	; 63
    2534:	0f 90       	pop	r0
    2536:	1f 90       	pop	r1
    2538:	18 95       	reti

0000253a <__vector_54>:
static volatile uint8_t last_receive_error;

/*------------------------ Interrupt Service Routines ------------------------*/

ISR (UART3_RECEIVE_INTERRUPT)
{
    253a:	1f 92       	push	r1
    253c:	0f 92       	push	r0
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	0f 92       	push	r0
    2542:	11 24       	eor	r1, r1
    2544:	0b b6       	in	r0, 0x3b	; 59
    2546:	0f 92       	push	r0
    2548:	2f 93       	push	r18
    254a:	8f 93       	push	r24
    254c:	9f 93       	push	r25
    254e:	ef 93       	push	r30
    2550:	ff 93       	push	r31
	uint8_t new_head, data, status, error;
	status = UART3_STATUS;
    2552:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__DATA_REGION_ORIGIN__+0x30>
	data = UART3_DATA;
    2556:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__DATA_REGION_ORIGIN__+0x36>

	// detect frame error, data overrun, or parity error
	error = status & ((1 << FE3) | (1 << DOR3)| (1 << UPE3));

	new_head = (receive_head + 1) & UART3_BUFFER_MASK;
    255a:	e0 91 fa 08 	lds	r30, 0x08FA	; 0x8008fa <_ZL12receive_head>
    255e:	ef 5f       	subi	r30, 0xFF	; 255
    2560:	ef 71       	andi	r30, 0x1F	; 31
	if (new_head == receive_tail)
    2562:	90 91 f9 08 	lds	r25, 0x08F9	; 0x8008f9 <_ZL12receive_tail>
    2566:	e9 17       	cp	r30, r25
    2568:	41 f0       	breq	.+16     	; 0x257a <__vector_54+0x40>
	uint8_t new_head, data, status, error;
	status = UART3_STATUS;
	data = UART3_DATA;

	// detect frame error, data overrun, or parity error
	error = status & ((1 << FE3) | (1 << DOR3)| (1 << UPE3));
    256a:	8c 71       	andi	r24, 0x1C	; 28
	new_head = (receive_head + 1) & UART3_BUFFER_MASK;
	if (new_head == receive_tail)
	error = UART3_BUFFER_OVERFLOW >> 8;
	else
	{
		receive_head = new_head;
    256c:	e0 93 fa 08 	sts	0x08FA, r30	; 0x8008fa <_ZL12receive_head>
		receive_buffer[new_head] = data;
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	e5 50       	subi	r30, 0x05	; 5
    2574:	f7 4f       	sbci	r31, 0xF7	; 247
    2576:	20 83       	st	Z, r18
    2578:	01 c0       	rjmp	.+2      	; 0x257c <__vector_54+0x42>
	// detect frame error, data overrun, or parity error
	error = status & ((1 << FE3) | (1 << DOR3)| (1 << UPE3));

	new_head = (receive_head + 1) & UART3_BUFFER_MASK;
	if (new_head == receive_tail)
	error = UART3_BUFFER_OVERFLOW >> 8;
    257a:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		receive_head = new_head;
		receive_buffer[new_head] = data;
	}
	if(receive_count < UART3_BUFFER_SIZE -1)
    257c:	90 91 f8 08 	lds	r25, 0x08F8	; 0x8008f8 <_ZL13receive_count>
    2580:	9f 31       	cpi	r25, 0x1F	; 31
    2582:	28 f4       	brcc	.+10     	; 0x258e <__vector_54+0x54>
	receive_count++;
    2584:	90 91 f8 08 	lds	r25, 0x08F8	; 0x8008f8 <_ZL13receive_count>
    2588:	9f 5f       	subi	r25, 0xFF	; 255
    258a:	90 93 f8 08 	sts	0x08F8, r25	; 0x8008f8 <_ZL13receive_count>
	last_receive_error |= error;
    258e:	90 91 f7 08 	lds	r25, 0x08F7	; 0x8008f7 <_ZL18last_receive_error>
    2592:	89 2b       	or	r24, r25
    2594:	80 93 f7 08 	sts	0x08F7, r24	; 0x8008f7 <_ZL18last_receive_error>
}
    2598:	ff 91       	pop	r31
    259a:	ef 91       	pop	r30
    259c:	9f 91       	pop	r25
    259e:	8f 91       	pop	r24
    25a0:	2f 91       	pop	r18
    25a2:	0f 90       	pop	r0
    25a4:	0b be       	out	0x3b, r0	; 59
    25a6:	0f 90       	pop	r0
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	0f 90       	pop	r0
    25ac:	1f 90       	pop	r1
    25ae:	18 95       	reti

000025b0 <__vector_55>:

ISR (UART3_TRANSMIT_INTERRUPT)
{
    25b0:	1f 92       	push	r1
    25b2:	0f 92       	push	r0
    25b4:	0f b6       	in	r0, 0x3f	; 63
    25b6:	0f 92       	push	r0
    25b8:	11 24       	eor	r1, r1
    25ba:	0b b6       	in	r0, 0x3b	; 59
    25bc:	0f 92       	push	r0
    25be:	8f 93       	push	r24
    25c0:	9f 93       	push	r25
    25c2:	ef 93       	push	r30
    25c4:	ff 93       	push	r31
	uint8_t new_tail;
	if (transmit_head != transmit_tail)
    25c6:	90 91 1c 09 	lds	r25, 0x091C	; 0x80091c <_ZL13transmit_head>
    25ca:	80 91 1b 09 	lds	r24, 0x091B	; 0x80091b <_ZL13transmit_tail>
    25ce:	98 17       	cp	r25, r24
    25d0:	69 f0       	breq	.+26     	; 0x25ec <__vector_55+0x3c>
	{
		new_tail = (transmit_tail + 1) & UART3_BUFFER_MASK;
    25d2:	e0 91 1b 09 	lds	r30, 0x091B	; 0x80091b <_ZL13transmit_tail>
    25d6:	ef 5f       	subi	r30, 0xFF	; 255
    25d8:	ef 71       	andi	r30, 0x1F	; 31
		transmit_tail = new_tail;
    25da:	e0 93 1b 09 	sts	0x091B, r30	; 0x80091b <_ZL13transmit_tail>
		UART3_DATA = transmit_buffer[new_tail]; // transmit
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	e3 5e       	subi	r30, 0xE3	; 227
    25e2:	f6 4f       	sbci	r31, 0xF6	; 246
    25e4:	80 81       	ld	r24, Z
    25e6:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__DATA_REGION_ORIGIN__+0x36>
    25ea:	05 c0       	rjmp	.+10     	; 0x25f6 <__vector_55+0x46>
	}
	else
	UART3_CONTROL_B &= ~(1 << UDRIE3); // buffer empty so end transmission
    25ec:	e1 e3       	ldi	r30, 0x31	; 49
    25ee:	f1 e0       	ldi	r31, 0x01	; 1
    25f0:	80 81       	ld	r24, Z
    25f2:	8f 7d       	andi	r24, 0xDF	; 223
    25f4:	80 83       	st	Z, r24
}
    25f6:	ff 91       	pop	r31
    25f8:	ef 91       	pop	r30
    25fa:	9f 91       	pop	r25
    25fc:	8f 91       	pop	r24
    25fe:	0f 90       	pop	r0
    2600:	0b be       	out	0x3b, r0	; 59
    2602:	0f 90       	pop	r0
    2604:	0f be       	out	0x3f, r0	; 63
    2606:	0f 90       	pop	r0
    2608:	1f 90       	pop	r1
    260a:	18 95       	reti

0000260c <__subsf3>:
    260c:	50 58       	subi	r21, 0x80	; 128

0000260e <__addsf3>:
    260e:	bb 27       	eor	r27, r27
    2610:	aa 27       	eor	r26, r26
    2612:	0e d0       	rcall	.+28     	; 0x2630 <__addsf3x>
    2614:	e5 c0       	rjmp	.+458    	; 0x27e0 <__fp_round>
    2616:	d6 d0       	rcall	.+428    	; 0x27c4 <__fp_pscA>
    2618:	30 f0       	brcs	.+12     	; 0x2626 <__addsf3+0x18>
    261a:	db d0       	rcall	.+438    	; 0x27d2 <__fp_pscB>
    261c:	20 f0       	brcs	.+8      	; 0x2626 <__addsf3+0x18>
    261e:	31 f4       	brne	.+12     	; 0x262c <__addsf3+0x1e>
    2620:	9f 3f       	cpi	r25, 0xFF	; 255
    2622:	11 f4       	brne	.+4      	; 0x2628 <__addsf3+0x1a>
    2624:	1e f4       	brtc	.+6      	; 0x262c <__addsf3+0x1e>
    2626:	cb c0       	rjmp	.+406    	; 0x27be <__fp_nan>
    2628:	0e f4       	brtc	.+2      	; 0x262c <__addsf3+0x1e>
    262a:	e0 95       	com	r30
    262c:	e7 fb       	bst	r30, 7
    262e:	c1 c0       	rjmp	.+386    	; 0x27b2 <__fp_inf>

00002630 <__addsf3x>:
    2630:	e9 2f       	mov	r30, r25
    2632:	e7 d0       	rcall	.+462    	; 0x2802 <__fp_split3>
    2634:	80 f3       	brcs	.-32     	; 0x2616 <__addsf3+0x8>
    2636:	ba 17       	cp	r27, r26
    2638:	62 07       	cpc	r22, r18
    263a:	73 07       	cpc	r23, r19
    263c:	84 07       	cpc	r24, r20
    263e:	95 07       	cpc	r25, r21
    2640:	18 f0       	brcs	.+6      	; 0x2648 <__addsf3x+0x18>
    2642:	71 f4       	brne	.+28     	; 0x2660 <__addsf3x+0x30>
    2644:	9e f5       	brtc	.+102    	; 0x26ac <__addsf3x+0x7c>
    2646:	ff c0       	rjmp	.+510    	; 0x2846 <__fp_zero>
    2648:	0e f4       	brtc	.+2      	; 0x264c <__addsf3x+0x1c>
    264a:	e0 95       	com	r30
    264c:	0b 2e       	mov	r0, r27
    264e:	ba 2f       	mov	r27, r26
    2650:	a0 2d       	mov	r26, r0
    2652:	0b 01       	movw	r0, r22
    2654:	b9 01       	movw	r22, r18
    2656:	90 01       	movw	r18, r0
    2658:	0c 01       	movw	r0, r24
    265a:	ca 01       	movw	r24, r20
    265c:	a0 01       	movw	r20, r0
    265e:	11 24       	eor	r1, r1
    2660:	ff 27       	eor	r31, r31
    2662:	59 1b       	sub	r21, r25
    2664:	99 f0       	breq	.+38     	; 0x268c <__addsf3x+0x5c>
    2666:	59 3f       	cpi	r21, 0xF9	; 249
    2668:	50 f4       	brcc	.+20     	; 0x267e <__addsf3x+0x4e>
    266a:	50 3e       	cpi	r21, 0xE0	; 224
    266c:	68 f1       	brcs	.+90     	; 0x26c8 <__addsf3x+0x98>
    266e:	1a 16       	cp	r1, r26
    2670:	f0 40       	sbci	r31, 0x00	; 0
    2672:	a2 2f       	mov	r26, r18
    2674:	23 2f       	mov	r18, r19
    2676:	34 2f       	mov	r19, r20
    2678:	44 27       	eor	r20, r20
    267a:	58 5f       	subi	r21, 0xF8	; 248
    267c:	f3 cf       	rjmp	.-26     	; 0x2664 <__addsf3x+0x34>
    267e:	46 95       	lsr	r20
    2680:	37 95       	ror	r19
    2682:	27 95       	ror	r18
    2684:	a7 95       	ror	r26
    2686:	f0 40       	sbci	r31, 0x00	; 0
    2688:	53 95       	inc	r21
    268a:	c9 f7       	brne	.-14     	; 0x267e <__addsf3x+0x4e>
    268c:	7e f4       	brtc	.+30     	; 0x26ac <__addsf3x+0x7c>
    268e:	1f 16       	cp	r1, r31
    2690:	ba 0b       	sbc	r27, r26
    2692:	62 0b       	sbc	r22, r18
    2694:	73 0b       	sbc	r23, r19
    2696:	84 0b       	sbc	r24, r20
    2698:	ba f0       	brmi	.+46     	; 0x26c8 <__addsf3x+0x98>
    269a:	91 50       	subi	r25, 0x01	; 1
    269c:	a1 f0       	breq	.+40     	; 0x26c6 <__addsf3x+0x96>
    269e:	ff 0f       	add	r31, r31
    26a0:	bb 1f       	adc	r27, r27
    26a2:	66 1f       	adc	r22, r22
    26a4:	77 1f       	adc	r23, r23
    26a6:	88 1f       	adc	r24, r24
    26a8:	c2 f7       	brpl	.-16     	; 0x269a <__addsf3x+0x6a>
    26aa:	0e c0       	rjmp	.+28     	; 0x26c8 <__addsf3x+0x98>
    26ac:	ba 0f       	add	r27, r26
    26ae:	62 1f       	adc	r22, r18
    26b0:	73 1f       	adc	r23, r19
    26b2:	84 1f       	adc	r24, r20
    26b4:	48 f4       	brcc	.+18     	; 0x26c8 <__addsf3x+0x98>
    26b6:	87 95       	ror	r24
    26b8:	77 95       	ror	r23
    26ba:	67 95       	ror	r22
    26bc:	b7 95       	ror	r27
    26be:	f7 95       	ror	r31
    26c0:	9e 3f       	cpi	r25, 0xFE	; 254
    26c2:	08 f0       	brcs	.+2      	; 0x26c6 <__addsf3x+0x96>
    26c4:	b3 cf       	rjmp	.-154    	; 0x262c <__addsf3+0x1e>
    26c6:	93 95       	inc	r25
    26c8:	88 0f       	add	r24, r24
    26ca:	08 f0       	brcs	.+2      	; 0x26ce <__addsf3x+0x9e>
    26cc:	99 27       	eor	r25, r25
    26ce:	ee 0f       	add	r30, r30
    26d0:	97 95       	ror	r25
    26d2:	87 95       	ror	r24
    26d4:	08 95       	ret

000026d6 <__fixsfsi>:
    26d6:	04 d0       	rcall	.+8      	; 0x26e0 <__fixunssfsi>
    26d8:	68 94       	set
    26da:	b1 11       	cpse	r27, r1
    26dc:	b5 c0       	rjmp	.+362    	; 0x2848 <__fp_szero>
    26de:	08 95       	ret

000026e0 <__fixunssfsi>:
    26e0:	98 d0       	rcall	.+304    	; 0x2812 <__fp_splitA>
    26e2:	88 f0       	brcs	.+34     	; 0x2706 <__fixunssfsi+0x26>
    26e4:	9f 57       	subi	r25, 0x7F	; 127
    26e6:	90 f0       	brcs	.+36     	; 0x270c <__fixunssfsi+0x2c>
    26e8:	b9 2f       	mov	r27, r25
    26ea:	99 27       	eor	r25, r25
    26ec:	b7 51       	subi	r27, 0x17	; 23
    26ee:	a0 f0       	brcs	.+40     	; 0x2718 <__fixunssfsi+0x38>
    26f0:	d1 f0       	breq	.+52     	; 0x2726 <__fixunssfsi+0x46>
    26f2:	66 0f       	add	r22, r22
    26f4:	77 1f       	adc	r23, r23
    26f6:	88 1f       	adc	r24, r24
    26f8:	99 1f       	adc	r25, r25
    26fa:	1a f0       	brmi	.+6      	; 0x2702 <__fixunssfsi+0x22>
    26fc:	ba 95       	dec	r27
    26fe:	c9 f7       	brne	.-14     	; 0x26f2 <__fixunssfsi+0x12>
    2700:	12 c0       	rjmp	.+36     	; 0x2726 <__fixunssfsi+0x46>
    2702:	b1 30       	cpi	r27, 0x01	; 1
    2704:	81 f0       	breq	.+32     	; 0x2726 <__fixunssfsi+0x46>
    2706:	9f d0       	rcall	.+318    	; 0x2846 <__fp_zero>
    2708:	b1 e0       	ldi	r27, 0x01	; 1
    270a:	08 95       	ret
    270c:	9c c0       	rjmp	.+312    	; 0x2846 <__fp_zero>
    270e:	67 2f       	mov	r22, r23
    2710:	78 2f       	mov	r23, r24
    2712:	88 27       	eor	r24, r24
    2714:	b8 5f       	subi	r27, 0xF8	; 248
    2716:	39 f0       	breq	.+14     	; 0x2726 <__fixunssfsi+0x46>
    2718:	b9 3f       	cpi	r27, 0xF9	; 249
    271a:	cc f3       	brlt	.-14     	; 0x270e <__fixunssfsi+0x2e>
    271c:	86 95       	lsr	r24
    271e:	77 95       	ror	r23
    2720:	67 95       	ror	r22
    2722:	b3 95       	inc	r27
    2724:	d9 f7       	brne	.-10     	; 0x271c <__fixunssfsi+0x3c>
    2726:	3e f4       	brtc	.+14     	; 0x2736 <__fixunssfsi+0x56>
    2728:	90 95       	com	r25
    272a:	80 95       	com	r24
    272c:	70 95       	com	r23
    272e:	61 95       	neg	r22
    2730:	7f 4f       	sbci	r23, 0xFF	; 255
    2732:	8f 4f       	sbci	r24, 0xFF	; 255
    2734:	9f 4f       	sbci	r25, 0xFF	; 255
    2736:	08 95       	ret

00002738 <__floatunsisf>:
    2738:	e8 94       	clt
    273a:	09 c0       	rjmp	.+18     	; 0x274e <__floatsisf+0x12>

0000273c <__floatsisf>:
    273c:	97 fb       	bst	r25, 7
    273e:	3e f4       	brtc	.+14     	; 0x274e <__floatsisf+0x12>
    2740:	90 95       	com	r25
    2742:	80 95       	com	r24
    2744:	70 95       	com	r23
    2746:	61 95       	neg	r22
    2748:	7f 4f       	sbci	r23, 0xFF	; 255
    274a:	8f 4f       	sbci	r24, 0xFF	; 255
    274c:	9f 4f       	sbci	r25, 0xFF	; 255
    274e:	99 23       	and	r25, r25
    2750:	a9 f0       	breq	.+42     	; 0x277c <__floatsisf+0x40>
    2752:	f9 2f       	mov	r31, r25
    2754:	96 e9       	ldi	r25, 0x96	; 150
    2756:	bb 27       	eor	r27, r27
    2758:	93 95       	inc	r25
    275a:	f6 95       	lsr	r31
    275c:	87 95       	ror	r24
    275e:	77 95       	ror	r23
    2760:	67 95       	ror	r22
    2762:	b7 95       	ror	r27
    2764:	f1 11       	cpse	r31, r1
    2766:	f8 cf       	rjmp	.-16     	; 0x2758 <__floatsisf+0x1c>
    2768:	fa f4       	brpl	.+62     	; 0x27a8 <__floatsisf+0x6c>
    276a:	bb 0f       	add	r27, r27
    276c:	11 f4       	brne	.+4      	; 0x2772 <__floatsisf+0x36>
    276e:	60 ff       	sbrs	r22, 0
    2770:	1b c0       	rjmp	.+54     	; 0x27a8 <__floatsisf+0x6c>
    2772:	6f 5f       	subi	r22, 0xFF	; 255
    2774:	7f 4f       	sbci	r23, 0xFF	; 255
    2776:	8f 4f       	sbci	r24, 0xFF	; 255
    2778:	9f 4f       	sbci	r25, 0xFF	; 255
    277a:	16 c0       	rjmp	.+44     	; 0x27a8 <__floatsisf+0x6c>
    277c:	88 23       	and	r24, r24
    277e:	11 f0       	breq	.+4      	; 0x2784 <__floatsisf+0x48>
    2780:	96 e9       	ldi	r25, 0x96	; 150
    2782:	11 c0       	rjmp	.+34     	; 0x27a6 <__floatsisf+0x6a>
    2784:	77 23       	and	r23, r23
    2786:	21 f0       	breq	.+8      	; 0x2790 <__floatsisf+0x54>
    2788:	9e e8       	ldi	r25, 0x8E	; 142
    278a:	87 2f       	mov	r24, r23
    278c:	76 2f       	mov	r23, r22
    278e:	05 c0       	rjmp	.+10     	; 0x279a <__floatsisf+0x5e>
    2790:	66 23       	and	r22, r22
    2792:	71 f0       	breq	.+28     	; 0x27b0 <__floatsisf+0x74>
    2794:	96 e8       	ldi	r25, 0x86	; 134
    2796:	86 2f       	mov	r24, r22
    2798:	70 e0       	ldi	r23, 0x00	; 0
    279a:	60 e0       	ldi	r22, 0x00	; 0
    279c:	2a f0       	brmi	.+10     	; 0x27a8 <__floatsisf+0x6c>
    279e:	9a 95       	dec	r25
    27a0:	66 0f       	add	r22, r22
    27a2:	77 1f       	adc	r23, r23
    27a4:	88 1f       	adc	r24, r24
    27a6:	da f7       	brpl	.-10     	; 0x279e <__floatsisf+0x62>
    27a8:	88 0f       	add	r24, r24
    27aa:	96 95       	lsr	r25
    27ac:	87 95       	ror	r24
    27ae:	97 f9       	bld	r25, 7
    27b0:	08 95       	ret

000027b2 <__fp_inf>:
    27b2:	97 f9       	bld	r25, 7
    27b4:	9f 67       	ori	r25, 0x7F	; 127
    27b6:	80 e8       	ldi	r24, 0x80	; 128
    27b8:	70 e0       	ldi	r23, 0x00	; 0
    27ba:	60 e0       	ldi	r22, 0x00	; 0
    27bc:	08 95       	ret

000027be <__fp_nan>:
    27be:	9f ef       	ldi	r25, 0xFF	; 255
    27c0:	80 ec       	ldi	r24, 0xC0	; 192
    27c2:	08 95       	ret

000027c4 <__fp_pscA>:
    27c4:	00 24       	eor	r0, r0
    27c6:	0a 94       	dec	r0
    27c8:	16 16       	cp	r1, r22
    27ca:	17 06       	cpc	r1, r23
    27cc:	18 06       	cpc	r1, r24
    27ce:	09 06       	cpc	r0, r25
    27d0:	08 95       	ret

000027d2 <__fp_pscB>:
    27d2:	00 24       	eor	r0, r0
    27d4:	0a 94       	dec	r0
    27d6:	12 16       	cp	r1, r18
    27d8:	13 06       	cpc	r1, r19
    27da:	14 06       	cpc	r1, r20
    27dc:	05 06       	cpc	r0, r21
    27de:	08 95       	ret

000027e0 <__fp_round>:
    27e0:	09 2e       	mov	r0, r25
    27e2:	03 94       	inc	r0
    27e4:	00 0c       	add	r0, r0
    27e6:	11 f4       	brne	.+4      	; 0x27ec <__fp_round+0xc>
    27e8:	88 23       	and	r24, r24
    27ea:	52 f0       	brmi	.+20     	; 0x2800 <__fp_round+0x20>
    27ec:	bb 0f       	add	r27, r27
    27ee:	40 f4       	brcc	.+16     	; 0x2800 <__fp_round+0x20>
    27f0:	bf 2b       	or	r27, r31
    27f2:	11 f4       	brne	.+4      	; 0x27f8 <__fp_round+0x18>
    27f4:	60 ff       	sbrs	r22, 0
    27f6:	04 c0       	rjmp	.+8      	; 0x2800 <__fp_round+0x20>
    27f8:	6f 5f       	subi	r22, 0xFF	; 255
    27fa:	7f 4f       	sbci	r23, 0xFF	; 255
    27fc:	8f 4f       	sbci	r24, 0xFF	; 255
    27fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2800:	08 95       	ret

00002802 <__fp_split3>:
    2802:	57 fd       	sbrc	r21, 7
    2804:	90 58       	subi	r25, 0x80	; 128
    2806:	44 0f       	add	r20, r20
    2808:	55 1f       	adc	r21, r21
    280a:	59 f0       	breq	.+22     	; 0x2822 <__fp_splitA+0x10>
    280c:	5f 3f       	cpi	r21, 0xFF	; 255
    280e:	71 f0       	breq	.+28     	; 0x282c <__fp_splitA+0x1a>
    2810:	47 95       	ror	r20

00002812 <__fp_splitA>:
    2812:	88 0f       	add	r24, r24
    2814:	97 fb       	bst	r25, 7
    2816:	99 1f       	adc	r25, r25
    2818:	61 f0       	breq	.+24     	; 0x2832 <__fp_splitA+0x20>
    281a:	9f 3f       	cpi	r25, 0xFF	; 255
    281c:	79 f0       	breq	.+30     	; 0x283c <__fp_splitA+0x2a>
    281e:	87 95       	ror	r24
    2820:	08 95       	ret
    2822:	12 16       	cp	r1, r18
    2824:	13 06       	cpc	r1, r19
    2826:	14 06       	cpc	r1, r20
    2828:	55 1f       	adc	r21, r21
    282a:	f2 cf       	rjmp	.-28     	; 0x2810 <__fp_split3+0xe>
    282c:	46 95       	lsr	r20
    282e:	f1 df       	rcall	.-30     	; 0x2812 <__fp_splitA>
    2830:	08 c0       	rjmp	.+16     	; 0x2842 <__fp_splitA+0x30>
    2832:	16 16       	cp	r1, r22
    2834:	17 06       	cpc	r1, r23
    2836:	18 06       	cpc	r1, r24
    2838:	99 1f       	adc	r25, r25
    283a:	f1 cf       	rjmp	.-30     	; 0x281e <__fp_splitA+0xc>
    283c:	86 95       	lsr	r24
    283e:	71 05       	cpc	r23, r1
    2840:	61 05       	cpc	r22, r1
    2842:	08 94       	sec
    2844:	08 95       	ret

00002846 <__fp_zero>:
    2846:	e8 94       	clt

00002848 <__fp_szero>:
    2848:	bb 27       	eor	r27, r27
    284a:	66 27       	eor	r22, r22
    284c:	77 27       	eor	r23, r23
    284e:	cb 01       	movw	r24, r22
    2850:	97 f9       	bld	r25, 7
    2852:	08 95       	ret

00002854 <__mulsf3>:
    2854:	0b d0       	rcall	.+22     	; 0x286c <__mulsf3x>
    2856:	c4 cf       	rjmp	.-120    	; 0x27e0 <__fp_round>
    2858:	b5 df       	rcall	.-150    	; 0x27c4 <__fp_pscA>
    285a:	28 f0       	brcs	.+10     	; 0x2866 <__mulsf3+0x12>
    285c:	ba df       	rcall	.-140    	; 0x27d2 <__fp_pscB>
    285e:	18 f0       	brcs	.+6      	; 0x2866 <__mulsf3+0x12>
    2860:	95 23       	and	r25, r21
    2862:	09 f0       	breq	.+2      	; 0x2866 <__mulsf3+0x12>
    2864:	a6 cf       	rjmp	.-180    	; 0x27b2 <__fp_inf>
    2866:	ab cf       	rjmp	.-170    	; 0x27be <__fp_nan>
    2868:	11 24       	eor	r1, r1
    286a:	ee cf       	rjmp	.-36     	; 0x2848 <__fp_szero>

0000286c <__mulsf3x>:
    286c:	ca df       	rcall	.-108    	; 0x2802 <__fp_split3>
    286e:	a0 f3       	brcs	.-24     	; 0x2858 <__mulsf3+0x4>

00002870 <__mulsf3_pse>:
    2870:	95 9f       	mul	r25, r21
    2872:	d1 f3       	breq	.-12     	; 0x2868 <__mulsf3+0x14>
    2874:	95 0f       	add	r25, r21
    2876:	50 e0       	ldi	r21, 0x00	; 0
    2878:	55 1f       	adc	r21, r21
    287a:	62 9f       	mul	r22, r18
    287c:	f0 01       	movw	r30, r0
    287e:	72 9f       	mul	r23, r18
    2880:	bb 27       	eor	r27, r27
    2882:	f0 0d       	add	r31, r0
    2884:	b1 1d       	adc	r27, r1
    2886:	63 9f       	mul	r22, r19
    2888:	aa 27       	eor	r26, r26
    288a:	f0 0d       	add	r31, r0
    288c:	b1 1d       	adc	r27, r1
    288e:	aa 1f       	adc	r26, r26
    2890:	64 9f       	mul	r22, r20
    2892:	66 27       	eor	r22, r22
    2894:	b0 0d       	add	r27, r0
    2896:	a1 1d       	adc	r26, r1
    2898:	66 1f       	adc	r22, r22
    289a:	82 9f       	mul	r24, r18
    289c:	22 27       	eor	r18, r18
    289e:	b0 0d       	add	r27, r0
    28a0:	a1 1d       	adc	r26, r1
    28a2:	62 1f       	adc	r22, r18
    28a4:	73 9f       	mul	r23, r19
    28a6:	b0 0d       	add	r27, r0
    28a8:	a1 1d       	adc	r26, r1
    28aa:	62 1f       	adc	r22, r18
    28ac:	83 9f       	mul	r24, r19
    28ae:	a0 0d       	add	r26, r0
    28b0:	61 1d       	adc	r22, r1
    28b2:	22 1f       	adc	r18, r18
    28b4:	74 9f       	mul	r23, r20
    28b6:	33 27       	eor	r19, r19
    28b8:	a0 0d       	add	r26, r0
    28ba:	61 1d       	adc	r22, r1
    28bc:	23 1f       	adc	r18, r19
    28be:	84 9f       	mul	r24, r20
    28c0:	60 0d       	add	r22, r0
    28c2:	21 1d       	adc	r18, r1
    28c4:	82 2f       	mov	r24, r18
    28c6:	76 2f       	mov	r23, r22
    28c8:	6a 2f       	mov	r22, r26
    28ca:	11 24       	eor	r1, r1
    28cc:	9f 57       	subi	r25, 0x7F	; 127
    28ce:	50 40       	sbci	r21, 0x00	; 0
    28d0:	8a f0       	brmi	.+34     	; 0x28f4 <__mulsf3_pse+0x84>
    28d2:	e1 f0       	breq	.+56     	; 0x290c <__mulsf3_pse+0x9c>
    28d4:	88 23       	and	r24, r24
    28d6:	4a f0       	brmi	.+18     	; 0x28ea <__mulsf3_pse+0x7a>
    28d8:	ee 0f       	add	r30, r30
    28da:	ff 1f       	adc	r31, r31
    28dc:	bb 1f       	adc	r27, r27
    28de:	66 1f       	adc	r22, r22
    28e0:	77 1f       	adc	r23, r23
    28e2:	88 1f       	adc	r24, r24
    28e4:	91 50       	subi	r25, 0x01	; 1
    28e6:	50 40       	sbci	r21, 0x00	; 0
    28e8:	a9 f7       	brne	.-22     	; 0x28d4 <__mulsf3_pse+0x64>
    28ea:	9e 3f       	cpi	r25, 0xFE	; 254
    28ec:	51 05       	cpc	r21, r1
    28ee:	70 f0       	brcs	.+28     	; 0x290c <__mulsf3_pse+0x9c>
    28f0:	60 cf       	rjmp	.-320    	; 0x27b2 <__fp_inf>
    28f2:	aa cf       	rjmp	.-172    	; 0x2848 <__fp_szero>
    28f4:	5f 3f       	cpi	r21, 0xFF	; 255
    28f6:	ec f3       	brlt	.-6      	; 0x28f2 <__mulsf3_pse+0x82>
    28f8:	98 3e       	cpi	r25, 0xE8	; 232
    28fa:	dc f3       	brlt	.-10     	; 0x28f2 <__mulsf3_pse+0x82>
    28fc:	86 95       	lsr	r24
    28fe:	77 95       	ror	r23
    2900:	67 95       	ror	r22
    2902:	b7 95       	ror	r27
    2904:	f7 95       	ror	r31
    2906:	e7 95       	ror	r30
    2908:	9f 5f       	subi	r25, 0xFF	; 255
    290a:	c1 f7       	brne	.-16     	; 0x28fc <__mulsf3_pse+0x8c>
    290c:	fe 2b       	or	r31, r30
    290e:	88 0f       	add	r24, r24
    2910:	91 1d       	adc	r25, r1
    2912:	96 95       	lsr	r25
    2914:	87 95       	ror	r24
    2916:	97 f9       	bld	r25, 7
    2918:	08 95       	ret

0000291a <__mulsi3>:
    291a:	db 01       	movw	r26, r22
    291c:	8f 93       	push	r24
    291e:	9f 93       	push	r25
    2920:	67 d0       	rcall	.+206    	; 0x29f0 <__muluhisi3>
    2922:	bf 91       	pop	r27
    2924:	af 91       	pop	r26
    2926:	a2 9f       	mul	r26, r18
    2928:	80 0d       	add	r24, r0
    292a:	91 1d       	adc	r25, r1
    292c:	a3 9f       	mul	r26, r19
    292e:	90 0d       	add	r25, r0
    2930:	b2 9f       	mul	r27, r18
    2932:	90 0d       	add	r25, r0
    2934:	11 24       	eor	r1, r1
    2936:	08 95       	ret

00002938 <__udivmodsi4>:
    2938:	a1 e2       	ldi	r26, 0x21	; 33
    293a:	1a 2e       	mov	r1, r26
    293c:	aa 1b       	sub	r26, r26
    293e:	bb 1b       	sub	r27, r27
    2940:	fd 01       	movw	r30, r26
    2942:	0d c0       	rjmp	.+26     	; 0x295e <__udivmodsi4_ep>

00002944 <__udivmodsi4_loop>:
    2944:	aa 1f       	adc	r26, r26
    2946:	bb 1f       	adc	r27, r27
    2948:	ee 1f       	adc	r30, r30
    294a:	ff 1f       	adc	r31, r31
    294c:	a2 17       	cp	r26, r18
    294e:	b3 07       	cpc	r27, r19
    2950:	e4 07       	cpc	r30, r20
    2952:	f5 07       	cpc	r31, r21
    2954:	20 f0       	brcs	.+8      	; 0x295e <__udivmodsi4_ep>
    2956:	a2 1b       	sub	r26, r18
    2958:	b3 0b       	sbc	r27, r19
    295a:	e4 0b       	sbc	r30, r20
    295c:	f5 0b       	sbc	r31, r21

0000295e <__udivmodsi4_ep>:
    295e:	66 1f       	adc	r22, r22
    2960:	77 1f       	adc	r23, r23
    2962:	88 1f       	adc	r24, r24
    2964:	99 1f       	adc	r25, r25
    2966:	1a 94       	dec	r1
    2968:	69 f7       	brne	.-38     	; 0x2944 <__udivmodsi4_loop>
    296a:	60 95       	com	r22
    296c:	70 95       	com	r23
    296e:	80 95       	com	r24
    2970:	90 95       	com	r25
    2972:	9b 01       	movw	r18, r22
    2974:	ac 01       	movw	r20, r24
    2976:	bd 01       	movw	r22, r26
    2978:	cf 01       	movw	r24, r30
    297a:	08 95       	ret

0000297c <__divmodsi4>:
    297c:	05 2e       	mov	r0, r21
    297e:	97 fb       	bst	r25, 7
    2980:	16 f4       	brtc	.+4      	; 0x2986 <__divmodsi4+0xa>
    2982:	00 94       	com	r0
    2984:	0f d0       	rcall	.+30     	; 0x29a4 <__negsi2>
    2986:	57 fd       	sbrc	r21, 7
    2988:	05 d0       	rcall	.+10     	; 0x2994 <__divmodsi4_neg2>
    298a:	d6 df       	rcall	.-84     	; 0x2938 <__udivmodsi4>
    298c:	07 fc       	sbrc	r0, 7
    298e:	02 d0       	rcall	.+4      	; 0x2994 <__divmodsi4_neg2>
    2990:	46 f4       	brtc	.+16     	; 0x29a2 <__divmodsi4_exit>
    2992:	08 c0       	rjmp	.+16     	; 0x29a4 <__negsi2>

00002994 <__divmodsi4_neg2>:
    2994:	50 95       	com	r21
    2996:	40 95       	com	r20
    2998:	30 95       	com	r19
    299a:	21 95       	neg	r18
    299c:	3f 4f       	sbci	r19, 0xFF	; 255
    299e:	4f 4f       	sbci	r20, 0xFF	; 255
    29a0:	5f 4f       	sbci	r21, 0xFF	; 255

000029a2 <__divmodsi4_exit>:
    29a2:	08 95       	ret

000029a4 <__negsi2>:
    29a4:	90 95       	com	r25
    29a6:	80 95       	com	r24
    29a8:	70 95       	com	r23
    29aa:	61 95       	neg	r22
    29ac:	7f 4f       	sbci	r23, 0xFF	; 255
    29ae:	8f 4f       	sbci	r24, 0xFF	; 255
    29b0:	9f 4f       	sbci	r25, 0xFF	; 255
    29b2:	08 95       	ret

000029b4 <__tablejump2__>:
    29b4:	ee 0f       	add	r30, r30
    29b6:	ff 1f       	adc	r31, r31
    29b8:	00 24       	eor	r0, r0
    29ba:	00 1c       	adc	r0, r0
    29bc:	0b be       	out	0x3b, r0	; 59
    29be:	07 90       	elpm	r0, Z+
    29c0:	f6 91       	elpm	r31, Z
    29c2:	e0 2d       	mov	r30, r0
    29c4:	09 94       	ijmp

000029c6 <__umulhisi3>:
    29c6:	a2 9f       	mul	r26, r18
    29c8:	b0 01       	movw	r22, r0
    29ca:	b3 9f       	mul	r27, r19
    29cc:	c0 01       	movw	r24, r0
    29ce:	a3 9f       	mul	r26, r19
    29d0:	70 0d       	add	r23, r0
    29d2:	81 1d       	adc	r24, r1
    29d4:	11 24       	eor	r1, r1
    29d6:	91 1d       	adc	r25, r1
    29d8:	b2 9f       	mul	r27, r18
    29da:	70 0d       	add	r23, r0
    29dc:	81 1d       	adc	r24, r1
    29de:	11 24       	eor	r1, r1
    29e0:	91 1d       	adc	r25, r1
    29e2:	08 95       	ret

000029e4 <__usmulhisi3>:
    29e4:	f0 df       	rcall	.-32     	; 0x29c6 <__umulhisi3>

000029e6 <__usmulhisi3_tail>:
    29e6:	b7 ff       	sbrs	r27, 7
    29e8:	08 95       	ret
    29ea:	82 1b       	sub	r24, r18
    29ec:	93 0b       	sbc	r25, r19
    29ee:	08 95       	ret

000029f0 <__muluhisi3>:
    29f0:	ea df       	rcall	.-44     	; 0x29c6 <__umulhisi3>
    29f2:	a5 9f       	mul	r26, r21
    29f4:	90 0d       	add	r25, r0
    29f6:	b4 9f       	mul	r27, r20
    29f8:	90 0d       	add	r25, r0
    29fa:	a4 9f       	mul	r26, r20
    29fc:	80 0d       	add	r24, r0
    29fe:	91 1d       	adc	r25, r1
    2a00:	11 24       	eor	r1, r1
    2a02:	08 95       	ret

00002a04 <printf>:
    2a04:	cf 93       	push	r28
    2a06:	df 93       	push	r29
    2a08:	cd b7       	in	r28, 0x3d	; 61
    2a0a:	de b7       	in	r29, 0x3e	; 62
    2a0c:	ae 01       	movw	r20, r28
    2a0e:	4b 5f       	subi	r20, 0xFB	; 251
    2a10:	5f 4f       	sbci	r21, 0xFF	; 255
    2a12:	fa 01       	movw	r30, r20
    2a14:	61 91       	ld	r22, Z+
    2a16:	71 91       	ld	r23, Z+
    2a18:	af 01       	movw	r20, r30
    2a1a:	80 91 3f 09 	lds	r24, 0x093F	; 0x80093f <__iob+0x2>
    2a1e:	90 91 40 09 	lds	r25, 0x0940	; 0x800940 <__iob+0x3>
    2a22:	03 d0       	rcall	.+6      	; 0x2a2a <vfprintf>
    2a24:	df 91       	pop	r29
    2a26:	cf 91       	pop	r28
    2a28:	08 95       	ret

00002a2a <vfprintf>:
    2a2a:	2f 92       	push	r2
    2a2c:	3f 92       	push	r3
    2a2e:	4f 92       	push	r4
    2a30:	5f 92       	push	r5
    2a32:	6f 92       	push	r6
    2a34:	7f 92       	push	r7
    2a36:	8f 92       	push	r8
    2a38:	9f 92       	push	r9
    2a3a:	af 92       	push	r10
    2a3c:	bf 92       	push	r11
    2a3e:	cf 92       	push	r12
    2a40:	df 92       	push	r13
    2a42:	ef 92       	push	r14
    2a44:	ff 92       	push	r15
    2a46:	0f 93       	push	r16
    2a48:	1f 93       	push	r17
    2a4a:	cf 93       	push	r28
    2a4c:	df 93       	push	r29
    2a4e:	cd b7       	in	r28, 0x3d	; 61
    2a50:	de b7       	in	r29, 0x3e	; 62
    2a52:	2b 97       	sbiw	r28, 0x0b	; 11
    2a54:	0f b6       	in	r0, 0x3f	; 63
    2a56:	f8 94       	cli
    2a58:	de bf       	out	0x3e, r29	; 62
    2a5a:	0f be       	out	0x3f, r0	; 63
    2a5c:	cd bf       	out	0x3d, r28	; 61
    2a5e:	6c 01       	movw	r12, r24
    2a60:	7b 01       	movw	r14, r22
    2a62:	8a 01       	movw	r16, r20
    2a64:	fc 01       	movw	r30, r24
    2a66:	17 82       	std	Z+7, r1	; 0x07
    2a68:	16 82       	std	Z+6, r1	; 0x06
    2a6a:	83 81       	ldd	r24, Z+3	; 0x03
    2a6c:	81 ff       	sbrs	r24, 1
    2a6e:	bf c1       	rjmp	.+894    	; 0x2dee <vfprintf+0x3c4>
    2a70:	ce 01       	movw	r24, r28
    2a72:	01 96       	adiw	r24, 0x01	; 1
    2a74:	3c 01       	movw	r6, r24
    2a76:	f6 01       	movw	r30, r12
    2a78:	93 81       	ldd	r25, Z+3	; 0x03
    2a7a:	f7 01       	movw	r30, r14
    2a7c:	93 fd       	sbrc	r25, 3
    2a7e:	85 91       	lpm	r24, Z+
    2a80:	93 ff       	sbrs	r25, 3
    2a82:	81 91       	ld	r24, Z+
    2a84:	7f 01       	movw	r14, r30
    2a86:	88 23       	and	r24, r24
    2a88:	09 f4       	brne	.+2      	; 0x2a8c <vfprintf+0x62>
    2a8a:	ad c1       	rjmp	.+858    	; 0x2de6 <vfprintf+0x3bc>
    2a8c:	85 32       	cpi	r24, 0x25	; 37
    2a8e:	39 f4       	brne	.+14     	; 0x2a9e <vfprintf+0x74>
    2a90:	93 fd       	sbrc	r25, 3
    2a92:	85 91       	lpm	r24, Z+
    2a94:	93 ff       	sbrs	r25, 3
    2a96:	81 91       	ld	r24, Z+
    2a98:	7f 01       	movw	r14, r30
    2a9a:	85 32       	cpi	r24, 0x25	; 37
    2a9c:	21 f4       	brne	.+8      	; 0x2aa6 <vfprintf+0x7c>
    2a9e:	b6 01       	movw	r22, r12
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	d6 d1       	rcall	.+940    	; 0x2e50 <fputc>
    2aa4:	e8 cf       	rjmp	.-48     	; 0x2a76 <vfprintf+0x4c>
    2aa6:	91 2c       	mov	r9, r1
    2aa8:	21 2c       	mov	r2, r1
    2aaa:	31 2c       	mov	r3, r1
    2aac:	ff e1       	ldi	r31, 0x1F	; 31
    2aae:	f3 15       	cp	r31, r3
    2ab0:	d8 f0       	brcs	.+54     	; 0x2ae8 <vfprintf+0xbe>
    2ab2:	8b 32       	cpi	r24, 0x2B	; 43
    2ab4:	79 f0       	breq	.+30     	; 0x2ad4 <vfprintf+0xaa>
    2ab6:	38 f4       	brcc	.+14     	; 0x2ac6 <vfprintf+0x9c>
    2ab8:	80 32       	cpi	r24, 0x20	; 32
    2aba:	79 f0       	breq	.+30     	; 0x2ada <vfprintf+0xb0>
    2abc:	83 32       	cpi	r24, 0x23	; 35
    2abe:	a1 f4       	brne	.+40     	; 0x2ae8 <vfprintf+0xbe>
    2ac0:	23 2d       	mov	r18, r3
    2ac2:	20 61       	ori	r18, 0x10	; 16
    2ac4:	1d c0       	rjmp	.+58     	; 0x2b00 <vfprintf+0xd6>
    2ac6:	8d 32       	cpi	r24, 0x2D	; 45
    2ac8:	61 f0       	breq	.+24     	; 0x2ae2 <vfprintf+0xb8>
    2aca:	80 33       	cpi	r24, 0x30	; 48
    2acc:	69 f4       	brne	.+26     	; 0x2ae8 <vfprintf+0xbe>
    2ace:	23 2d       	mov	r18, r3
    2ad0:	21 60       	ori	r18, 0x01	; 1
    2ad2:	16 c0       	rjmp	.+44     	; 0x2b00 <vfprintf+0xd6>
    2ad4:	83 2d       	mov	r24, r3
    2ad6:	82 60       	ori	r24, 0x02	; 2
    2ad8:	38 2e       	mov	r3, r24
    2ada:	e3 2d       	mov	r30, r3
    2adc:	e4 60       	ori	r30, 0x04	; 4
    2ade:	3e 2e       	mov	r3, r30
    2ae0:	2a c0       	rjmp	.+84     	; 0x2b36 <vfprintf+0x10c>
    2ae2:	f3 2d       	mov	r31, r3
    2ae4:	f8 60       	ori	r31, 0x08	; 8
    2ae6:	1d c0       	rjmp	.+58     	; 0x2b22 <vfprintf+0xf8>
    2ae8:	37 fc       	sbrc	r3, 7
    2aea:	2d c0       	rjmp	.+90     	; 0x2b46 <vfprintf+0x11c>
    2aec:	20 ed       	ldi	r18, 0xD0	; 208
    2aee:	28 0f       	add	r18, r24
    2af0:	2a 30       	cpi	r18, 0x0A	; 10
    2af2:	40 f0       	brcs	.+16     	; 0x2b04 <vfprintf+0xda>
    2af4:	8e 32       	cpi	r24, 0x2E	; 46
    2af6:	b9 f4       	brne	.+46     	; 0x2b26 <vfprintf+0xfc>
    2af8:	36 fc       	sbrc	r3, 6
    2afa:	75 c1       	rjmp	.+746    	; 0x2de6 <vfprintf+0x3bc>
    2afc:	23 2d       	mov	r18, r3
    2afe:	20 64       	ori	r18, 0x40	; 64
    2b00:	32 2e       	mov	r3, r18
    2b02:	19 c0       	rjmp	.+50     	; 0x2b36 <vfprintf+0x10c>
    2b04:	36 fe       	sbrs	r3, 6
    2b06:	06 c0       	rjmp	.+12     	; 0x2b14 <vfprintf+0xea>
    2b08:	8a e0       	ldi	r24, 0x0A	; 10
    2b0a:	98 9e       	mul	r9, r24
    2b0c:	20 0d       	add	r18, r0
    2b0e:	11 24       	eor	r1, r1
    2b10:	92 2e       	mov	r9, r18
    2b12:	11 c0       	rjmp	.+34     	; 0x2b36 <vfprintf+0x10c>
    2b14:	ea e0       	ldi	r30, 0x0A	; 10
    2b16:	2e 9e       	mul	r2, r30
    2b18:	20 0d       	add	r18, r0
    2b1a:	11 24       	eor	r1, r1
    2b1c:	22 2e       	mov	r2, r18
    2b1e:	f3 2d       	mov	r31, r3
    2b20:	f0 62       	ori	r31, 0x20	; 32
    2b22:	3f 2e       	mov	r3, r31
    2b24:	08 c0       	rjmp	.+16     	; 0x2b36 <vfprintf+0x10c>
    2b26:	8c 36       	cpi	r24, 0x6C	; 108
    2b28:	21 f4       	brne	.+8      	; 0x2b32 <vfprintf+0x108>
    2b2a:	83 2d       	mov	r24, r3
    2b2c:	80 68       	ori	r24, 0x80	; 128
    2b2e:	38 2e       	mov	r3, r24
    2b30:	02 c0       	rjmp	.+4      	; 0x2b36 <vfprintf+0x10c>
    2b32:	88 36       	cpi	r24, 0x68	; 104
    2b34:	41 f4       	brne	.+16     	; 0x2b46 <vfprintf+0x11c>
    2b36:	f7 01       	movw	r30, r14
    2b38:	93 fd       	sbrc	r25, 3
    2b3a:	85 91       	lpm	r24, Z+
    2b3c:	93 ff       	sbrs	r25, 3
    2b3e:	81 91       	ld	r24, Z+
    2b40:	7f 01       	movw	r14, r30
    2b42:	81 11       	cpse	r24, r1
    2b44:	b3 cf       	rjmp	.-154    	; 0x2aac <vfprintf+0x82>
    2b46:	98 2f       	mov	r25, r24
    2b48:	9f 7d       	andi	r25, 0xDF	; 223
    2b4a:	95 54       	subi	r25, 0x45	; 69
    2b4c:	93 30       	cpi	r25, 0x03	; 3
    2b4e:	28 f4       	brcc	.+10     	; 0x2b5a <vfprintf+0x130>
    2b50:	0c 5f       	subi	r16, 0xFC	; 252
    2b52:	1f 4f       	sbci	r17, 0xFF	; 255
    2b54:	9f e3       	ldi	r25, 0x3F	; 63
    2b56:	99 83       	std	Y+1, r25	; 0x01
    2b58:	0d c0       	rjmp	.+26     	; 0x2b74 <vfprintf+0x14a>
    2b5a:	83 36       	cpi	r24, 0x63	; 99
    2b5c:	31 f0       	breq	.+12     	; 0x2b6a <vfprintf+0x140>
    2b5e:	83 37       	cpi	r24, 0x73	; 115
    2b60:	71 f0       	breq	.+28     	; 0x2b7e <vfprintf+0x154>
    2b62:	83 35       	cpi	r24, 0x53	; 83
    2b64:	09 f0       	breq	.+2      	; 0x2b68 <vfprintf+0x13e>
    2b66:	55 c0       	rjmp	.+170    	; 0x2c12 <vfprintf+0x1e8>
    2b68:	20 c0       	rjmp	.+64     	; 0x2baa <vfprintf+0x180>
    2b6a:	f8 01       	movw	r30, r16
    2b6c:	80 81       	ld	r24, Z
    2b6e:	89 83       	std	Y+1, r24	; 0x01
    2b70:	0e 5f       	subi	r16, 0xFE	; 254
    2b72:	1f 4f       	sbci	r17, 0xFF	; 255
    2b74:	88 24       	eor	r8, r8
    2b76:	83 94       	inc	r8
    2b78:	91 2c       	mov	r9, r1
    2b7a:	53 01       	movw	r10, r6
    2b7c:	12 c0       	rjmp	.+36     	; 0x2ba2 <vfprintf+0x178>
    2b7e:	28 01       	movw	r4, r16
    2b80:	f2 e0       	ldi	r31, 0x02	; 2
    2b82:	4f 0e       	add	r4, r31
    2b84:	51 1c       	adc	r5, r1
    2b86:	f8 01       	movw	r30, r16
    2b88:	a0 80       	ld	r10, Z
    2b8a:	b1 80       	ldd	r11, Z+1	; 0x01
    2b8c:	36 fe       	sbrs	r3, 6
    2b8e:	03 c0       	rjmp	.+6      	; 0x2b96 <vfprintf+0x16c>
    2b90:	69 2d       	mov	r22, r9
    2b92:	70 e0       	ldi	r23, 0x00	; 0
    2b94:	02 c0       	rjmp	.+4      	; 0x2b9a <vfprintf+0x170>
    2b96:	6f ef       	ldi	r22, 0xFF	; 255
    2b98:	7f ef       	ldi	r23, 0xFF	; 255
    2b9a:	c5 01       	movw	r24, r10
    2b9c:	4e d1       	rcall	.+668    	; 0x2e3a <strnlen>
    2b9e:	4c 01       	movw	r8, r24
    2ba0:	82 01       	movw	r16, r4
    2ba2:	f3 2d       	mov	r31, r3
    2ba4:	ff 77       	andi	r31, 0x7F	; 127
    2ba6:	3f 2e       	mov	r3, r31
    2ba8:	15 c0       	rjmp	.+42     	; 0x2bd4 <vfprintf+0x1aa>
    2baa:	28 01       	movw	r4, r16
    2bac:	22 e0       	ldi	r18, 0x02	; 2
    2bae:	42 0e       	add	r4, r18
    2bb0:	51 1c       	adc	r5, r1
    2bb2:	f8 01       	movw	r30, r16
    2bb4:	a0 80       	ld	r10, Z
    2bb6:	b1 80       	ldd	r11, Z+1	; 0x01
    2bb8:	36 fe       	sbrs	r3, 6
    2bba:	03 c0       	rjmp	.+6      	; 0x2bc2 <vfprintf+0x198>
    2bbc:	69 2d       	mov	r22, r9
    2bbe:	70 e0       	ldi	r23, 0x00	; 0
    2bc0:	02 c0       	rjmp	.+4      	; 0x2bc6 <vfprintf+0x19c>
    2bc2:	6f ef       	ldi	r22, 0xFF	; 255
    2bc4:	7f ef       	ldi	r23, 0xFF	; 255
    2bc6:	c5 01       	movw	r24, r10
    2bc8:	2d d1       	rcall	.+602    	; 0x2e24 <strnlen_P>
    2bca:	4c 01       	movw	r8, r24
    2bcc:	f3 2d       	mov	r31, r3
    2bce:	f0 68       	ori	r31, 0x80	; 128
    2bd0:	3f 2e       	mov	r3, r31
    2bd2:	82 01       	movw	r16, r4
    2bd4:	33 fc       	sbrc	r3, 3
    2bd6:	19 c0       	rjmp	.+50     	; 0x2c0a <vfprintf+0x1e0>
    2bd8:	82 2d       	mov	r24, r2
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	88 16       	cp	r8, r24
    2bde:	99 06       	cpc	r9, r25
    2be0:	a0 f4       	brcc	.+40     	; 0x2c0a <vfprintf+0x1e0>
    2be2:	b6 01       	movw	r22, r12
    2be4:	80 e2       	ldi	r24, 0x20	; 32
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	33 d1       	rcall	.+614    	; 0x2e50 <fputc>
    2bea:	2a 94       	dec	r2
    2bec:	f5 cf       	rjmp	.-22     	; 0x2bd8 <vfprintf+0x1ae>
    2bee:	f5 01       	movw	r30, r10
    2bf0:	37 fc       	sbrc	r3, 7
    2bf2:	85 91       	lpm	r24, Z+
    2bf4:	37 fe       	sbrs	r3, 7
    2bf6:	81 91       	ld	r24, Z+
    2bf8:	5f 01       	movw	r10, r30
    2bfa:	b6 01       	movw	r22, r12
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	28 d1       	rcall	.+592    	; 0x2e50 <fputc>
    2c00:	21 10       	cpse	r2, r1
    2c02:	2a 94       	dec	r2
    2c04:	21 e0       	ldi	r18, 0x01	; 1
    2c06:	82 1a       	sub	r8, r18
    2c08:	91 08       	sbc	r9, r1
    2c0a:	81 14       	cp	r8, r1
    2c0c:	91 04       	cpc	r9, r1
    2c0e:	79 f7       	brne	.-34     	; 0x2bee <vfprintf+0x1c4>
    2c10:	e1 c0       	rjmp	.+450    	; 0x2dd4 <vfprintf+0x3aa>
    2c12:	84 36       	cpi	r24, 0x64	; 100
    2c14:	11 f0       	breq	.+4      	; 0x2c1a <vfprintf+0x1f0>
    2c16:	89 36       	cpi	r24, 0x69	; 105
    2c18:	39 f5       	brne	.+78     	; 0x2c68 <vfprintf+0x23e>
    2c1a:	f8 01       	movw	r30, r16
    2c1c:	37 fe       	sbrs	r3, 7
    2c1e:	07 c0       	rjmp	.+14     	; 0x2c2e <vfprintf+0x204>
    2c20:	60 81       	ld	r22, Z
    2c22:	71 81       	ldd	r23, Z+1	; 0x01
    2c24:	82 81       	ldd	r24, Z+2	; 0x02
    2c26:	93 81       	ldd	r25, Z+3	; 0x03
    2c28:	0c 5f       	subi	r16, 0xFC	; 252
    2c2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c2c:	08 c0       	rjmp	.+16     	; 0x2c3e <vfprintf+0x214>
    2c2e:	60 81       	ld	r22, Z
    2c30:	71 81       	ldd	r23, Z+1	; 0x01
    2c32:	07 2e       	mov	r0, r23
    2c34:	00 0c       	add	r0, r0
    2c36:	88 0b       	sbc	r24, r24
    2c38:	99 0b       	sbc	r25, r25
    2c3a:	0e 5f       	subi	r16, 0xFE	; 254
    2c3c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c3e:	f3 2d       	mov	r31, r3
    2c40:	ff 76       	andi	r31, 0x6F	; 111
    2c42:	3f 2e       	mov	r3, r31
    2c44:	97 ff       	sbrs	r25, 7
    2c46:	09 c0       	rjmp	.+18     	; 0x2c5a <vfprintf+0x230>
    2c48:	90 95       	com	r25
    2c4a:	80 95       	com	r24
    2c4c:	70 95       	com	r23
    2c4e:	61 95       	neg	r22
    2c50:	7f 4f       	sbci	r23, 0xFF	; 255
    2c52:	8f 4f       	sbci	r24, 0xFF	; 255
    2c54:	9f 4f       	sbci	r25, 0xFF	; 255
    2c56:	f0 68       	ori	r31, 0x80	; 128
    2c58:	3f 2e       	mov	r3, r31
    2c5a:	2a e0       	ldi	r18, 0x0A	; 10
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	a3 01       	movw	r20, r6
    2c60:	33 d1       	rcall	.+614    	; 0x2ec8 <__ultoa_invert>
    2c62:	88 2e       	mov	r8, r24
    2c64:	86 18       	sub	r8, r6
    2c66:	44 c0       	rjmp	.+136    	; 0x2cf0 <vfprintf+0x2c6>
    2c68:	85 37       	cpi	r24, 0x75	; 117
    2c6a:	31 f4       	brne	.+12     	; 0x2c78 <vfprintf+0x24e>
    2c6c:	23 2d       	mov	r18, r3
    2c6e:	2f 7e       	andi	r18, 0xEF	; 239
    2c70:	b2 2e       	mov	r11, r18
    2c72:	2a e0       	ldi	r18, 0x0A	; 10
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	25 c0       	rjmp	.+74     	; 0x2cc2 <vfprintf+0x298>
    2c78:	93 2d       	mov	r25, r3
    2c7a:	99 7f       	andi	r25, 0xF9	; 249
    2c7c:	b9 2e       	mov	r11, r25
    2c7e:	8f 36       	cpi	r24, 0x6F	; 111
    2c80:	c1 f0       	breq	.+48     	; 0x2cb2 <vfprintf+0x288>
    2c82:	18 f4       	brcc	.+6      	; 0x2c8a <vfprintf+0x260>
    2c84:	88 35       	cpi	r24, 0x58	; 88
    2c86:	79 f0       	breq	.+30     	; 0x2ca6 <vfprintf+0x27c>
    2c88:	ae c0       	rjmp	.+348    	; 0x2de6 <vfprintf+0x3bc>
    2c8a:	80 37       	cpi	r24, 0x70	; 112
    2c8c:	19 f0       	breq	.+6      	; 0x2c94 <vfprintf+0x26a>
    2c8e:	88 37       	cpi	r24, 0x78	; 120
    2c90:	21 f0       	breq	.+8      	; 0x2c9a <vfprintf+0x270>
    2c92:	a9 c0       	rjmp	.+338    	; 0x2de6 <vfprintf+0x3bc>
    2c94:	e9 2f       	mov	r30, r25
    2c96:	e0 61       	ori	r30, 0x10	; 16
    2c98:	be 2e       	mov	r11, r30
    2c9a:	b4 fe       	sbrs	r11, 4
    2c9c:	0d c0       	rjmp	.+26     	; 0x2cb8 <vfprintf+0x28e>
    2c9e:	fb 2d       	mov	r31, r11
    2ca0:	f4 60       	ori	r31, 0x04	; 4
    2ca2:	bf 2e       	mov	r11, r31
    2ca4:	09 c0       	rjmp	.+18     	; 0x2cb8 <vfprintf+0x28e>
    2ca6:	34 fe       	sbrs	r3, 4
    2ca8:	0a c0       	rjmp	.+20     	; 0x2cbe <vfprintf+0x294>
    2caa:	29 2f       	mov	r18, r25
    2cac:	26 60       	ori	r18, 0x06	; 6
    2cae:	b2 2e       	mov	r11, r18
    2cb0:	06 c0       	rjmp	.+12     	; 0x2cbe <vfprintf+0x294>
    2cb2:	28 e0       	ldi	r18, 0x08	; 8
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	05 c0       	rjmp	.+10     	; 0x2cc2 <vfprintf+0x298>
    2cb8:	20 e1       	ldi	r18, 0x10	; 16
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	02 c0       	rjmp	.+4      	; 0x2cc2 <vfprintf+0x298>
    2cbe:	20 e1       	ldi	r18, 0x10	; 16
    2cc0:	32 e0       	ldi	r19, 0x02	; 2
    2cc2:	f8 01       	movw	r30, r16
    2cc4:	b7 fe       	sbrs	r11, 7
    2cc6:	07 c0       	rjmp	.+14     	; 0x2cd6 <vfprintf+0x2ac>
    2cc8:	60 81       	ld	r22, Z
    2cca:	71 81       	ldd	r23, Z+1	; 0x01
    2ccc:	82 81       	ldd	r24, Z+2	; 0x02
    2cce:	93 81       	ldd	r25, Z+3	; 0x03
    2cd0:	0c 5f       	subi	r16, 0xFC	; 252
    2cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd4:	06 c0       	rjmp	.+12     	; 0x2ce2 <vfprintf+0x2b8>
    2cd6:	60 81       	ld	r22, Z
    2cd8:	71 81       	ldd	r23, Z+1	; 0x01
    2cda:	80 e0       	ldi	r24, 0x00	; 0
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	0e 5f       	subi	r16, 0xFE	; 254
    2ce0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce2:	a3 01       	movw	r20, r6
    2ce4:	f1 d0       	rcall	.+482    	; 0x2ec8 <__ultoa_invert>
    2ce6:	88 2e       	mov	r8, r24
    2ce8:	86 18       	sub	r8, r6
    2cea:	fb 2d       	mov	r31, r11
    2cec:	ff 77       	andi	r31, 0x7F	; 127
    2cee:	3f 2e       	mov	r3, r31
    2cf0:	36 fe       	sbrs	r3, 6
    2cf2:	0d c0       	rjmp	.+26     	; 0x2d0e <vfprintf+0x2e4>
    2cf4:	23 2d       	mov	r18, r3
    2cf6:	2e 7f       	andi	r18, 0xFE	; 254
    2cf8:	a2 2e       	mov	r10, r18
    2cfa:	89 14       	cp	r8, r9
    2cfc:	58 f4       	brcc	.+22     	; 0x2d14 <vfprintf+0x2ea>
    2cfe:	34 fe       	sbrs	r3, 4
    2d00:	0b c0       	rjmp	.+22     	; 0x2d18 <vfprintf+0x2ee>
    2d02:	32 fc       	sbrc	r3, 2
    2d04:	09 c0       	rjmp	.+18     	; 0x2d18 <vfprintf+0x2ee>
    2d06:	83 2d       	mov	r24, r3
    2d08:	8e 7e       	andi	r24, 0xEE	; 238
    2d0a:	a8 2e       	mov	r10, r24
    2d0c:	05 c0       	rjmp	.+10     	; 0x2d18 <vfprintf+0x2ee>
    2d0e:	b8 2c       	mov	r11, r8
    2d10:	a3 2c       	mov	r10, r3
    2d12:	03 c0       	rjmp	.+6      	; 0x2d1a <vfprintf+0x2f0>
    2d14:	b8 2c       	mov	r11, r8
    2d16:	01 c0       	rjmp	.+2      	; 0x2d1a <vfprintf+0x2f0>
    2d18:	b9 2c       	mov	r11, r9
    2d1a:	a4 fe       	sbrs	r10, 4
    2d1c:	0f c0       	rjmp	.+30     	; 0x2d3c <vfprintf+0x312>
    2d1e:	fe 01       	movw	r30, r28
    2d20:	e8 0d       	add	r30, r8
    2d22:	f1 1d       	adc	r31, r1
    2d24:	80 81       	ld	r24, Z
    2d26:	80 33       	cpi	r24, 0x30	; 48
    2d28:	21 f4       	brne	.+8      	; 0x2d32 <vfprintf+0x308>
    2d2a:	9a 2d       	mov	r25, r10
    2d2c:	99 7e       	andi	r25, 0xE9	; 233
    2d2e:	a9 2e       	mov	r10, r25
    2d30:	09 c0       	rjmp	.+18     	; 0x2d44 <vfprintf+0x31a>
    2d32:	a2 fe       	sbrs	r10, 2
    2d34:	06 c0       	rjmp	.+12     	; 0x2d42 <vfprintf+0x318>
    2d36:	b3 94       	inc	r11
    2d38:	b3 94       	inc	r11
    2d3a:	04 c0       	rjmp	.+8      	; 0x2d44 <vfprintf+0x31a>
    2d3c:	8a 2d       	mov	r24, r10
    2d3e:	86 78       	andi	r24, 0x86	; 134
    2d40:	09 f0       	breq	.+2      	; 0x2d44 <vfprintf+0x31a>
    2d42:	b3 94       	inc	r11
    2d44:	a3 fc       	sbrc	r10, 3
    2d46:	10 c0       	rjmp	.+32     	; 0x2d68 <vfprintf+0x33e>
    2d48:	a0 fe       	sbrs	r10, 0
    2d4a:	06 c0       	rjmp	.+12     	; 0x2d58 <vfprintf+0x32e>
    2d4c:	b2 14       	cp	r11, r2
    2d4e:	80 f4       	brcc	.+32     	; 0x2d70 <vfprintf+0x346>
    2d50:	28 0c       	add	r2, r8
    2d52:	92 2c       	mov	r9, r2
    2d54:	9b 18       	sub	r9, r11
    2d56:	0d c0       	rjmp	.+26     	; 0x2d72 <vfprintf+0x348>
    2d58:	b2 14       	cp	r11, r2
    2d5a:	58 f4       	brcc	.+22     	; 0x2d72 <vfprintf+0x348>
    2d5c:	b6 01       	movw	r22, r12
    2d5e:	80 e2       	ldi	r24, 0x20	; 32
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	76 d0       	rcall	.+236    	; 0x2e50 <fputc>
    2d64:	b3 94       	inc	r11
    2d66:	f8 cf       	rjmp	.-16     	; 0x2d58 <vfprintf+0x32e>
    2d68:	b2 14       	cp	r11, r2
    2d6a:	18 f4       	brcc	.+6      	; 0x2d72 <vfprintf+0x348>
    2d6c:	2b 18       	sub	r2, r11
    2d6e:	02 c0       	rjmp	.+4      	; 0x2d74 <vfprintf+0x34a>
    2d70:	98 2c       	mov	r9, r8
    2d72:	21 2c       	mov	r2, r1
    2d74:	a4 fe       	sbrs	r10, 4
    2d76:	0f c0       	rjmp	.+30     	; 0x2d96 <vfprintf+0x36c>
    2d78:	b6 01       	movw	r22, r12
    2d7a:	80 e3       	ldi	r24, 0x30	; 48
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	68 d0       	rcall	.+208    	; 0x2e50 <fputc>
    2d80:	a2 fe       	sbrs	r10, 2
    2d82:	16 c0       	rjmp	.+44     	; 0x2db0 <vfprintf+0x386>
    2d84:	a1 fc       	sbrc	r10, 1
    2d86:	03 c0       	rjmp	.+6      	; 0x2d8e <vfprintf+0x364>
    2d88:	88 e7       	ldi	r24, 0x78	; 120
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	02 c0       	rjmp	.+4      	; 0x2d92 <vfprintf+0x368>
    2d8e:	88 e5       	ldi	r24, 0x58	; 88
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	b6 01       	movw	r22, r12
    2d94:	0c c0       	rjmp	.+24     	; 0x2dae <vfprintf+0x384>
    2d96:	8a 2d       	mov	r24, r10
    2d98:	86 78       	andi	r24, 0x86	; 134
    2d9a:	51 f0       	breq	.+20     	; 0x2db0 <vfprintf+0x386>
    2d9c:	a1 fe       	sbrs	r10, 1
    2d9e:	02 c0       	rjmp	.+4      	; 0x2da4 <vfprintf+0x37a>
    2da0:	8b e2       	ldi	r24, 0x2B	; 43
    2da2:	01 c0       	rjmp	.+2      	; 0x2da6 <vfprintf+0x37c>
    2da4:	80 e2       	ldi	r24, 0x20	; 32
    2da6:	a7 fc       	sbrc	r10, 7
    2da8:	8d e2       	ldi	r24, 0x2D	; 45
    2daa:	b6 01       	movw	r22, r12
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	50 d0       	rcall	.+160    	; 0x2e50 <fputc>
    2db0:	89 14       	cp	r8, r9
    2db2:	30 f4       	brcc	.+12     	; 0x2dc0 <vfprintf+0x396>
    2db4:	b6 01       	movw	r22, r12
    2db6:	80 e3       	ldi	r24, 0x30	; 48
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	4a d0       	rcall	.+148    	; 0x2e50 <fputc>
    2dbc:	9a 94       	dec	r9
    2dbe:	f8 cf       	rjmp	.-16     	; 0x2db0 <vfprintf+0x386>
    2dc0:	8a 94       	dec	r8
    2dc2:	f3 01       	movw	r30, r6
    2dc4:	e8 0d       	add	r30, r8
    2dc6:	f1 1d       	adc	r31, r1
    2dc8:	80 81       	ld	r24, Z
    2dca:	b6 01       	movw	r22, r12
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	40 d0       	rcall	.+128    	; 0x2e50 <fputc>
    2dd0:	81 10       	cpse	r8, r1
    2dd2:	f6 cf       	rjmp	.-20     	; 0x2dc0 <vfprintf+0x396>
    2dd4:	22 20       	and	r2, r2
    2dd6:	09 f4       	brne	.+2      	; 0x2dda <vfprintf+0x3b0>
    2dd8:	4e ce       	rjmp	.-868    	; 0x2a76 <vfprintf+0x4c>
    2dda:	b6 01       	movw	r22, r12
    2ddc:	80 e2       	ldi	r24, 0x20	; 32
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	37 d0       	rcall	.+110    	; 0x2e50 <fputc>
    2de2:	2a 94       	dec	r2
    2de4:	f7 cf       	rjmp	.-18     	; 0x2dd4 <vfprintf+0x3aa>
    2de6:	f6 01       	movw	r30, r12
    2de8:	86 81       	ldd	r24, Z+6	; 0x06
    2dea:	97 81       	ldd	r25, Z+7	; 0x07
    2dec:	02 c0       	rjmp	.+4      	; 0x2df2 <vfprintf+0x3c8>
    2dee:	8f ef       	ldi	r24, 0xFF	; 255
    2df0:	9f ef       	ldi	r25, 0xFF	; 255
    2df2:	2b 96       	adiw	r28, 0x0b	; 11
    2df4:	0f b6       	in	r0, 0x3f	; 63
    2df6:	f8 94       	cli
    2df8:	de bf       	out	0x3e, r29	; 62
    2dfa:	0f be       	out	0x3f, r0	; 63
    2dfc:	cd bf       	out	0x3d, r28	; 61
    2dfe:	df 91       	pop	r29
    2e00:	cf 91       	pop	r28
    2e02:	1f 91       	pop	r17
    2e04:	0f 91       	pop	r16
    2e06:	ff 90       	pop	r15
    2e08:	ef 90       	pop	r14
    2e0a:	df 90       	pop	r13
    2e0c:	cf 90       	pop	r12
    2e0e:	bf 90       	pop	r11
    2e10:	af 90       	pop	r10
    2e12:	9f 90       	pop	r9
    2e14:	8f 90       	pop	r8
    2e16:	7f 90       	pop	r7
    2e18:	6f 90       	pop	r6
    2e1a:	5f 90       	pop	r5
    2e1c:	4f 90       	pop	r4
    2e1e:	3f 90       	pop	r3
    2e20:	2f 90       	pop	r2
    2e22:	08 95       	ret

00002e24 <strnlen_P>:
    2e24:	fc 01       	movw	r30, r24
    2e26:	05 90       	lpm	r0, Z+
    2e28:	61 50       	subi	r22, 0x01	; 1
    2e2a:	70 40       	sbci	r23, 0x00	; 0
    2e2c:	01 10       	cpse	r0, r1
    2e2e:	d8 f7       	brcc	.-10     	; 0x2e26 <strnlen_P+0x2>
    2e30:	80 95       	com	r24
    2e32:	90 95       	com	r25
    2e34:	8e 0f       	add	r24, r30
    2e36:	9f 1f       	adc	r25, r31
    2e38:	08 95       	ret

00002e3a <strnlen>:
    2e3a:	fc 01       	movw	r30, r24
    2e3c:	61 50       	subi	r22, 0x01	; 1
    2e3e:	70 40       	sbci	r23, 0x00	; 0
    2e40:	01 90       	ld	r0, Z+
    2e42:	01 10       	cpse	r0, r1
    2e44:	d8 f7       	brcc	.-10     	; 0x2e3c <strnlen+0x2>
    2e46:	80 95       	com	r24
    2e48:	90 95       	com	r25
    2e4a:	8e 0f       	add	r24, r30
    2e4c:	9f 1f       	adc	r25, r31
    2e4e:	08 95       	ret

00002e50 <fputc>:
    2e50:	0f 93       	push	r16
    2e52:	1f 93       	push	r17
    2e54:	cf 93       	push	r28
    2e56:	df 93       	push	r29
    2e58:	fb 01       	movw	r30, r22
    2e5a:	23 81       	ldd	r18, Z+3	; 0x03
    2e5c:	21 fd       	sbrc	r18, 1
    2e5e:	03 c0       	rjmp	.+6      	; 0x2e66 <fputc+0x16>
    2e60:	8f ef       	ldi	r24, 0xFF	; 255
    2e62:	9f ef       	ldi	r25, 0xFF	; 255
    2e64:	2c c0       	rjmp	.+88     	; 0x2ebe <fputc+0x6e>
    2e66:	22 ff       	sbrs	r18, 2
    2e68:	16 c0       	rjmp	.+44     	; 0x2e96 <fputc+0x46>
    2e6a:	46 81       	ldd	r20, Z+6	; 0x06
    2e6c:	57 81       	ldd	r21, Z+7	; 0x07
    2e6e:	24 81       	ldd	r18, Z+4	; 0x04
    2e70:	35 81       	ldd	r19, Z+5	; 0x05
    2e72:	42 17       	cp	r20, r18
    2e74:	53 07       	cpc	r21, r19
    2e76:	44 f4       	brge	.+16     	; 0x2e88 <fputc+0x38>
    2e78:	a0 81       	ld	r26, Z
    2e7a:	b1 81       	ldd	r27, Z+1	; 0x01
    2e7c:	9d 01       	movw	r18, r26
    2e7e:	2f 5f       	subi	r18, 0xFF	; 255
    2e80:	3f 4f       	sbci	r19, 0xFF	; 255
    2e82:	31 83       	std	Z+1, r19	; 0x01
    2e84:	20 83       	st	Z, r18
    2e86:	8c 93       	st	X, r24
    2e88:	26 81       	ldd	r18, Z+6	; 0x06
    2e8a:	37 81       	ldd	r19, Z+7	; 0x07
    2e8c:	2f 5f       	subi	r18, 0xFF	; 255
    2e8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e90:	37 83       	std	Z+7, r19	; 0x07
    2e92:	26 83       	std	Z+6, r18	; 0x06
    2e94:	14 c0       	rjmp	.+40     	; 0x2ebe <fputc+0x6e>
    2e96:	8b 01       	movw	r16, r22
    2e98:	ec 01       	movw	r28, r24
    2e9a:	fb 01       	movw	r30, r22
    2e9c:	00 84       	ldd	r0, Z+8	; 0x08
    2e9e:	f1 85       	ldd	r31, Z+9	; 0x09
    2ea0:	e0 2d       	mov	r30, r0
    2ea2:	09 95       	icall
    2ea4:	89 2b       	or	r24, r25
    2ea6:	e1 f6       	brne	.-72     	; 0x2e60 <fputc+0x10>
    2ea8:	d8 01       	movw	r26, r16
    2eaa:	16 96       	adiw	r26, 0x06	; 6
    2eac:	8d 91       	ld	r24, X+
    2eae:	9c 91       	ld	r25, X
    2eb0:	17 97       	sbiw	r26, 0x07	; 7
    2eb2:	01 96       	adiw	r24, 0x01	; 1
    2eb4:	17 96       	adiw	r26, 0x07	; 7
    2eb6:	9c 93       	st	X, r25
    2eb8:	8e 93       	st	-X, r24
    2eba:	16 97       	sbiw	r26, 0x06	; 6
    2ebc:	ce 01       	movw	r24, r28
    2ebe:	df 91       	pop	r29
    2ec0:	cf 91       	pop	r28
    2ec2:	1f 91       	pop	r17
    2ec4:	0f 91       	pop	r16
    2ec6:	08 95       	ret

00002ec8 <__ultoa_invert>:
    2ec8:	fa 01       	movw	r30, r20
    2eca:	aa 27       	eor	r26, r26
    2ecc:	28 30       	cpi	r18, 0x08	; 8
    2ece:	51 f1       	breq	.+84     	; 0x2f24 <__ultoa_invert+0x5c>
    2ed0:	20 31       	cpi	r18, 0x10	; 16
    2ed2:	81 f1       	breq	.+96     	; 0x2f34 <__ultoa_invert+0x6c>
    2ed4:	e8 94       	clt
    2ed6:	6f 93       	push	r22
    2ed8:	6e 7f       	andi	r22, 0xFE	; 254
    2eda:	6e 5f       	subi	r22, 0xFE	; 254
    2edc:	7f 4f       	sbci	r23, 0xFF	; 255
    2ede:	8f 4f       	sbci	r24, 0xFF	; 255
    2ee0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ee2:	af 4f       	sbci	r26, 0xFF	; 255
    2ee4:	b1 e0       	ldi	r27, 0x01	; 1
    2ee6:	3e d0       	rcall	.+124    	; 0x2f64 <__ultoa_invert+0x9c>
    2ee8:	b4 e0       	ldi	r27, 0x04	; 4
    2eea:	3c d0       	rcall	.+120    	; 0x2f64 <__ultoa_invert+0x9c>
    2eec:	67 0f       	add	r22, r23
    2eee:	78 1f       	adc	r23, r24
    2ef0:	89 1f       	adc	r24, r25
    2ef2:	9a 1f       	adc	r25, r26
    2ef4:	a1 1d       	adc	r26, r1
    2ef6:	68 0f       	add	r22, r24
    2ef8:	79 1f       	adc	r23, r25
    2efa:	8a 1f       	adc	r24, r26
    2efc:	91 1d       	adc	r25, r1
    2efe:	a1 1d       	adc	r26, r1
    2f00:	6a 0f       	add	r22, r26
    2f02:	71 1d       	adc	r23, r1
    2f04:	81 1d       	adc	r24, r1
    2f06:	91 1d       	adc	r25, r1
    2f08:	a1 1d       	adc	r26, r1
    2f0a:	20 d0       	rcall	.+64     	; 0x2f4c <__ultoa_invert+0x84>
    2f0c:	09 f4       	brne	.+2      	; 0x2f10 <__ultoa_invert+0x48>
    2f0e:	68 94       	set
    2f10:	3f 91       	pop	r19
    2f12:	2a e0       	ldi	r18, 0x0A	; 10
    2f14:	26 9f       	mul	r18, r22
    2f16:	11 24       	eor	r1, r1
    2f18:	30 19       	sub	r19, r0
    2f1a:	30 5d       	subi	r19, 0xD0	; 208
    2f1c:	31 93       	st	Z+, r19
    2f1e:	de f6       	brtc	.-74     	; 0x2ed6 <__ultoa_invert+0xe>
    2f20:	cf 01       	movw	r24, r30
    2f22:	08 95       	ret
    2f24:	46 2f       	mov	r20, r22
    2f26:	47 70       	andi	r20, 0x07	; 7
    2f28:	40 5d       	subi	r20, 0xD0	; 208
    2f2a:	41 93       	st	Z+, r20
    2f2c:	b3 e0       	ldi	r27, 0x03	; 3
    2f2e:	0f d0       	rcall	.+30     	; 0x2f4e <__ultoa_invert+0x86>
    2f30:	c9 f7       	brne	.-14     	; 0x2f24 <__ultoa_invert+0x5c>
    2f32:	f6 cf       	rjmp	.-20     	; 0x2f20 <__ultoa_invert+0x58>
    2f34:	46 2f       	mov	r20, r22
    2f36:	4f 70       	andi	r20, 0x0F	; 15
    2f38:	40 5d       	subi	r20, 0xD0	; 208
    2f3a:	4a 33       	cpi	r20, 0x3A	; 58
    2f3c:	18 f0       	brcs	.+6      	; 0x2f44 <__ultoa_invert+0x7c>
    2f3e:	49 5d       	subi	r20, 0xD9	; 217
    2f40:	31 fd       	sbrc	r19, 1
    2f42:	40 52       	subi	r20, 0x20	; 32
    2f44:	41 93       	st	Z+, r20
    2f46:	02 d0       	rcall	.+4      	; 0x2f4c <__ultoa_invert+0x84>
    2f48:	a9 f7       	brne	.-22     	; 0x2f34 <__ultoa_invert+0x6c>
    2f4a:	ea cf       	rjmp	.-44     	; 0x2f20 <__ultoa_invert+0x58>
    2f4c:	b4 e0       	ldi	r27, 0x04	; 4
    2f4e:	a6 95       	lsr	r26
    2f50:	97 95       	ror	r25
    2f52:	87 95       	ror	r24
    2f54:	77 95       	ror	r23
    2f56:	67 95       	ror	r22
    2f58:	ba 95       	dec	r27
    2f5a:	c9 f7       	brne	.-14     	; 0x2f4e <__ultoa_invert+0x86>
    2f5c:	00 97       	sbiw	r24, 0x00	; 0
    2f5e:	61 05       	cpc	r22, r1
    2f60:	71 05       	cpc	r23, r1
    2f62:	08 95       	ret
    2f64:	9b 01       	movw	r18, r22
    2f66:	ac 01       	movw	r20, r24
    2f68:	0a 2e       	mov	r0, r26
    2f6a:	06 94       	lsr	r0
    2f6c:	57 95       	ror	r21
    2f6e:	47 95       	ror	r20
    2f70:	37 95       	ror	r19
    2f72:	27 95       	ror	r18
    2f74:	ba 95       	dec	r27
    2f76:	c9 f7       	brne	.-14     	; 0x2f6a <__ultoa_invert+0xa2>
    2f78:	62 0f       	add	r22, r18
    2f7a:	73 1f       	adc	r23, r19
    2f7c:	84 1f       	adc	r24, r20
    2f7e:	95 1f       	adc	r25, r21
    2f80:	a0 1d       	adc	r26, r0
    2f82:	08 95       	ret

00002f84 <_exit>:
    2f84:	f8 94       	cli

00002f86 <__stop_program>:
    2f86:	ff cf       	rjmp	.-2      	; 0x2f86 <__stop_program>
